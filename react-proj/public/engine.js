var Module=typeof Module!=="undefined"?Module:{};if(!Module.expectedDataFileDownloads){Module.expectedDataFileDownloads=0;Module.finishedDataFileDownloads=0}Module.expectedDataFileDownloads++;(function(){var loadPackage=function(metadata){function runWithFS(){Module["FS_createPath"]("/","media",true,true);Module["FS_createPath"]("/media","sounds",true,true);var fileData0=[];fileData0.push.apply(fileData0,[82,73,70,70,222,44,1,0,87,65,86,69,102,109,116,32,16,0,0,0,1,0,1,0,68,172,0,0,136,88,1,0,2,0,16,0,100,97,116,97,186,44,1,0,45,0,50,0,23,0,7,0,16,0,34,0,15,0,244,255,219,255,228,255,237,255,241,255,214,255,213,255,197,255,221,255,227,255,226,255,171,255,159,255,171,255,191,255,180,255,178,255,200,255,213,255,192,255,166,255,175,255,179,255,211,255,211,255,214,255,160,255,149,255,173,255,203,255,212,255,205,255,214,255,195,255,181,255,164,255,202,255,226,255,195,255,159,255,141,255,160,255,199,255,209,255,203,255,168,255,156,255,166,255,184,255,170,255,174,255,198,255,230,255,208,255,170,255,174,255,198,255,209,255,191,255,159,255,171,255,201,255,216,255,188,255,135,255,159,255,212,255,236,255,231,255,216,255,191,255,164,255,157,255,181,255,225,255,237,255,217,255,182,255,160,255,149,255,175,255,199,255,165,255,135,255,131,255,144,255,159,255,144,255,128,255,122,255,150,255,160,255,158,255,158,255,168,255,193,255,171,255,151,255,131,255,133,255,153,255,168,255,162,255,175,255,214,255,248,255,249,255,219,255,198,255,208,255,200,255,198,255,173,255,149,255,134,255,137,255,148,255,165,255,182,255,156,255,121,255,83,255,51,255,74,255,94,255,83,255,85,255,80,255,112,255,123,255,131,255,111,255,100,255,84,255,88,255,56,255,19,255,5,255,18,255,71,255,87,255,96,255,89,255,57,255,58,255,49,255,86,255,119,255,137,255,103,255,80,255,68,255,110,255,94,255,84,255,78,255,111,255,117,255,111,255,77,255,60,255,49,255,69,255,100,255,111,255,91,255,78,255,87,255,103,255,124,255,132,255,161,255,166,255,145,255,116,255,125,255,143,255,138,255,111,255,70,255,64,255,92,255,130,255,141,255,110,255,92,255,99,255,80,255,73,255,97,255,138,255,143,255,148,255,173,255,196,255,216,255,239,255,0,0,246,255,222,255,196,255,200,255,222,255,243,255,229,255,222,255,193,255,180,255,200,255,221,255,231,255,214,255,190,255,184,255,216,255,245,255,242,255,205,255,158,255,172,255,210,255,221,255,217,255,183,255,185,255,189,255,206,255,207,255,184,255,159,255,146,255,165,255,188,255,185,255,177,255,151,255,128,255,119,255,140,255,142,255,153,255,132,255,124,255,127,255,150,255,177,255,191,255,193,255,200,255,181,255,150,255,146,255,151,255,147,255,140,255,120,255,103,255,113,255,144,255,160,255,131,255,101,255,95,255,120,255,151,255,166,255,143,255,110,255,66,255,78,255,91,255,89,255,65,255,65,255,71,255,58,255,54,255,61,255,84,255,87,255,97,255,98,255,114,255,115,255,124,255,117,255,80,255,51,255,41,255,51,255,39,255,26,255,23,255,32,255,35,255,25,255,26,255,39,255,56,255,50,255,52,255,32,255,9,255,242,254,7,255,34,255,55,255,38,255,31,255,45,255,32,255,43,255,47,255,56,255,72,255,82,255,73,255,71,255,59,255,59,255,30,255,55,255,88,255,110,255,84,255,43,255,15,255,35,255,72,255,98,255,108,255,100,255,79,255,46,255,42,255,56,255,103,255,148,255,171,255,136,255,74,255,30,255,17,255,54,255,109,255,160,255,167,255,137,255,94,255,58,255,62,255,88,255,106,255,137,255,137,255,116,255,85,255,72,255,98,255,128,255,134,255,121,255,64,255,26,255,43,255,103,255,179,255,191,255,148,255,111,255,118,255,167,255,220,255,3,0,249,255,239,255,209,255,179,255,150,255,152,255,148,255,208,255,241,255,230,255,178,255,122,255,86,255,114,255,175,255,212,255,202,255,176,255,144,255,126,255,131,255,177,255,204,255,199,255,178,255,150,255,127,255,106,255,105,255,124,255,131,255,126,255,98,255,85,255,78,255,81,255,96,255,119,255,122,255,122,255,91,255,108,255,112,255,121,255,109,255,113,255,125,255,162,255,172,255,162,255,163,255,158,255,191,255,201,255,243,255,219,255,218,255,179,255,177,255,200,255,206,255,211,255,178,255,157,255,145,255,160,255,185,255,193,255,183,255,167,255,145,255,138,255,129,255,124,255,157,255,191,255,208,255,165,255,132,255,127,255,141,255,164,255,172,255,163,255,156,255,137,255,124,255,111,255,149,255,185,255,184,255,169,255,142,255,130,255,143,255,140,255,125,255,122,255,143,255,190,255,152,255,125,255,104,255,124,255,143,255,150,255,145,255,123,255,80,255,82,255,104,255,110,255,102,255,96,255,90,255,84,255,72,255,76,255,64,255,63,255,76,255,64,255,54,255,60,255,67,255,73,255,64,255,91,255,111,255,114,255,86,255,42,255,36,255,45,255,68,255,74,255,56,255,29,255,30,255,16,255,29,255,42,255,85,255,107,255,88,255,50,255,31,255,16,255,30,255,29,255,15,255,245,254,247,254,13,255,60,255,58,255,49,255,34,255,27,255,16,255,19,255,42,255,48,255,26,255,11,255,26,255,34,255,5,255,243,254,253,254,33,255,65,255,56,255,40,255,26,255,18,255,32,255,63,255,66,255,37,255,31,255,29,255,30,255,36,255,47,255,44,255,18,255,7,255,252,254,8,255,7,255,35,255,42,255,45,255,47,255,68,255,75,255,60,255,72,255,64,255,62,255,26,255,42,255,38,255,51,255,56,255,50,255,46,255,43,255,59,255,51,255,53,255,62,255,62,255,66,255,56,255,51,255,54,255,70,255,33,255,248,254,217,254,244,254,11,255,49,255,30,255,8,255,4,255,36,255,37,255,26,255,45,255,46,255,59,255,62,255,97,255,95,255,101,255,82,255,116,255,142,255,153,255,128,255,124,255,128,255,148,255,146,255,141,255,136,255,138,255,116,255,110,255,89,255,93,255,97,255,105,255,107,255,101,255,95,255,113,255,159,255,179,255,192,255,163,255,135,255,93,255,106,255,139,255,183,255,169,255,138,255,109,255,61,255,65,255,98,255,123,255,125,255,90,255,56,255,39,255,31,255,30,255,53,255,47,255,13,255,255,254,243,254,251,254,239,254,4,255,44,255,45,255,32,255,8,255,254,254,5,255,26,255,54,255,86,255,69,255,52,255,52,255,65,255,39,255,38,255,45,255,94,255,101,255,71,255,44,255,30,255,21,255,40,255,41,255,46,255,49,255,18,255,5,255,243,254,11,255,20,255,39,255,29,255,17,255,245,254,229,254,223,254,212,254,210,254,209,254,207,254,189,254,174,254,179,254,180,254,178,254,172,254,169,254,175,254,191,254,186,254,155,254,148,254,186,254,231,254,241,254,215,254,183,254,192,254,215,254,236,254,240,254,215,254,217,254,214,254,231,254,215,254,246,254,19,255,31,255,22,255,8,255,247,254,14,255,36,255,45,255,42,255,36,255,62,255,44,255,31,255,1,255,1,255,13,255,254,254,239,254,234,254,225,254,229,254,238,254,248,254,243,254,233,254,222,254,217,254,219,254,198,254,196,254,207,254,201,254,198,254,202,254,192,254,207,254,199,254,221,254,208,254,193,254,190,254,183,254,188,254,194,254,209,254,212,254,193,254,190,254,203,254,232,254,249,254,254,254,252,254,244,254,221,254,187,254,176,254,202,254,234,254,249,254,222,254,200,254,170,254,205,254,218,254,235,254,229,254,218,254,236,254,232,254,238,254,239,254,235,254,252,254,248,254,244,254,7,255,238,254,233,254,222,254,230,254,255,254,254,254,244,254,202,254,181,254,173,254,218,254,232,254,215,254,191,254,191,254,202,254,228,254,216,254,195,254,185,254,189,254,191,254,193,254,198,254,204,254,215,254,219,254,211,254,211,254,209,254,204,254,199,254,219,254,252,254,4,255,224,254,183,254,168,254,188,254,205,254,213,254,205,254,204,254,198,254,175,254,154,254,146,254,187,254,218,254,223,254,201,254,157,254,138,254,165,254,198,254,212,254,205,254,179,254,144,254,134,254,136,254,164,254,193,254,205,254,186,254,162,254,166,254,188,254,215,254,210,254,192,254,187,254,193,254,193,254,188,254,173,254,215,254,11,255,16,255,243,254,236,254,238,254,12,255,13,255,35,255,54,255,81,255,60,255,40,255,29,255,39,255,34,255,46,255,46,255,32,255,23,255,8,255,254,254,238,254,254,254,254,254,2,255,222,254,216,254,211,254,234,254,18,255,17,255,245,254,216,254,231,254,241,254,249,254,250,254,239,254,224,254,224,254,228,254,237,254,238,254,249,254,18,255,36,255,48,255,39,255,29,255,246,254,245,254,2,255,28,255,24,255,251,254,217,254,215,254,227,254,228,254,216,254,224,254,232,254,244,254,239,254,206,254,228,254,214,254,214,254,229,254,228,254,213,254,207,254,204,254,217,254,210,254,210,254,176,254,170,254,163,254,179,254,199,254,223,254,206,254,188,254,200,254,199,254,221,254,214,254,199,254,177,254,179,254,185,254,182,254,187,254,184,254,187,254,199,254,220,254,230,254,255,254,18,255,21,255,19,255,18,255,18,255,251,254,220,254,214,254,237,254,234,254,224,254,225,254,227,254,240,254,224,254,211,254,192,254,189,254,207,254,216,254,209,254,203,254,192,254,182,254,180,254,198,254,190,254,173,254,159,254,144,254,130,254,143,254,160,254,163,254,167,254,162,254,164,254,143,254,141,254,149,254,156,254,155,254,167,254,163,254,170,254,161,254,172,254,191,254,172,254,167,254,163,254,178,254,181,254,156,254,156,254,173,254,197,254,197,254,176,254,174,254,181,254,177,254,175,254,176,254,178,254,185,254,169,254,167,254,179,254,154,254,159,254,150,254,161,254,152,254,129,254,148,254,181,254,205,254,216,254,201,254,175,254,150,254,130,254,161,254,178,254,185,254,196,254,205,254,202,254,211,254,205,254,227,254,233,254,244,254,246,254,241,254,231,254,239,254,251,254,254,254,233,254,209,254,198,254,212,254,240,254,243,254,250,254,243,254,232,254,243,254,246,254,231,254,228,254,232,254,11,255,255,254,240,254,223,254,227,254,240,254,235,254,234,254,224,254,212,254,207,254,212,254,198,254,198,254,207,254,223,254,216,254,170,254,148,254,160,254,178,254,176,254,159,254,155,254,149,254,150,254,145,254,145,254,155,254,155,254,151,254,139,254,166,254,196,254,206,254,205,254,195,254,214,254,224,254,235,254,232,254,213,254,207,254,216,254,216,254,243,254,227,254,211,254,210,254,233,254,247,254,238,254,216,254,210,254,206,254,220,254,231,254,223,254,203,254,207,254,239,254,254,254,243,254,215,254,189,254,210,254,252,254,32,255,43,255,16,255,229,254,215,254,219,254,238,254,245,254,253,254,244,254,229,254,229,254,207,254,216,254,215,254,224,254,243,254,0,255,6,255,226,254,235,254,246,254,7,255,13,255,32,255,40,255,46,255,30,255,28,255,34,255,47,255,50,255,28,255,18,255,0,255,234,254,239,254,13,255,38,255,41,255,29,255,11,255,4,255,28,255,62,255,71,255,41,255,21,255,250,254,240,254,0,255,32,255,52,255,38,255,32,255,42,255,55,255,66,255,60,255,56,255,62,255,53,255,56,255,66,255,83,255,92,255,78,255,36,255,22,255,35,255,42,255,45,255,55,255,38,255,39,255,35,255,56,255,52,255,44,255,40,255,45,255,50,255,54,255,57,255,75,255,77,255,64,255,25,255,251,254,7,255,22,255,35,255,36,255,19,255,19,255,39,255,39,255,41,255,13,255,2,255,244,254,243,254,2,255,26,255,41,255,47,255,28,255,9,255,36,255,47,255,57,255,63,255,75,255,73,255,78,255,85,255,98,255,98,255,101,255,107,255,109,255,126,255,131,255,143,255,130,255,141,255,107,255,83,255,77,255,131,255,143,255,140,255,143,255,151,255,151,255,160,255,159,255,159,255,137,255,125,255,121,255,138,255,185,255,187,255,165,255,133,255,130,255,144,255,143,255,141,255,143,255,133,255,126,255,110,255,91,255,107,255,121,255,152,255,137,255,109,255,95,255,99,255,110,255,124,255,128,255,120,255,117,255,121,255,135,255,147,255,144,255,126,255,98,255,102,255,110,255,130,255,125,255,113,255,99,255,101,255,139,255,173,255,142,255,112,255,102,255,140,255,195,255,223,255,220,255,203,255,174,255,166,255,176,255,198,255,212,255,221,255,194,255,189,255,196,255,228,255,224,255,220,255,199,255,179,255,179,255,194,255,219,255,251,255,5,0,2,0,253,255,251,255,255,255,3,0,20,0,34,0,29,0,11,0,10,0,16,0,16,0,0,0,252,255,246,255,230,255,222,255,220,255,212,255,206,255,238,255,239,255,205,255,186,255,166,255,169,255,182,255,212,255,211,255,220,255,217,255,197,255,192,255,190,255,183,255,224,255,243,255,212,255,192,255,175,255,185,255,215,255,224,255,207,255,200,255,182,255,185,255,184,255,194,255,192,255,198,255,197,255,183,255,176,255,206,255,234,255,235,255,242,255,12,0,19,0,28,0,34,0,44,0,39,0,33,0,27,0,50,0,55,0,29,0,250,255,252,255,7,0,45,0,60,0,47,0,26,0,6,0,6,0,11,0,21,0,24,0,27,0,45,0,26,0,20,0,12,0,248,255,219,255,220,255,222,255,233,255,205,255,167,255,149,255,176,255,191,255,206,255,220,255,210,255,176,255,198,255,213,255,246,255,255,255,246,255,238,255,227,255,231,255,232,255,224,255,218,255,220,255,229,255,226,255,244,255,4,0,12,0,3,0,14,0,5,0,4,0,252,255,247,255,239,255,239,255,231,255,239,255,1,0,236,255,221,255,203,255,203,255,228,255,239,255,231,255,214,255,213,255,224,255,238,255,245,255,9,0,249,255,250,255,245,255,251,255,19,0,33,0,44,0,51,0,65,0,72,0,55,0,48,0,61,0,72,0,95,0,116,0,109,0,95,0,100,0,110,0,131,0,129,0,118,0,112,0,104,0,102,0,125,0,121,0,91,0,90,0,106,0,127,0,97,0,72,0,58,0,73,0,77,0,98,0,117,0,95,0,75,0,71,0,84,0,79,0,73,0,53,0,61,0,61,0,31,0,24,0,36,0,65,0,58,0,57,0,47,0,59,0,84,0,98,0,109,0,83,0,66,0,50,0,55,0,55,0,68,0,74,0,81,0,93,0,117,0,122,0,112,0,87,0,79,0,95,0,130,0,155,0,130,0,92,0,91,0,91,0,115,0,117,0,109,0,95,0,99,0,108,0,119,0,121,0,103,0,125,0,138,0,171,0,178,0,167,0,135,0,138,0,151,0,156,0,141,0,129,0,110,0,84,0,104,0,123,0,143,0,131,0,128,0,106,0,88,0,77,0,76,0,79,0,72,0,75,0,79,0,72,0,63,0,54,0,63,0,55,0,40,0,42,0,37,0,24,0,19,0,29,0,60,0,92,0,89,0,69,0,46,0,53,0,72,0,102,0,110,0,95,0,65,0,60,0,86,0,107,0,123,0,101,0,89,0,82,0,86,0,110,0,132,0,122,0,120,0,113,0,117,0,135,0,180,0,179,0,182,0,187,0,189,0,174,0,162,0,164,0,158,0,165,0,154,0,155,0,153,0,133,0,129,0,152,0,163,0,144,0,134,0,130,0,144,0,148,0,144,0,156,0,160,0,166,0,155,0,150,0,131,0,137,0,145,0,162,0,151,0,161,0,165,0,185,0,202,0,184,0,171,0,169,0,168,0,177,0,192,0,197,0,192,0,179,0,168,0,179,0,169,0,172,0,155,0,148,0,152,0,189,0,200,0,194,0,184,0,187,0,212,0,224,0,241,0,234,0,220,0,200,0,201,0,197,0,190,0,171,0,163,0,176,0,172,0,168,0,147,0,136,0,105,0,102,0,119,0,154,0,152,0,127,0,93,0,113,0,172,0,237,0,234,0,196,0,154,0,166,0,208,0,219,0,217,0,190,0,145,0,132,0,145,0,157,0,133,0,121,0,114,0,105,0,116,0,126,0,117,0,108,0,117,0,126,0,108,0,96,0,85,0,106,0,125,0,145,0,156,0,134,0,119,0,113,0,144,0,162,0,147,0,146,0,140,0,125,0,132,0,152,0,156,0,125,0,112,0,103,0,148,0,185,0,209,0,212,0,182,0,158,0,173,0,208,0,241,0,231,0,194,0,156,0,154,0,187,0,202,0,178,0,141,0,125,0,134,0,151,0,164,0,175,0,195,0,172,0,166,0,172,0,188,0,226,0,237,0,208,0,166,0,149,0,154,0,188,0,221,0,232,0,216,0,189,0,195,0,228,0,233,0,232,0,210,0,189,0,171,0,198,0,205,0,182,0,141,0,154,0,166,0,202,0,204,0,196,0,173,0,178,0,195,0,206,0,187,0,170,0,134,0,138,0,156,0,172,0,141,0,123,0,128,0,172,0,194,0,190,0,179,0,164,0,167,0,158,0,145,0,152,0,167,0,158,0,163,0,175,0,195,0,217,0,209,0,220,0,236,0,248,0,246,0,16,1,17,1,24,1,4,1,15,1,1,1,5,1,246,0,230,0,212,0,218,0,203,0,201,0,196,0,202,0,224,0,224,0,211,0,202,0,215,0,206,0,228,0,227,0,195,0,169,0,158,0,139,0,119,0,107,0,134,0,124,0,114,0,88,0,87,0,89,0,90,0,102,0,123,0,140,0,129,0,108,0,130,0,143,0,167,0,174,0,158,0,162,0,164,0,152,0,143,0,132,0,141,0,129,0,136,0,166,0,200,0,218,0,186,0,178,0,168,0,173,0,187,0,182,0,182,0,161,0,153,0,163,0,198,0,191,0,166,0,151,0,164,0,193,0,216,0,249,0,245,0,198,0,190,0,213,0,228,0,226,0,202,0,209,0,204,0,195,0,199,0,233,0,242,0,233,0,200,0,212,0,244,0,24,1,34,1,48,1,37,1,29,1,41,1,45,1,26,1,18,1,252,0,243,0,224,0,217,0,206,0,205,0,221,0,222,0,221,0,222,0,1,1,13,1,3,1,212,0,188,0,194,0,225,0,227,0,215,0,202,0,197,0,201,0,200,0,211,0,234,0,220,0,231,0,243,0,21,1,27,1,4,1,255,0,23,1,40,1,44,1,32,1,44,1,51,1,54,1,38,1,10,1,30,1,53,1,43,1,9,1,4,1,30,1,41,1,45,1,49,1,43,1,44,1,41,1,85,1,115,1,99,1,71,1,59,1,97,1,130,1,125,1,72,1,20,1,0,1,4,1,33,1,13,1,189,0,174,0,216,0,33,1,79,1,63,1,7,1,217,0,238,0,22,1,19,1,231,0,206,0,202,0,222,0,244,0,19,1,26,1,250,0,218,0,249,0,25,1,63,1,104,1,102,1,86,1,63,1,60,1,79,1,76,1,58,1,13,1,240,0,255,0,6,1,26,1,244,0,225,0,238,0,40,1,62,1,41,1,1,1,248,0,21,1,60,1,79,1,82,1,51,1,29,1,33,1,59,1,63,1,41,1,18,1,32,1,27,1,38,1,28,1,42,1,70,1,104,1,132,1,144,1,138,1,142,1,133,1,139,1,138,1,125,1,137,1,123,1,140,1,156,1,155,1,138,1,120,1,121,1,122,1,123,1,121,1,124,1,120,1,116,1,85,1,80,1,97,1,111,1,94,1,88,1,103,1,135,1,120,1,104,1,100,1,101,1,105,1,75,1,57,1,27,1,34,1,34,1,37,1,61,1,104,1,113,1,86,1,89,1,107,1,108,1,98,1,85,1,104,1,113,1,117,1,96,1,79,1,101,1,110,1,114,1,127,1,144,1,172,1,179,1,193,1,212,1,225,1,229,1,211,1,197,1,167,1,162,1,158,1,151,1,170,1,154,1,126,1,112,1,111,1,119,1,151,1,160,1,160,1,127,1,91,1,96,1,114,1,116,1,100,1,92,1,74,1,101,1,136,1,140,1,95,1,67,1,55,1,51,1,62,1,74,1,72,1,78,1,89,1,131,1,186,1,175,1,116,1,91,1,139,1,168,1,175,1,175,1,158,1,166,1,175,1,216,1,247,1,234,1,199,1,154,1,162,1,186,1,213,1,200,1,182,1,157,1,155,1,161,1,158,1,149,1,132,1,106,1,107,1,135,1,143,1,122,1,95,1,69,1,109,1,142,1,120,1,77,1,54,1,71,1,110,1,110,1,57,1,29,1,26,1,53,1,97,1,109,1,93,1,62,1,29,1,72,1,118,1,143,1,99,1,49,1,31,1,53,1,109,1,140,1,158,1,143,1,95,1,59,1,94,1,139,1,153,1,131,1,84,1,66,1,64,1,87,1,119,1,106,1,69,1,59,1,89,1,109,1,119,1,112,1,119,1,106,1,89,1,72,1,74,1,85,1,78,1,82,1,77,1,46,1,33,1,49,1,105,1,124,1,119,1,114,1,97,1,101,1,126,1,141,1,164,1,157,1,99,1,46,1,70,1,118,1,149,1,162,1,159,1,159,1,156,1,155,1,203,1,244,1,216,1,128,1,119,1,196,1,34,2,66,2,12,2,203,1,184,1,219,1,245,1,243,1,220,1,207,1,206,1,224,1,227,1,189,1,148,1,133,1,164,1,169,1,148,1,140,1,176,1,192,1,178,1,170,1,144,1,147,1,165,1,188,1,210,1,206,1,204,1,199,1,175,1,164,1,156,1,164,1,173,1,175,1,146,1,133,1,171,1,198,1,169,1,106,1,77,1,116,1,190,1,228,1,210,1,139,1,48,1,250,0,40,1,124,1,169,1,157,1,131,1,115,1,127,1,164,1,166,1,114,1,92,1,91,1,123,1,154,1,147,1,123,1,98,1,89,1,116,1,155,1,155,1,129,1,98,1,109,1,131,1,157,1,142,1,90,1,47,1,48,1,77,1,113,1,136,1,121,1,83,1,58,1,60,1,74,1,61,1,28,1,18,1,18,1,43,1,16,1,1,1,42,1,77,1,85,1,39,1,26,1,29,1,34,1,32,1,30,1,13,1,8,1,20,1,47,1,79,1,65,1,51,1,54,1,69,1,47,1,10,1,253,0,7,1,21,1,45,1,27,1,247,0,16,1,43,1,64,1,70,1,34,1,4,1,1,1,56,1,70,1,58,1,20,1,247,0,250,0,42,1,59,1,13,1,228,0,196,0,223,0,252,0,16,1,235,0,191,0,163,0,162,0,201,0,237,0,216,0,173,0,133,0,157,0,208,0,236,0,212,0,155,0,137,0,173,0,219,0,2,1,232,0,164,0,121,0,140,0,193,0,18,1,19,1,230,0,199,0,205,0,249,0,254,0,206,0,140,0,113,0,150,0,210,0,221,0,167,0,82,0,57,0,72,0,127,0,121,0,85,0,73,0,84,0,92,0,82,0,102,0,111,0,97,0,91,0,122,0,126,0,135,0,142,0,115,0,89,0,83,0,104,0,143,0,143,0,118,0,81,0,62,0,82,0,87,0,93,0,54,0,69,0,90,0,93,0,75,0,54,0,66,0,86,0,82,0,70,0,63,0,61,0,82,0,108,0,129,0,129,0,139,0,166,0,155,0,140,0,153,0,151,0,140,0,132,0,122,0,122,0,113,0,129,0,153,0,142,0,98,0,45,0,48,0,76,0,94,0,68,0,8,0,249,255,22,0,82,0,73,0,57,0,253,255,244,255,49,0,123,0,133,0,101,0,84,0,103,0,137,0,149,0,113,0,91,0,98,0,101,0,142,0,151,0,135,0,93,0,101,0,71,0,107,0,182,0,175,0,162,0,155,0,187,0,218,0,0,1,248,0,236,0,209,0,201,0,209,0,225,0,218,0,208,0,186,0,126,0,137,0,182,0,201,0,176,0,161,0,179,0,208,0,225,0,210,0,170,0,172,0,228,0,28,1,13,1,156,0,115,0,213,0,62,1,102,1,27,1,164,0,126,0,230,0,125,1,113,1,20,1,156,0,101,0,173,0,214,0,225,0,216,0,130,0,20,0,69,0,231,0,43,1,225,0,139,0,84,0,106,0,189,0,214,0,184,0,165,0,84,0,73,0,199,0,4,1,235,0,122,0,29,0,89,0,159,0,120,0,55,0,44,0,48,0,117,0,201,0,170,0,82,0,36,0,77,0,160,0,195,0,158,0,113,0,84,0,50,0,84,0,167,0,152,0,106,0,96,0,134,0,193,0,40,1,18,1,144,0,8,0,247,255,73,0,177,0,182,0,107,0,32,0,246,255,28,0,144,0,175,0,84,0,49,0,18,0,19,0,124,0,222,0,175,0,89,0,44,0,101,0,173,0,189,0,140,0,47,0,253,255,32,0,155,0,208,0,121,0,17,0,4,0,15,0,92,0,155,0,94,0,235,255,196,255,245,255,113,0,163,0,123,0,48,0,223,255,213,255,82,0,165,0,146,0,84,0,14,0,52,0,126,0,187,0,125,0,11,0,225,255,245,255,45,0,69,0,46,0,35,0,51,0,49,0,32,0,29,0,11,0,23,0,108,0,153,0,64,0,217,255,201,255,36,0,151,0,142,0,60,0,225,255,183,255,13,0,133,0,197,0,125,0,22,0,204,255,237,255,134,0,235,0,246,0,146,0,14,0,237,255,76,0,185,0,199,0,133,0,54,0,48,0,119,0,187,0,162,0,84,0,46,0,118,0,195,0,185,0,148,0,116,0,140,0,173,0,197,0,181,0,156,0,148,0,170,0,199,0,240,0,197,0,120,0,98,0,148,0,188,0,205,0,183,0,128,0,114,0,103,0,172,0,53,1,72,1,232,0,138,0,178,0,4,1,48,1,55,1,11,1,167,0,166,0,209,0,17,1,106,1,46,1,140,0,34,0,88,0,234,0,84,1,38,1,130,0,74,0,166,0,21,1,100,1,43,1,185,0,185,0,246,0,38,1,55,1,23,1,237,0,221,0,245,0,1,1,238,0,188,0,214,0,36,1,77,1,39,1,218,0,166,0,156,0,229,0,62,1,20,1,198,0,147,0,133,0,215,0,78,1,102,1,46,1,200,0,117,0,145,0,8,1,112,1,103,1,238,0,145,0,149,0,17,1,108,1,85,1,206,0,94,0,147,0,20,1,122,1,55,1,175,0,107,0,147,0,7,1,77,1,51,1,242,0,187,0,209,0,44,1,87,1,53,1,0,1,195,0,225,0,70,1,113,1,52,1,9,1,240,0,35,1,84,1,87,1,46,1,35,1,250,0,16,1,74,1,65,1,240,0,235,0,5,1,40,1,106,1,127,1,58,1,221,0,212,0,23,1,97,1,56,1,233,0,162,0,149,0,235,0,84,1,67,1,222,0,210,0,249,0,32,1,60,1,69,1,250,0,171,0,171,0,231,0,45,1,26,1,244,0,218,0,10,1,77,1,121,1,85,1,10,1,236,0,27,1,98,1,171,1,144,1,85,1,66,1,58,1,148,1,197,1,132,1,49,1,31,1,44,1,77,1,143,1,142,1,105,1,67,1,92,1,122,1,117,1,47,1,243,0,12,1,62,1,85,1,103,1,63,1,44,1,75,1,150,1,179,1,176,1,127,1,69,1,54,1,130,1,170,1,155,1,99,1,29,1,18,1,128,1,223,1,205,1,96,1,252,0,247,0,80,1,119,1,113,1,65,1,24,1,50,1,104,1,112,1,70,1,36,1,30,1,43,1,58,1,106,1,100,1,48,1,237,0,201,0,21,1,129,1,133,1,67,1,231,0,229,0,47,1,146,1,142,1,22,1,234,0,242,0,61,1,119,1,134,1,113,1,77,1,65,1,104,1,116,1,101,1,69,1,83,1,110,1,123,1,76,1,57,1,85,1,125,1,157,1,175,1,171,1,155,1,152,1,162,1,194,1,191,1,207,1,196,1,177,1,121,1,119,1,178,1,233,1,225,1,158,1,86,1,86,1,206,1,13,2,208,1,124,1,66,1,82,1,149,1,204,1,180,1,109,1,63,1,102,1,167,1,175,1,134,1,109,1,91,1,105,1,132,1,167,1,144,1,103,1,93,1,95,1,93,1,144,1,175,1,127,1,40,1,31,1,136,1,188,1,136,1,83,1,61,1,51,1,104,1,141,1,103,1,44,1,16,1,70,1,174,1,178,1,114,1,36,1,32,1,112,1,197,1,190,1,108,1,52,1,88,1,134,1,158,1,158,1,118,1,115,1,117,1,106,1,88,1,114,1,140,1,142,1,139,1,87,1,102,1,180,1,27,2,30,2,217,1,112,1,110,1,199,1,14,2,206,1,121,1,140,1,146,1,167,1,157,1,106,1,91,1,133,1,172,1,166,1,126,1,114,1,118,1,155,1,142,1,93,1,68,1,61,1,84,1,108,1,122,1,113,1,131,1,161,1,168,1,125,1,87,1,128,1,166,1,147,1,123,1,96,1,68,1,114,1,168,1,187,1,136,1,46,1,57,1,103,1,152,1,139,1,74,1,62,1,92,1,128,1,113,1,71,1,87,1,96,1,69,1,82,1,113,1,148,1,153,1,151,1,125,1,85,1,108,1,191,1,247,1,233,1,165,1,146,1,169,1,176,1,160,1,146,1,184,1,207,1,221,1,202,1,160,1,160,1,247,1,47,2,31,2,217,1,177,1,192,1,222,1,233,1,231,1,230,1,214,1,240,1,233,1,219,1,225,1,192,1,174,1,166,1,154,1,119,1,156,1,183,1,132,1,89,1,88,1,107,1,162,1,221,1,196,1,125,1,125,1,192,1,15,2,7,2,224,1,198,1,193,1,229,1,21,2,11,2,223,1,186,1,214,1,28,2,30,2,19,2,10,2,10,2,3,2,8,2,64,2,66,2,23,2,250,1,41,2,69,2,71,2,77,2,123,2,116,2,79,2,82,2,150,2,184,2,141,2,103,2,81,2,100,2,152,2,167,2,133,2,100,2,123,2,151,2,162,2,138,2,108,2,102,2,117,2,135,2,142,2,134,2,104,2,74,2,99,2,89,2,50,2,40,2,76,2,117,2,100,2,32,2,229,1,251,1,67,2,92,2,128,2,90,2,65,2,71,2,84,2,88,2,100,2,110,2,78,2,43,2,48,2,39,2,66,2,102,2,108,2,69,2,43,2,39,2,99,2,122,2,85,2,9,2,0,2,49,2,88,2,106,2,43,2,14,2,37,2,83,2,111,2,79,2,16,2,27,2,107,2,151,2,114,2,64,2,16,2,55,2,157,2,222,2,191,2,94,2,40,2,57,2,110,2,153,2,176,2,144,2,63,2,18,2,49,2,121,2,172,2,160,2,106,2,45,2,59,2,116,2,155,2,157,2,89,2,52,2,54,2,114,2,143,2,133,2,79,2,64,2,82,2,130,2,157,2,137,2,87,2,81,2,111,2,118,2,100,2,92,2,103,2,130,2,161,2,132,2,109,2,104,2,108,2,140,2,189,2,191,2,141,2,100,2,98,2,127,2,156,2,185,2,175,2,164,2,144,2,142,2,193,2,231,2,232,2,171,2,117,2,119,2,156,2,192,2,213,2,184,2,108,2,79,2,122,2,197,2,236,2,210,2,185,2,174,2,204,2,230,2,239,2,205,2,190,2,197,2,219,2,197,2,146,2,100,2,99,2,123,2,137,2,116,2,96,2,93,2,79,2,93,2,122,2,146,2,127,2,119,2,99,2,94,2,100,2,120,2,126,2,81,2,72,2,82,2,120,2,111,2,90,2,100,2,102,2,97,2,99,2,124,2,125,2,84,2,63,2,84,2,134,2,146,2,111,2,38,2,12,2,17,2,59,2,75,2,71,2,46,2,21,2,6,2,11,2,32,2,53,2,49,2,21,2,255,1,14,2,44,2,54,2,41,2,23,2,22,2,34,2,66,2,90,2,89,2,85,2,86,2,84,2,74,2,52,2,58,2,82,2,87,2,58,2,52,2,43,2,38,2,44,2,54,2,41,2,41,2,12,2,246,1,43,2,81,2,75,2,29,2,254,1,8,2,53,2,83,2,82,2,29,2,228,1,252,1,85,2,96,2,37,2,240,1,9,2,41,2,71,2,85,2,63,2,25,2,247,1,234,1,241,1,235,1,250,1,239,1,235,1,248,1,15,2,6,2,223,1,194,1,229,1,22,2,56,2,28,2,247,1,223,1,250,1,37,2,68,2,58,2,230,1,185,1,229,1,28,2,75,2,57,2,217,1,138,1,176,1,236,1,50,2,64,2,239,1,136,1,180,1,45,2,111,2,63,2,210,1,150,1,200,1,39,2,118,2,112,2,18,2,173,1,171,1,239,1,60,2,82,2,48,2,199,1,197,1,21,2,51,2,252,1,147,1,87,1,148,1,226,1,5,2,179,1,89,1,79,1,153,1,220,1,209,1,155,1,142,1,162,1,185,1,195,1,145,1,149,1,175,1,166,1,137,1,153,1,173,1,206,1,196,1,186,1,208,1,227,1,179,1,160,1,220,1,217,1,207,1,199,1,217,1,230,1,222,1,202,1,197,1,241,1,18,2,241,1,202,1,146,1,162,1,219,1,15,2,243,1,216,1,221,1,227,1,252,1,249,1,239,1,254,1,11,2,236,1,211,1,233,1,28,2,45,2,7,2,9,2,66,2,76,2,35,2,28,2,14,2,245,1,13,2,47,2,78,2,79,2,39,2,25,2,37,2,97,2,114,2,67,2,255,1,231,1,29,2,51,2,10,2,1,2,250,1,0,2,31,2,32,2,250,1,191,1,201,1,18,2,56,2,34,2,166,1,106,1,121,1,190,1,230,1,215,1,167,1,148,1,154,1,143,1,155,1,177,1,214,1,221,1,176,1,120,1,102,1,135,1,155,1,118,1,86,1,109,1,164,1,151,1,77,1,53,1,122,1,193,1,179,1,86,1,54,1,102,1,190,1,214,1,171,1,145,1,149,1,152,1,199,1,200,1,141,1,70,1,64,1,92,1,156,1,198,1,182,1,144,1,127,1,144,1,155,1,166,1,112,1,125,1,169,1,153,1,101,1,98,1,142,1,190,1,174,1,122,1,103,1,155,1,209,1,214,1,174,1,165,1,183,1,203,1,182,1,170,1,209,1,230,1,234,1,225,1,219,1,216,1,235,1,1,2,253,1,219,1,191,1,176,1,225,1,6,2,236,1,181,1,123,1,124,1,168,1,201,1,185,1,183,1,181,1,180,1,205,1,245,1,210,1,166,1,164,1,218,1,252,1,231,1,226,1,236,1,242,1,220,1,231,1,23,2,20,2,245,1,202,1,185,1,205,1,227,1,7,2,27,2,255,1,214,1,207,1,246,1,237,1,207,1,182,1,165,1,163,1,199,1,230,1,221,1,200,1,161,1,161,1,205,1,233,1,204,1,182,1,178,1,186,1,191,1,189,1,188,1,223,1,225,1,198,1,174,1,207,1,244,1,250,1,239,1,203,1,169,1,172,1,190,1,192,1,159,1,125,1,119,1,96,1,67,1,57,1,73,1,92,1,94,1,107,1,120,1,107,1,104,1,96,1,101,1,105,1,114,1,117,1,127,1,140,1,167,1,173,1,135,1,114,1,146,1,148,1,130,1,106,1,98,1,102,1,82,1,94,1,106,1,114,1,108,1,108,1,131,1,144,1,118,1,101,1,95,1,103,1,115,1,115,1,110,1,106,1,122,1,142,1,109,1,59,1,49,1,42,1,54,1,35,1,47,1,55,1,45,1,36,1,77,1,105,1,121,1,96,1,73,1,95,1,119,1,109,1,95,1,89,1,65,1,96,1,114,1,76,1,42,1,27,1,51,1,72,1,91,1,80,1,57,1,77,1,95,1,104,1,105,1,98,1,94,1,105,1,111,1,103,1,120,1,94,1,86,1,70,1,61,1,65,1,83,1,82,1,55,1,26,1,11,1,21,1,54,1,33,1,246,0,249,0,10,1,26,1,28,1,12,1,245,0,204,0,205,0,0,1,60,1,44,1,229,0,198,0,202,0,255,0,46,1,39,1,254,0,242,0,19,1,23,1,33,1,28,1,248,0,225,0,222,0,11,1,84,1,111,1,42,1,1,1,251,0,7,1,34,1,52,1,30,1,241,0,187,0,192,0,236,0,23,1,11,1,255,0,251,0,8,1,12,1,17,1,249,0,218,0,235,0,248,0,254,0,250,0,244,0,248,0,1,1,23,1,50,1,57,1,246,0,189,0,214,0,252,0,247,0,223,0,199,0,204,0,233,0,11,1,51,1,63,1,19,1,242,0,3,1,36,1,77,1,107,1,75,1,13,1,1,1,41,1,93,1,114,1,84,1,40,1,23,1,18,1,18,1,48,1,45,1,18,1,252,0,241,0,195,0,186,0,6,1,30,1,249,0,187,0,198,0,242,0,21,1,6,1,211,0,190,0,220,0,245,0,1,1,3,1,248,0,226,0,215,0,195,0,226,0,248,0,2,1,228,0,217,0,222,0,227,0,219,0,233,0,242,0,222,0,196,0,193,0,222,0,3,1,22,1,254,0,249,0,251,0,13,1,18,1,22,1,39,1,34,1,53,1,27,1,246,0,229,0,233,0,241,0,244,0,244,0,210,0,181,0,225,0,72,1,92,1,14,1,212,0,197,0,234,0,25,1,63,1,43,1,248,0,237,0,243,0,0,1,31,1,40,1,19,1,254,0,1,1,20,1,26,1,15,1,23,1,247,0,232,0,249,0,240,0,230,0,206,0,181,0,199,0,223,0,227,0,184,0,181,0,219,0,253,0,1,1,238,0,227,0,209,0,208,0,231,0,245,0,232,0,176,0,167,0,205,0,231,0,247,0,207,0,186,0,155,0,163,0,209,0,0,1,227,0,178,0,170,0,190,0,191,0,198,0,222,0,216,0,210,0,227,0,251,0,230,0,196,0,178,0,204,0,216,0,229,0,213,0,196,0,175,0,193,0,226,0,244,0,244,0,236,0,192,0,166,0,198,0,234,0,218,0,205,0,208,0,218,0,216,0,204,0,187,0,194,0,199,0,169,0,164,0,179,0,196,0,200,0,186,0,166,0,174,0,192,0,191,0,198,0,215,0,209,0,211,0,230,0,247,0,211,0,183,0,171,0,235,0,13,1,233,0,176,0,146,0,170,0,211,0,224,0,192,0,146,0,123,0,143,0,195,0,216,0,183,0,136,0,125,0,147,0,188,0,216,0,209,0,166,0,142,0,143,0,173,0,200,0,214,0,238,0,239,0,220,0,227,0,244,0,43,1,56,1,9,1,219,0,221,0,226,0,240,0,230,0,219,0,171,0,156,0,187,0,228,0,181,0,126,0,126,0,177,0,204,0,182,0,125,0,131,0,165,0,208,0,220,0,195,0,159,0,151,0,169,0,176,0,152,0,122,0,103,0,140,0,177,0,166,0,109,0,71,0,90,0,138,0,159,0,151,0,139,0,144,0,138,0,155,0,153,0,151,0,152,0,200,0,230,0,243,0,233,0,209,0,192,0,175,0,182,0,172,0,163,0,153,0,148,0,169,0,184,0,154,0,146,0,178,0,204,0,203,0,196,0,192,0,201,0,167,0,134,0,126,0,123,0,150,0,151,0,138,0,118,0,112,0,135,0,139,0,160,0,141,0,105,0,84,0,112,0,156,0,161,0,130,0,113,0,103,0,91,0,99,0,106,0,111,0,75,0,56,0,89,0,160,0,159,0,144,0,93,0,103,0,91,0,87,0,96,0,113,0,116,0,90,0,60,0,38,0,43,0,58,0,71,0,97,0,104,0,74,0,81,0,101,0,123,0,133,0,172,0,188,0,196,0,165,0,156,0,177,0,209,0,211,0,177,0,130,0,103,0,127,0,158,0,192,0,165,0,116,0,112,0,117,0,145,0,168,0,155,0,125,0,92,0,89,0,129,0,168,0,163,0,136,0,102,0,120,0,119,0,114,0,125,0,116,0,93,0,66,0,52,0,54,0,70,0,65,0,76,0,96,0,112,0,83,0,56,0,78,0,111,0,134,0,137,0,97,0,67,0,54,0,87,0,97,0,68,0,64,0,60,0,70,0,95,0,88,0,44,0,26,0,50,0,92,0,104,0,86,0,37,0,31,0,51,0,37,0,43,0,30,0,251,255,215,255,198,255,8,0,55,0,42,0,215,255,175,255,215,255,31,0,70,0,42,0,249,255,221,255,236,255,22,0,40,0,59,0,68,0,71,0,57,0,27,0,74,0,99,0,76,0,39,0,40,0,89,0,85,0,43,0,31,0,71,0,110,0,137,0,139,0,125,0,94,0,66,0,82,0,108,0,102,0,103,0,80,0,55,0,43,0,70,0,86,0,77,0,46,0,35,0,43,0,69,0,69,0,60,0,52,0,53,0,100,0,102,0,96,0,76,0,83,0,85,0,66,0,81,0,111,0,98,0,51,0,30,0,32,0,32,0,61,0,102,0,86,0,54,0,55,0,114,0,173,0,184,0,149,0,108,0,108,0,103,0,114,0,113,0,64,0,22,0,22,0,74,0,73,0,9,0,246,255,18,0,65,0,59,0,54,0,6,0,222,255,222,255,1,0,47,0,67,0,40,0,10,0,20,0,55,0,61,0,41,0,255,255,240,255,250,255,232,255,217,255,218,255,243,255,248,255,224,255,194,255,207,255,249,255,4,0,242,255,255,255,21,0,247,255,240,255,249,255,3,0,14,0,255,255,10,0,5,0,1,0,5,0,32,0,39,0,8,0,224,255,200,255,209,255,214,255,222,255,208,255,215,255,210,255,202,255,212,255,186,255,176,255,164,255,169,255,189,255,193,255,175,255,151,255,149,255,164,255,198,255,172,255,128,255,121,255,170,255,197,255,165,255,152,255,159,255,169,255,188,255,176,255,148,255,163,255,161,255,202,255,237,255,226,255,169,255,140,255,135,255,178,255,210,255,193,255,199,255,233,255,15,0,2,0,231,255,229,255,254,255,250,255,247,255,247,255,27,0,40,0,17,0,232,255,188,255,204,255,2,0,34,0,255,255,207,255,198,255,235,255,36,0,51,0,15,0,219,255,221,255,245,255,14,0,2,0,1,0,7,0,14,0,15,0,19,0,39,0,46,0,20,0,2,0,246,255,246,255,16,0,37,0,29,0,2,0,244,255,237,255,255,255,9,0,255,255,240,255,233,255,255,255,9,0,11,0,246,255,16,0,23,0,33,0,4,0,253,255,234,255,248,255,36,0,41,0,23,0,6,0,245,255,226,255,221,255,233,255,230,255,226,255,221,255,226,255,228,255,222,255,222,255,230,255,255,255,17,0,9,0,255,255,28,0,62,0,56,0,25,0,253,255,26,0,47,0,50,0,32,0,8,0,254,255,23,0,66,0,61,0,18,0,251,255,7,0,61,0,49,0,36,0,4,0,248,255,18,0,14,0,2,0,237,255,245,255,8,0,251,255,240,255,237,255,231,255,241,255,241,255,252,255,245,255,1,0,244,255,11,0,254,255,230,255,211,255,208,255,221,255,232,255,229,255,214,255,221,255,235,255,219,255,196,255,194,255,200,255,215,255,211,255,200,255,168,255,130,255,141,255,178,255,204,255,203,255,202,255,186,255,188,255,225,255,4,0,253,255,241,255,243,255,253,255,246,255,238,255,235,255,241,255,248,255,0,0,12,0,244,255,226,255,251,255,253,255,239,255,218,255,240,255,255,255,251,255,217,255,198,255,208,255,212,255,237,255,243,255,225,255,209,255,226,255,27,0,50,0,2,0,192,255,188,255,216,255,28,0,53,0,24,0,219,255,211,255,239,255,1,0,227,255,200,255,172,255,174,255,157,255,147,255,126,255,121,255,136,255,150,255,144,255,121,255,153,255,173,255,149,255,133,255,145,255,196,255,220,255,165,255,120,255,111,255,124,255,145,255,184,255,144,255,66,255,48,255,114,255,169,255,167,255,99,255,27,255,21,255,73,255,125,255,138,255,97,255,57,255,65,255,114,255,140,255,125,255,105,255,96,255,111,255,139,255,134,255,120,255,96,255,85,255,101,255,100,255,117,255,148,255,124,255,69,255,36,255,54,255,89,255,106,255,87,255,76,255,89,255,118,255,143,255,170,255,136,255,86,255,50,255,63,255,115,255,113,255,90,255,45,255,56,255,97,255,125,255,121,255,107,255,99,255,100,255,98,255,109,255,111,255,120,255,137,255,110,255,81,255,79,255,123,255,136,255,109,255,23,255,13,255,29,255,73,255,100,255,63,255,16,255,2,255,64,255,151,255,128,255,68,255,22,255,41,255,103,255,137,255,109,255,38,255,9,255,62,255,140,255,156,255,89,255,28,255,32,255,85,255,73,255,63,255,43,255,38,255,32,255,16,255,246,254,223,254,236,254,232,254,216,254,204,254,234,254,238,254,228,254,200,254,192,254,190,254,202,254,234,254,222,254,172,254,156,254,204,254,10,255,4,255,218,254,180,254,180,254,220,254,14,255,24,255,234,254,211,254,225,254,2,255,25,255,3,255,245,254,244,254,247,254,235,254,227,254,3,255,240,254,243,254,241,254,230,254,217,254,244,254,12,255,17,255,245,254,219,254,217,254,230,254,10,255,245,254,207,254,189,254,212,254,6,255,243,254,179,254,174,254,203,254,224,254,177,254,127,254,94,254,116,254,139,254,157,254,128,254,59,254,12,254,40,254,95,254,127,254,140,254,139,254,130,254,110,254,100,254,108,254,127,254,164,254,168,254,149,254,137,254,147,254,183,254,223,254,217,254,181,254,156,254,171,254,194,254,201,254,171,254,155,254,153,254,183,254,199,254,193,254,171,254,131,254,159,254,165,254,146,254,138,254,158,254,207,254,8,255,8,255,192,254,188,254,5,255,78,255,52,255,228,254,191,254,226,254,25,255,32,255,12,255,243,254,209,254,190,254,202,254,203,254,192,254,227,254,24,255,27,255,239,254,160,254,109,254,186,254,12,255,27,255,224,254,156,254]);fileData0.push.apply(fileData0,[176,254,14,255,64,255,6,255,221,254,234,254,49,255,82,255,33,255,229,254,255,254,57,255,84,255,67,255,16,255,252,254,15,255,38,255,42,255,35,255,4,255,10,255,74,255,122,255,113,255,45,255,18,255,43,255,77,255,76,255,54,255,78,255,90,255,79,255,74,255,93,255,104,255,96,255,83,255,74,255,90,255,114,255,148,255,157,255,109,255,57,255,47,255,96,255,128,255,100,255,47,255,37,255,100,255,142,255,141,255,68,255,6,255,12,255,100,255,158,255,106,255,24,255,39,255,59,255,88,255,102,255,88,255,55,255,28,255,48,255,92,255,141,255,123,255,83,255,74,255,78,255,80,255,65,255,80,255,115,255,168,255,164,255,145,255,156,255,152,255,119,255,101,255,112,255,183,255,203,255,159,255,137,255,169,255,200,255,215,255,196,255,136,255,100,255,115,255,145,255,157,255,126,255,109,255,113,255,178,255,197,255,187,255,168,255,149,255,166,255,200,255,191,255,142,255,132,255,182,255,214,255,192,255,130,255,132,255,211,255,3,0,218,255,153,255,111,255,156,255,214,255,185,255,134,255,140,255,177,255,204,255,206,255,188,255,166,255,200,255,217,255,202,255,150,255,124,255,137,255,161,255,207,255,192,255,126,255,148,255,199,255,225,255,196,255,174,255,187,255,206,255,214,255,187,255,144,255,119,255,101,255,130,255,128,255,94,255,64,255,99,255,116,255,92,255,40,255,39,255,93,255,126,255,155,255,145,255,103,255,89,255,120,255,181,255,172,255,127,255,64,255,114,255,209,255,198,255,120,255,94,255,113,255,146,255,173,255,172,255,141,255,138,255,187,255,219,255,188,255,114,255,129,255,218,255,57,0,35,0,216,255,177,255,222,255,240,255,238,255,254,255,23,0,15,0,223,255,179,255,196,255,191,255,185,255,197,255,194,255,201,255,191,255,200,255,214,255,223,255,170,255,140,255,186,255,0,0,20,0,255,255,235,255,218,255,222,255,246,255,14,0,249,255,177,255,140,255,174,255,209,255,192,255,135,255,104,255,138,255,204,255,222,255,188,255,170,255,174,255,223,255,240,255,209,255,161,255,188,255,215,255,210,255,190,255,182,255,190,255,184,255,203,255,220,255,236,255,237,255,207,255,189,255,217,255,253,255,8,0,244,255,201,255,215,255,232,255,252,255,241,255,190,255,183,255,184,255,237,255,24,0,51,0,7,0,218,255,240,255,40,0,242,255,173,255,178,255,234,255,7,0,223,255,217,255,247,255,24,0,241,255,241,255,231,255,243,255,0,0,244,255,202,255,190,255,214,255,252,255,24,0,68,0,49,0,234,255,198,255,254,255,77,0,104,0,17,0,213,255,1,0,43,0,22,0,188,255,177,255,12,0,82,0,51,0,3,0,221,255,218,255,1,0,50,0,78,0,252,255,149,255,159,255,25,0,124,0,45,0,156,255,146,255,243,255,32,0,10,0,238,255,249,255,52,0,42,0,243,255,227,255,229,255,1,0,21,0,23,0,245,255,8,0,56,0,51,0,17,0,199,255,181,255,230,255,38,0,4,0,210,255,177,255,181,255,239,255,33,0,13,0,226,255,205,255,243,255,52,0,57,0,4,0,236,255,37,0,52,0,43,0,55,0,12,0,223,255,226,255,10,0,25,0,239,255,146,255,129,255,250,255,28,0,184,255,100,255,133,255,225,255,2,0,244,255,237,255,219,255,169,255,183,255,233,255,242,255,210,255,193,255,190,255,202,255,228,255,232,255,212,255,199,255,217,255,248,255,19,0,11,0,17,0,253,255,247,255,10,0,81,0,111,0,26,0,216,255,228,255,10,0,32,0,35,0,231,255,209,255,214,255,12,0,38,0,6,0,223,255,220,255,249,255,255,255,235,255,6,0,10,0,209,255,187,255,254,255,33,0,7,0,235,255,21,0,52,0,7,0,247,255,21,0,28,0,19,0,24,0,69,0,94,0,75,0,51,0,249,255,239,255,22,0,88,0,87,0,37,0,252,255,27,0,55,0,39,0,2,0,244,255,254,255,38,0,25,0,10,0,26,0,78,0,70,0,14,0,216,255,199,255,20,0,51,0,19,0,198,255,175,255,211,255,249,255,15,0,13,0,8,0,229,255,247,255,65,0,95,0,73,0,41,0,57,0,82,0,93,0,83,0,36,0,246,255,27,0,81,0,108,0,93,0,50,0,38,0,74,0,122,0,86,0,72,0,64,0,66,0,84,0,90,0,105,0,102,0,85,0,86,0,80,0,70,0,116,0,144,0,100,0,49,0,106,0,121,0,72,0,27,0,51,0,62,0,54,0,79,0,96,0,40,0,211,255,248,255,44,0,39,0,254,255,249,255,244,255,11,0,45,0,66,0,27,0,248,255,54,0,134,0,113,0,21,0,237,255,1,0,35,0,68,0,85,0,44,0,10,0,56,0,172,0,205,0,125,0,46,0,78,0,128,0,112,0,123,0,166,0,138,0,50,0,85,0,177,0,171,0,96,0,98,0,170,0,188,0,129,0,112,0,105,0,128,0,140,0,160,0,165,0,110,0,63,0,67,0,114,0,155,0,140,0,79,0,61,0,100,0,160,0,151,0,149,0,108,0,101,0,104,0,130,0,138,0,99,0,76,0,62,0,85,0,116,0,107,0,104,0,142,0,164,0,148,0,166,0,210,0,230,0,159,0,125,0,157,0,192,0,138,0,105,0,135,0,163,0,121,0,87,0,134,0,184,0,162,0,116,0,144,0,211,0,212,0,165,0,135,0,163,0,196,0,204,0,200,0,178,0,158,0,176,0,210,0,239,0,207,0,188,0,212,0,228,0,246,0,246,0,215,0,165,0,167,0,196,0,200,0,150,0,155,0,209,0,237,0,198,0,134,0,113,0,169,0,225,0,0,1,210,0,142,0,155,0,242,0,44,1,9,1,166,0,130,0,154,0,203,0,196,0,156,0,87,0,62,0,111,0,155,0,129,0,84,0,72,0,119,0,185,0,191,0,137,0,51,0,40,0,137,0,226,0,160,0,31,0,30,0,149,0,147,0,62,0,62,0,123,0,178,0,163,0,136,0,136,0,160,0,181,0,201,0,187,0,158,0,175,0,200,0,219,0,182,0,149,0,117,0,165,0,199,0,197,0,191,0,178,0,161,0,190,0,35,1,32,1,234,0,209,0,1,1,56,1,56,1,233,0,158,0,160,0,242,0,29,1,213,0,166,0,210,0,238,0,227,0,207,0,232,0,208,0,169,0,180,0,230,0,185,0,109,0,122,0,184,0,198,0,164,0,121,0,107,0,129,0,168,0,177,0,176,0,150,0,160,0,183,0,212,0,207,0,129,0,98,0,133,0,190,0,229,0,234,0,233,0,212,0,194,0,235,0,23,1,27,1,0,1,250,0,5,1,30,1,28,1,246,0,194,0,210,0,238,0,249,0,5,1,4,1,200,0,159,0,211,0,248,0,210,0,125,0,144,0,232,0,20,1,3,1,182,0,123,0,121,0,122,0,164,0,210,0,194,0,118,0,82,0,154,0,193,0,161,0,170,0,204,0,167,0,99,0,104,0,188,0,248,0,226,0,193,0,192,0,195,0,209,0,236,0,237,0,205,0,181,0,227,0,1,1,216,0,187,0,195,0,233,0,5,1,0,1,193,0,143,0,154,0,242,0,42,1,30,1,201,0,163,0,195,0,17,1,4,1,204,0,169,0,201,0,15,1,39,1,13,1,227,0,16,1,101,1,71,1,255,0,224,0,14,1,49,1,47,1,249,0,198,0,200,0,254,0,245,0,186,0,132,0,131,0,195,0,251,0,53,1,25,1,210,0,209,0,26,1,94,1,86,1,13,1,217,0,3,1,68,1,93,1,28,1,243,0,233,0,208,0,232,0,26,1,34,1,244,0,236,0,6,1,36,1,33,1,15,1,30,1,5,1,247,0,42,1,94,1,63,1,235,0,193,0,208,0,29,1,66,1,58,1,241,0,189,0,192,0,240,0,19,1,13,1,186,0,175,0,201,0,7,1,8,1,187,0,157,0,165,0,162,0,184,0,196,0,216,0,190,0,140,0,177,0,241,0,247,0,160,0,124,0,175,0,231,0,242,0,225,0,227,0,210,0,170,0,181,0,212,0,244,0,198,0,135,0,154,0,204,0,214,0,196,0,163,0,183,0,207,0,187,0,148,0,159,0,159,0,133,0,116,0,98,0,85,0,95,0,94,0,92,0,94,0,109,0,72,0,52,0,122,0,178,0,111,0,33,0,61,0,150,0,163,0,101,0,51,0,93,0,164,0,138,0,68,0,32,0,103,0,132,0,109,0,98,0,86,0,107,0,120,0,118,0,115,0,122,0,65,0,24,0,58,0,152,0,145,0,48,0,24,0,92,0,150,0,158,0,94,0,68,0,124,0,193,0,166,0,125,0,133,0,148,0,136,0,166,0,164,0,132,0,111,0,143,0,190,0,211,0,182,0,157,0,179,0,230,0,217,0,196,0,219,0,12,1,15,1,203,0,162,0,203,0,9,1,22,1,212,0,185,0,252,0,4,1,221,0,180,0,226,0,168,0,102,0,129,0,181,0,200,0,149,0,97,0,107,0,115,0,122,0,154,0,132,0,134,0,169,0,160,0,92,0,60,0,111,0,153,0,145,0,128,0,122,0,113,0,108,0,169,0,176,0,131,0,77,0,112,0,200,0,202,0,155,0,122,0,97,0,86,0,129,0,177,0,187,0,163,0,162,0,176,0,178,0,106,0,90,0,178,0,168,0,136,0,155,0,190,0,146,0,79,0,54,0,168,0,226,0,166,0,78,0,75,0,170,0,187,0,178,0,121,0,129,0,169,0,187,0,212,0,219,0,170,0,103,0,124,0,156,0,153,0,121,0,52,0,43,0,146,0,207,0,157,0,76,0,77,0,127,0,132,0,116,0,75,0,45,0,20,0,34,0,91,0,88,0,39,0,34,0,75,0,115,0,111,0,120,0,134,0,144,0,145,0,107,0,63,0,97,0,170,0,213,0,166,0,85,0,94,0,162,0,198,0,150,0,108,0,121,0,174,0,195,0,175,0,172,0,165,0,157,0,238,0,19,1,222,0,150,0,135,0,152,0,185,0,194,0,168,0,130,0,124,0,166,0,166,0,110,0,74,0,102,0,134,0,106,0,71,0,105,0,129,0,119,0,107,0,114,0,126,0,127,0,131,0,123,0,150,0,125,0,100,0,99,0,94,0,54,0,22,0,250,255,28,0,80,0,105,0,31,0,235,255,20,0,120,0,131,0,86,0,49,0,87,0,110,0,106,0,149,0,137,0,63,0,49,0,122,0,200,0,163,0,89,0,105,0,172,0,195,0,166,0,166,0,177,0,200,0,216,0,221,0,249,0,250,0,250,0,216,0,205,0,234,0,227,0,163,0,143,0,153,0,149,0,174,0,152,0,146,0,143,0,130,0,147,0,159,0,161,0,164,0,165,0,175,0,189,0,213,0,215,0,217,0,198,0,186,0,198,0,210,0,185,0,162,0,170,0,203,0,196,0,198,0,214,0,194,0,138,0,124,0,169,0,200,0,182,0,169,0,168,0,196,0,194,0,180,0,174,0,173,0,207,0,187,0,178,0,201,0,232,0,209,0,187,0,193,0,208,0,219,0,220,0,190,0,165,0,191,0,205,0,209,0,191,0,180,0,185,0,194,0,209,0,226,0,220,0,217,0,234,0,6,1,0,1,192,0,154,0,200,0,229,0,223,0,181,0,165,0,175,0,189,0,177,0,218,0,247,0,217,0,152,0,177,0,244,0,208,0,126,0,109,0,210,0,6,1,246,0,229,0,247,0,31,1,22,1,231,0,219,0,4,1,243,0,207,0,222,0,245,0,224,0,179,0,181,0,249,0,14,1,220,0,210,0,17,1,10,1,206,0,173,0,200,0,11,1,255,0,230,0,251,0,246,0,200,0,200,0,17,1,46,1,36,1,8,1,49,1,110,1,81,1,33,1,19,1,25,1,20,1,32,1,61,1,79,1,73,1,71,1,61,1,39,1,10,1,21,1,27,1,24,1,36,1,24,1,18,1,7,1,251,0,246,0,22,1,46,1,12,1,10,1,16,1,8,1,233,0,242,0,244,0,238,0,207,0,224,0,8,1,4,1,230,0,202,0,206,0,230,0,243,0,216,0,236,0,255,0,2,1,215,0,218,0,26,1,48,1,11,1,237,0,246,0,22,1,45,1,45,1,37,1,39,1,44,1,46,1,81,1,75,1,42,1,20,1,52,1,120,1,129,1,84,1,42,1,30,1,47,1,65,1,60,1,47,1,43,1,52,1,75,1,65,1,53,1,40,1,24,1,44,1,53,1,53,1,34,1,250,0,245,0,7,1,9,1,219,0,222,0,251,0,28,1,41,1,14,1,22,1,59,1,89,1,98,1,99,1,92,1,101,1,112,1,128,1,101,1,57,1,55,1,104,1,129,1,160,1,152,1,115,1,91,1,92,1,113,1,121,1,91,1,83,1,91,1,78,1,70,1,80,1,82,1,74,1,67,1,44,1,58,1,81,1,82,1,76,1,43,1,66,1,78,1,52,1,18,1,33,1,78,1,91,1,65,1,54,1,76,1,70,1,35,1,42,1,82,1,112,1,105,1,53,1,57,1,80,1,89,1,69,1,85,1,92,1,81,1,35,1,41,1,29,1,27,1,39,1,56,1,72,1,86,1,91,1,87,1,107,1,122,1,122,1,109,1,126,1,125,1,109,1,89,1,87,1,96,1,77,1,51,1,48,1,86,1,110,1,83,1,42,1,29,1,73,1,78,1,64,1,89,1,112,1,91,1,67,1,91,1,107,1,115,1,100,1,104,1,94,1,106,1,104,1,116,1,113,1,132,1,159,1,140,1,128,1,121,1,162,1,197,1,155,1,129,1,143,1,160,1,154,1,128,1,81,1,85,1,109,1,116,1,103,1,110,1,81,1,87,1,125,1,157,1,156,1,111,1,107,1,86,1,83,1,96,1,83,1,63,1,52,1,63,1,41,1,19,1,18,1,40,1,25,1,10,1,28,1,73,1,107,1,70,1,61,1,60,1,57,1,48,1,44,1,73,1,72,1,65,1,66,1,67,1,81,1,69,1,59,1,33,1,69,1,76,1,61,1,51,1,35,1,17,1,4,1,30,1,69,1,79,1,70,1,53,1,52,1,49,1,46,1,48,1,71,1,76,1,46,1,19,1,43,1,91,1,113,1,118,1,113,1,116,1,93,1,94,1,71,1,78,1,87,1,65,1,72,1,63,1,27,1,40,1,63,1,90,1,83,1,63,1,50,1,65,1,67,1,67,1,62,1,62,1,62,1,88,1,92,1,87,1,75,1,56,1,50,1,75,1,68,1,32,1,242,0,10,1,84,1,81,1,55,1,32,1,64,1,82,1,97,1,66,1,57,1,59,1,61,1,53,1,53,1,50,1,13,1,255,0,13,1,25,1,16,1,7,1,12,1,1,1,239,0,222,0,230,0,7,1,254,0,254,0,0,1,33,1,45,1,50,1,17,1,5,1,7,1,21,1,50,1,59,1,54,1,46,1,46,1,48,1,42,1,35,1,42,1,53,1,72,1,89,1,63,1,57,1,66,1,73,1,99,1,99,1,85,1,79,1,91,1,92,1,99,1,89,1,80,1,81,1,47,1,65,1,72,1,52,1,32,1,19,1,51,1,52,1,35,1,57,1,84,1,84,1,48,1,39,1,48,1,42,1,32,1,36,1,52,1,60,1,61,1,31,1,25,1,44,1,51,1,56,1,54,1,89,1,123,1,122,1,106,1,120,1,139,1,144,1,119,1,121,1,141,1,150,1,128,1,90,1,100,1,115,1,104,1,86,1,79,1,78,1,68,1,83,1,116,1,110,1,86,1,76,1,126,1,149,1,134,1,114,1,97,1,118,1,129,1,122,1,116,1,106,1,124,1,140,1,118,1,86,1,104,1,134,1,85,1,22,1,21,1,57,1,84,1,91,1,90,1,116,1,109,1,84,1,117,1,141,1,157,1,132,1,120,1,144,1,162,1,153,1,109,1,101,1,111,1,113,1,111,1,94,1,93,1,60,1,9,1,8,1,41,1,37,1,11,1,4,1,28,1,49,1,35,1,17,1,27,1,17,1,6,1,13,1,40,1,51,1,49,1,33,1,50,1,76,1,107,1,103,1,93,1,114,1,137,1,142,1,135,1,111,1,117,1,130,1,124,1,99,1,105,1,96,1,80,1,64,1,63,1,71,1,102,1,84,1,68,1,69,1,71,1,59,1,48,1,51,1,70,1,52,1,10,1,252,0,18,1,23,1,6,1,249,0,255,0,242,0,251,0,1,1,251,0,248,0,236,0,211,0,219,0,241,0,237,0,233,0,241,0,3,1,27,1,37,1,11,1,240,0,211,0,239,0,23,1,37,1,42,1,36,1,41,1,42,1,30,1,51,1,33,1,32,1,28,1,31,1,16,1,14,1,247,0,216,0,196,0,181,0,183,0,215,0,211,0,181,0,150,0,155,0,174,0,147,0,109,0,101,0,155,0,186,0,172,0,148,0,131,0,122,0,139,0,151,0,129,0,121,0,144,0,168,0,189,0,192,0,207,0,220,0,239,0,248,0,218,0,240,0,14,1,24,1,249,0,225,0,235,0,241,0,238,0,2,1,10,1,243,0,218,0,218,0,246,0,240,0,199,0,175,0,184,0,201,0,187,0,154,0,141,0,147,0,148,0,161,0,179,0,175,0,165,0,159,0,193,0,194,0,167,0,135,0,150,0,186,0,225,0,195,0,170,0,170,0,215,0,226,0,187,0,176,0,194,0,198,0,188,0,211,0,232,0,235,0,214,0,192,0,192,0,202,0,226,0,231,0,226,0,211,0,230,0,228,0,206,0,214,0,229,0,224,0,223,0,206,0,222,0,223,0,246,0,249,0,249,0,16,1,14,1,23,1,45,1,48,1,42,1,31,1,33,1,41,1,0,1,243,0,235,0,228,0,205,0,184,0,160,0,197,0,211,0,209,0,194,0,208,0,232,0,222,0,207,0,230,0,7,1,253,0,250,0,240,0,241,0,233,0,231,0,242,0,9,1,31,1,26,1,19,1,24,1,39,1,53,1,10,1,243,0,252,0,28,1,21,1,17,1,253,0,245,0,233,0,247,0,249,0,245,0,241,0,216,0,220,0,250,0,253,0,230,0,215,0,252,0,21,1,20,1,245,0,234,0,246,0,241,0,234,0,215,0,218,0,209,0,228,0,228,0,236,0,2,1,7,1,3,1,12,1,16,1,28,1,25,1,19,1,31,1,17,1,8,1,26,1,8,1,244,0,246,0,237,0,236,0,217,0,232,0,236,0,248,0,247,0,234,0,234,0,8,1,248,0,240,0,6,1,17,1,247,0,198,0,173,0,216,0,222,0,193,0,170,0,167,0,186,0,195,0,184,0,178,0,182,0,198,0,184,0,196,0,189,0,167,0,129,0,147,0,172,0,198,0,175,0,165,0,139,0,125,0,131,0,136,0,167,0,176,0,160,0,150,0,156,0,161,0,167,0,146,0,138,0,168,0,216,0,187,0,165,0,146,0,158,0,166,0,191,0,192,0,213,0,199,0,181,0,197,0,223,0,244,0,219,0,197,0,182,0,193,0,203,0,188,0,171,0,153,0,147,0,157,0,159,0,127,0,125,0,122,0,109,0,130,0,165,0,158,0,123,0,90,0,135,0,150,0,121,0,83,0,86,0,122,0,140,0,99,0,69,0,82,0,113,0,127,0,121,0,138,0,133,0,106,0,103,0,101,0,118,0,117,0,98,0,78,0,118,0,149,0,121,0,101,0,123,0,150,0,155,0,144,0,127,0,132,0,128,0,87,0,94,0,115,0,130,0,115,0,125,0,140,0,115,0,108,0,115,0,119,0,96,0,94,0,58,0,54,0,69,0,71,0,55,0,59,0,76,0,88,0,83,0,67,0,68,0,82,0,102,0,102,0,95,0,101,0,126,0,125,0,111,0,113,0,111,0,124,0,118,0,111,0,97,0,110,0,125,0,122,0,109,0,87,0,65,0,85,0,105,0,130,0,152,0,136,0,116,0,109,0,127,0,162,0,174,0,165,0,159,0,144,0,160,0,181,0,178,0,166,0,174,0,200,0,222,0,211,0,198,0,189,0,174,0,193,0,206,0,218,0,195,0,181,0,181,0,154,0,151,0,164,0,188,0,190,0,191,0,175,0,196,0,204,0,186,0,170,0,186,0,180,0,155,0,138,0,127,0,147,0,167,0,154,0,122,0,109,0,99,0,76,0,55,0,61,0,64,0,63,0,59,0,42,0,42,0,46,0,55,0,68,0,61,0,51,0,85,0,99,0,104,0,92,0,74,0,84,0,75,0,67,0,79,0,92,0,114,0,96,0,114,0,139,0,146,0,152,0,135,0,140,0,123,0,114,0,107,0,113,0,93,0,77,0,85,0,118,0,107,0,80,0,101,0,139,0,151,0,125,0,88,0,124,0,164,0,156,0,133,0,109,0,103,0,127,0,131,0,138,0,120,0,122,0,107,0,92,0,85,0,60,0,54,0,27,0,15,0,30,0,44,0,41,0,46,0,29,0,35,0,41,0,66,0,67,0,48,0,41,0,32,0,56,0,78,0,88,0,65,0,29,0,26,0,42,0,51,0,76,0,64,0,42,0,29,0,32,0,46,0,90,0,88,0,103,0,94,0,98,0,86,0,69,0,64,0,71,0,92,0,71,0,62,0,77,0,59,0,46,0,34,0,42,0,49,0,39,0,24,0,11,0,2,0,0,0,247,255,5,0,6,0,249,255,238,255,236,255,246,255,220,255,199,255,201,255,212,255,248,255,242,255,237,255,209,255,176,255,183,255,237,255,4,0,251,255,226,255,251,255,26,0,60,0,68,0,71,0,57,0,46,0,55,0,87,0,81,0,35,0,15,0,28,0,43,0,18,0,253,255,239,255,1,0,228,255,204,255,196,255,213,255,209,255,214,255,212,255,210,255,189,255,177,255,199,255,215,255,212,255,200,255,223,255,239,255,241,255,220,255,243,255,7,0,17,0,22,0,9,0,245,255,245,255,238,255,246,255,252,255,239,255,222,255,229,255,3,0,12,0,241,255,211,255,213,255,245,255,13,0,27,0,4,0,241,255,219,255,211,255,219,255,244,255,14,0,32,0,29,0,2,0,241,255,0,0,4,0,254,255,6,0,2,0,251,255,253,255,252,255,3,0,243,255,233,255,215,255,218,255,229,255,231,255,204,255,215,255,9,0,7,0,233,255,203,255,208,255,229,255,223,255,197,255,155,255,160,255,178,255,187,255,194,255,211,255,206,255,210,255,212,255,242,255,10,0,36,0,24,0,17,0,15,0,15,0,6,0,12,0,10,0,24,0,17,0,4,0,30,0,50,0,48,0,253,255,253,255,17,0,31,0,20,0,3,0,231,255,238,255,6,0,245,255,233,255,235,255,11,0,1,0,9,0,252,255,7,0,225,255,199,255,213,255,233,255,219,255,161,255,179,255,193,255,210,255,203,255,179,255,194,255,207,255,227,255,209,255,176,255,173,255,193,255,203,255,194,255,191,255,190,255,188,255,199,255,199,255,180,255,208,255,232,255,240,255,235,255,219,255,176,255,160,255,165,255,179,255,150,255,151,255,158,255,146,255,138,255,121,255,152,255,167,255,167,255,166,255,173,255,197,255,225,255,216,255,182,255,176,255,151,255,157,255,183,255,202,255,216,255,201,255,174,255,147,255,116,255,101,255,121,255,130,255,116,255,81,255,74,255,88,255,125,255,123,255,125,255,126,255,134,255,143,255,127,255,112,255,133,255,185,255,199,255,184,255,183,255,202,255,217,255,191,255,193,255,190,255,224,255,255,255,230,255,182,255,166,255,181,255,175,255,178,255,179,255,161,255,138,255,112,255,108,255,127,255,150,255,150,255,141,255,141,255,178,255,199,255,203,255,207,255,233,255,245,255,6,0,3,0,247,255,233,255,254,255,12,0,255,255,226,255,201,255,194,255,193,255,197,255,185,255,174,255,141,255,139,255,172,255,183,255,161,255,153,255,159,255,168,255,176,255,172,255,173,255,173,255,183,255,180,255,177,255,197,255,230,255,242,255,229,255,203,255,195,255,190,255,213,255,223,255,235,255,235,255,233,255,218,255,218,255,241,255,235,255,223,255,203,255,220,255,206,255,199,255,191,255,205,255,220,255,200,255,167,255,160,255,170,255,164,255,174,255,188,255,191,255,170,255,164,255,171,255,202,255,226,255,242,255,241,255,237,255,238,255,237,255,240,255,237,255,247,255,243,255,232,255,216,255,215,255,218,255,216,255,237,255,226,255,223,255,198,255,205,255,236,255,250,255,229,255,221,255,210,255,202,255,209,255,182,255,157,255,155,255,147,255,157,255,149,255,126,255,111,255,89,255,111,255,102,255,95,255,85,255,89,255,101,255,111,255,126,255,133,255,152,255,145,255,138,255,148,255,150,255,160,255,145,255,170,255,184,255,199,255,181,255,181,255,189,255,198,255,177,255,161,255,167,255,169,255,178,255,205,255,215,255,196,255,185,255,174,255,201,255,202,255,206,255,220,255,221,255,237,255,221,255,236,255,216,255,229,255,235,255,217,255,199,255,180,255,183,255,200,255,200,255,187,255,195,255,195,255,188,255,179,255,201,255,222,255,240,255,209,255,199,255,229,255,3,0,250,255,239,255,228,255,232,255,220,255,221,255,209,255,195,255,172,255,156,255,139,255,152,255,148,255,157,255,173,255,191,255,187,255,173,255,162,255,178,255,187,255,183,255,190,255,197,255,201,255,179,255,190,255,182,255,189,255,208,255,202,255,177,255,186,255,174,255,127,255,124,255,158,255,120,255,91,255,127,255,143,255,100,255,61,255,53,255,51,255,56,255,108,255,161,255,124,255,81,255,106,255,126,255,156,255,173,255,110,255,99,255,102,255,122,255,119,255,124,255,118,255,138,255,155,255,156,255,110,255,85,255,113,255,143,255,130,255,118,255,93,255,90,255,116,255,148,255,160,255,146,255,137,255,123,255,129,255,152,255,166,255,198,255,198,255,196,255,194,255,198,255,206,255,210,255,222,255,213,255,181,255,150,255,139,255,139,255,138,255,134,255,137,255,138,255,137,255,158,255,139,255,128,255,143,255,130,255,114,255,101,255,99,255,84,255,74,255,98,255,101,255,124,255,90,255,89,255,106,255,138,255,129,255,114,255,111,255,157,255,152,255,171,255,183,255,188,255,173,255,170,255,185,255,210,255,250,255,224,255,168,255,178,255,225,255,232,255,205,255,195,255,212,255,237,255,225,255,196,255,181,255,197,255,210,255,209,255,209,255,205,255,164,255,163,255,181,255,201,255,201,255,160,255,157,255,153,255,155,255,147,255,147,255,163,255,202,255,202,255,199,255,211,255,198,255,168,255,173,255,199,255,239,255,243,255,220,255,217,255,229,255,236,255,235,255,228,255,225,255,246,255,243,255,2,0,249,255,4,0,14,0,4,0,239,255,240,255,253,255,246,255,217,255,210,255,224,255,216,255,227,255,242,255,231,255,215,255,225,255,217,255,213,255,206,255,218,255,214,255,213,255,231,255,238,255,208,255,202,255,200,255,199,255,198,255,167,255,171,255,211,255,218,255,219,255,236,255,31,0,33,0,253,255,227,255,241,255,254,255,235,255,234,255,244,255,26,0,51,0,34,0,19,0,16,0,251,255,244,255,7,0,45,0,58,0,23,0,5,0,1,0,5,0,4,0,252,255,7,0,17,0,22,0,7,0,13,0,31,0,33,0,28,0,40,0,15,0,3,0,234,255,233,255,234,255,233,255,213,255,180,255,173,255,198,255,209,255,220,255,217,255,227,255,18,0,61,0,43,0,248,255,239,255,250,255,255,255,240,255,242,255,2,0,247,255,9,0,1,0,247,255,233,255,245,255,245,255,4,0,39,0,60,0,59,0,28,0,13,0,1,0,252,255,243,255,235,255,232,255,217,255,202,255,227,255,255,255,255,255,252,255,9,0,26,0,13,0,6,0,241,255,2,0,12,0,38,0,36,0,44,0,29,0,24,0,32,0,54,0,59,0,25,0,19,0,32,0,47,0,44,0,23,0,247,255,246,255,5,0,29,0,28,0,39,0,30,0,38,0,64,0,64,0,44,0,18,0,18,0,27,0,24,0,15,0,235,255,218,255,237,255,36,0,58,0,52,0,31,0,43,0,38,0,43,0,25,0,36,0,43,0,28,0,249,255,6,0,9,0,0,0,244,255,225,255,220,255,243,255,255,255,222,255,198,255,226,255,243,255,3,0,252,255,239,255,248,255,231,255,212,255,225,255,12,0,51,0,34,0,6,0,249,255,246,255,247,255,216,255,206,255,199,255,220,255,186,255,191,255,191,255,219,255,201,255,196,255,203,255,201,255,206,255,224,255,0,0,253,255,243,255,5,0,59,0,87,0,85,0,46,0,32,0,45,0,69,0,61,0,18,0,10,0,44,0,43,0,32,0,24,0,13,0,26,0,28,0,51,0,66,0,57,0,50,0,52,0,57,0,52,0,64,0,61,0,63,0,66,0,76,0,77,0,78,0,87,0,65,0,39,0,40,0,52,0,58,0,65,0,73,0,79,0,88,0,84,0,78,0,40,0,34,0,40,0,52,0,60,0,80,0,69,0,27,0,244,255,9,0,18,0,21,0,1,0,244,255,6,0,21,0,243,255,187,255,160,255,188,255,226,255,234,255,237,255,232,255,230,255,215,255,222,255,242,255,253,255,215,255,179,255,181,255,224,255,232,255,200,255,181,255,162,255,167,255,158,255,163,255,166,255,148,255,138,255,144,255,161,255,154,255,129,255,119,255,147,255,147,255,142,255,166,255,198,255,191,255,184,255,185,255,205,255,205,255,199,255,203,255,200,255,208,255,212,255,194,255,195,255,186,255,189,255,204,255,220,255,210,255,194,255,190,255,214,255,232,255,223,255,239,255,10,0,33,0,19,0,251,255,3,0,29,0,58,0,53,0,26,0,15,0,21,0,38,0,61,0,85,0,84,0,60,0,39,0,46,0,46,0,28,0,33,0,35,0,25,0,7,0,15,0,248,255,241,255,201,255,183,255,219,255,250,255,243,255,211,255,177,255,168,255,178,255,190,255,197,255,176,255,160,255,189,255,190,255,194,255,156,255,137,255,155,255,189,255,210,255,207,255,204,255,198,255,198,255,216,255,232,255,240,255,234,255,224,255,216,255,221,255,235,255,221,255,193,255,187,255,204,255,213,255,224,255,219,255,207,255,211,255,210,255,225,255,244,255,12,0,4,0,4,0,16,0,4,0,22,0,35,0,22,0,15,0,7,0,7,0,20,0,0,0,254,255,11,0,22,0,12,0,1,0,250,255,254,255,255,255,5,0,31,0,43,0,42,0,38,0,25,0,38,0,58,0,80,0,59,0,38,0,24,0,36,0,46,0,50,0,60,0,37,0,36,0,46,0,62,0,38,0,7,0,246,255,235,255,227,255,226,255,234,255,219,255,219,255,205,255,232,255,240,255,244,255,217,255,200,255,202,255,206,255,192,255,198,255,204,255,221,255,225,255,207,255,184,255,168,255,182,255,188,255,189,255,178,255,172,255,181,255,183,255,179,255,174,255,168,255,141,255,111,255,83,255,104,255,105,255,114,255,144,255,155,255,143,255,153,255,184,255,200,255,183,255,154,255,156,255,174,255,180,255,154,255,153,255,177,255,159,255,101,255,76,255,95,255,91,255,92,255,109,255,118,255,125,255,145,255,139,255,141,255,160,255,149,255,139,255,140,255,142,255,151,255,103,255,128,255,171,255,178,255,153,255,174,255,167,255,142,255,119,255,127,255,186,255,199,255,149,255,107,255,90,255,129,255,121,255,59,255,62,255,81,255,109,255,162,255,155,255,106,255,60,255,82,255,163,255,139,255,60,255,65,255,131,255,164,255,76,255,26,255,73,255,125,255,114,255,101,255,83,255,46,255,27,255,57,255,101,255,97,255,33,255,252,254,13,255,40,255,7,255,203,254,3,255,73,255,74,255,49,255,56,255,46,255,37,255,48,255,102,255,101,255,27,255,214,254,4,255,33,255,36,255,15,255,245,254,25,255,31,255,46,255,46,255,1,255,248,254,22,255,24,255,4,255,13,255,6,255,10,255,17,255,15,255,213,254,165,254,150,254,199,254,182,254,158,254,172,254,198,254,177,254,151,254,162,254,192,254,212,254,189,254,198,254,188,254,199,254,192,254,217,254,222,254,222,254,210,254,203,254,172,254,174,254,165,254,172,254,197,254,208,254,205,254,184,254,177,254,213,254,21,255,15,255,223,254,225,254,233,254,15,255,10,255,245,254,7,255,246,254,234,254,236,254,216,254,235,254,233,254,223,254,207,254,187,254,195,254,225,254,249,254,249,254,226,254,206,254,194,254,228,254,235,254,228,254,229,254,231,254,219,254,228,254,236,254,245,254,217,254,217,254,231,254,227,254,186,254,175,254,193,254,240,254,224,254,199,254,229,254,216,254,171,254,151,254,150,254,155,254,135,254,112,254,114,254,113,254,109,254,104,254,105,254,73,254,49,254,27,254,34,254,87,254,103,254,96,254,88,254,111,254,120,254,112,254,103,254,114,254,104,254,79,254,65,254,75,254,86,254,64,254,27,254,29,254,36,254,56,254,49,254,19,254,50,254,70,254,56,254,60,254,101,254,112,254,73,254,59,254,56,254,36,254,37,254,59,254,57,254,27,254,1,254,244,253,249,253,248,253,246,253,0,254,1,254,1,254,227,253,198,253,194,253,196,253,217,253,251,253,1,254,226,253,187,253,186,253,225,253,246,253,245,253,218,253,215,253,242,253,222,253,226,253,246,253,243,253,214,253,195,253,169,253,169,253,202,253,206,253,208,253,225,253,252,253,10,254,236,253,208,253,203,253,195,253,234,253,1,254,247,253,214,253,197,253,192,253,221,253,220,253,215,253,203,253,203,253,222,253,204,253,166,253,137,253,136,253,128,253,120,253,83,253,99,253,90,253,73,253,76,253,73,253,83,253,103,253,100,253,105,253,131,253,145,253,162,253,151,253,153,253,146,253,166,253,185,253,191,253,192,253,212,253,200,253,201,253,245,253,3,254,0,254,227,253,194,253,189,253,204,253,236,253,1,254,238,253,182,253,157,253,156,253,140,253,167,253,171,253,155,253,149,253,158,253,162,253,150,253,119,253,143,253,179,253,183,253,174,253,151,253,157,253,189,253,152,253,107,253,86,253,135,253,178,253,174,253,158,253,197,253,189,253,184,253,204,253,220,253,4,254,232,253,201,253,224,253,235,253,201,253,176,253,177,253,220,253,242,253,214,253,161,253,154,253,178,253,193,253,174,253,152,253,158,253,161,253,123,253,121,253,136,253,132,253,124,253,121,253,151,253,180,253,157,253,129,253,125,253,130,253,144,253,108,253,118,253,137,253,126,253,101,253,112,253,152,253,174,253,141,253,106,253,93,253,146,253,180,253,173,253,142,253,155,253,163,253,180,253,165,253,147,253,167,253,153,253,125,253,126,253,173,253,178,253,145,253,140,253,185,253,212,253,173,253,142,253,160,253,174,253,176,253,167,253,173,253,192,253,162,253,114,253,120,253,166,253,172,253,160,253,142,253,166,253,180,253,147,253,137,253,146,253,172,253,125,253,78,253,141,253,176,253,155,253,118,253,138,253,207,253,211,253,184,253,132,253,82,253,120,253,142,253,127,253,111,253,118,253,148,253,146,253,133,253,133,253,119,253,118,253,94,253,60,253,94,253,141,253,140,253,106,253,104,253,104,253,128,253,105,253,96,253,70,253,86,253,135,253,159,253,142,253,128,253,98,253,93,253,90,253,97,253,106,253,89,253,64,253,83,253,84,253,100,253,149,253,134,253,164,253,179,253,170,253,167,253,195,253,209,253,203,253,171,253,173,253,193,253,183,253,153,253,139,253,137,253,97,253,101,253,98,253,105,253,102,253,133,253,167,253,167,253,143,253,148,253,132,253,142,253,138,253,127,253,147,253,134,253,122,253,114,253,112,253,145,253,157,253,181,253,144,253,117,253,113,253,153,253,187,253,153,253,137,253,140,253,150,253,150,253,142,253,161,253,145,253,98,253,107,253,131,253,132,253,122,253,104,253,98,253,131,253,150,253,160,253,138,253,118,253,120,253,159,253,153,253,159,253,145,253,144,253,148,253,175,253,186,253,165,253,153,253,170,253,180,253,181,253,183,253,164,253,184,253,172,253,164,253,160,253,174,253,186,253,208,253,199,253,159,253,137,253,140,253,179,253,165,253,141,253,147,253,158,253,185,253,180,253,167,253,185,253,208,253,195,253,167,253,159,253,156,253,172,253,162,253,147,253,143,253,163,253,169,253,181,253,155,253,142,253,144,253,158,253,176,253,161,253,128,253,105,253,90,253,125,253,143,253,125,253,100,253,85,253,134,253,161,253,159,253,148,253,168,253,214,253,219,253,222,253,172,253,177,253,226,253,239,253,239,253,197,253,222,253,239,253,218,253,194,253,208,253,209,253,207,253,232,253,231,253,229,253,231,253,232,253,209,253,196,253,198,253,219,253,230,253,4,254,2,254,244,253,233,253,225,253,208,253,235,253,50,254,68,254,41,254,2,254,22,254,63,254,57,254,44,254,25,254,18,254,8,254,0,254,244,253,237,253,240,253,240,253,253,253,235,253,233,253,245,253,4,254,0,254,253,253,251,253,254,253,249,253,213,253,200,253,187,253,184,253,194,253,159,253,133,253,145,253,173,253,173,253,149,253,138,253,171,253,179,253,210,253,228,253,199,253,209,253,237,253,12,254,26,254,224,253,182,253,198,253,230,253,234,253,225,253,223,253,240,253,233,253,220,253,202,253,183,253,173,253,181,253,153,253,141,253,151,253,164,253,190,253,188,253,147,253,164,253,168,253,169,253,163,253,156,253,167,253,173,253,173,253,174,253,149,253,144,253,170,253,198,253,172,253,150,253,149,253,176,253,207,253,187,253,169,253,150,253,157,253,182,253,168,253,122,253,110,253,168,253,172,253,139,253,125,253,135,253,166,253,165,253,142,253,153,253,141,253,155,253,153,253,164,253,203,253,197,253,172,253,153,253,144,253,167,253,215,253,191,253,157,253,142,253,162,253,187,253,175,253,212,253,248,253,242,253,206,253,198,253,197,253,192,253,182,253,201,253,235,253,210,253,166,253,160,253,163,253,193,253,224,253,225,253,212,253,204,253,197,253,187,253,205,253,240,253,240,253,198,253,172,253,189,253,208,253,200,253,164,253,166,253,162,253,155,253,149,253,188,253,196,253,159,253,180,253,202,253,226,253,211,253,176,253,170,253,191,253,217,253,243,253,212,253,204,253,220,253,234,253,4,254,21,254,28,254,64,254,59,254,50,254,53,254,83,254,103,254,86,254,69,254,71,254,82,254,85,254,75,254,83,254,82,254,72,254,77,254,77,254,88,254,99,254,105,254,83,254,59,254,58,254,35,254,39,254,55,254,59,254,48,254,35,254,34,254,56,254,54,254,27,254,23,254,22,254,43,254,74,254,82,254,45,254,38,254,36,254,23,254,56,254,95,254,96,254,72,254,68,254,85,254,98,254,78,254,80,254,97,254,125,254,110,254,111,254,94,254,86,254,105,254,93,254,72,254,99,254,110,254,94,254,95,254,86,254,107,254,102,254,91,254,92,254,91,254,113,254,119,254,104,254,111,254,118,254,115,254,80,254,56,254,80,254,97,254,91,254,57,254,49,254,46,254,42,254,64,254,69,254,61,254,81,254,78,254,92,254,107,254,132,254,106,254,104,254,128,254,149,254,152,254,150,254,154,254,162,254,148,254,138,254,176,254,206,254,168,254,111,254,95,254,101,254,111,254,92,254,55,254,35,254,62,254,91,254,91,254,77,254,67,254,102,254,112,254,108,254,112,254,109,254,107,254,100,254,87,254,84,254,96,254,92,254,89,254,78,254,85,254,75,254,65,254,85,254,129,254,133,254,113,254,112,254,116,254,108,254,101,254,139,254,149,254,142,254,122,254,105,254,140,254,158,254,142,254,118,254,133,254,174,254,176,254,171,254,151,254,155,254,173,254,172,254,166,254,135,254,141,254,113,254,125,254,138,254,164,254,168,254,157,254,153,254,163,254,163,254,178,254,189,254,207,254,219,254,238,254,232,254,230,254,232,254,244,254,247,254,247,254,225,254,178,254,161,254,171,254,192,254,181,254,154,254,127,254,142,254,148,254,171,254,138,254,102,254,103,254,131,254,131,254,108,254,110,254,109,254,123,254,129,254,146,254,155,254,124,254,96,254,122,254,163,254,168,254,172,254,166,254,148,254,159,254,175,254,200,254,209,254,185,254,195,254,195,254,177,254,183,254,198,254,211,254,205,254,199,254,189,254,200,254,191,254,186,254,193,254,208,254,222,254,230,254,226,254,235,254,253,254,1,255,241,254,247,254,243,254,243,254,251,254,2,255,6,255,6,255,12,255,20,255,4,255,233,254,240,254,251,254,230,254,230,254,241,254,241,254,255,254,10,255,241,254,203,254,181,254,199,254,224,254,217,254,195,254,193,254,202,254,205,254,214,254,220,254,218,254,207,254,195,254,182,254,185,254,157,254,161,254,182,254,226,254,217,254,222,254,231,254,243,254,233,254,235,254,243,254,226,254,253,254,250,254,15,255,58,255,55,255,44,255,12,255,243,254,247,254,235,254,228,254,237,254,236,254,236,254,234,254,215,254,210,254,209,254,210,254,208,254,201,254,194,254,182,254,175,254,190,254,181,254,178,254,193,254,198,254,189,254,170,254,197,254,164,254,145,254,169,254,217,254,1,255,8,255,17,255,8,255,235,254,232,254,37,255,84,255,64,255,31,255,20,255,23,255,32,255,16,255,51,255,73,255,82,255,83,255,74,255,67,255,97,255,124,255,124,255,93,255,98,255,96,255,98,255,106,255,121,255,134,255,116,255,88,255,92,255,113,255,120,255,123,255,152,255,129,255,100,255,63,255,49,255,49,255,57,255,58,255,70,255,62,255,53,255,32,255,19,255,40,255,57,255,53,255,74,255,75,255,58,255,60,255,62,255,54,255,39,255,38,255,37,255,56,255,77,255,62,255,64,255,70,255,82,255,100,255,127,255,146,255,135,255,110,255,119,255,147,255,159,255,135,255,97,255,102,255,83,255,90,255,84,255,77,255,67,255,44,255,53,255,46,255,42,255,31,255,28,255,28,255,31,255,41,255,27,255,39,255,54,255,52,255,41,255,46,255,54,255,48,255,75,255,85,255,75,255,42,255,38,255,29,255,25,255,15,255,16,255,13,255,19,255,50,255,78,255,71,255,53,255,71,255,78,255,75,255,76,255,58,255,72,255,80,255,81,255,89,255,120,255,116,255,112,255,105,255,116,255,116,255,106,255,81,255,76,255,57,255,47,255,51,255,57,255,33,255,38,255,68,255,78,255,71,255,75,255,104,255,114,255,100,255,105,255,101,255,108,255,100,255,101,255,79,255,65,255,50,255,80,255,76,255,72,255,69,255,78,255,70,255,72,255,105,255,130,255,107,255,83,255,96,255,106,255,112,255,146,255,137,255,139,255,128,255,134,255,136,255,110,255,78,255,84,255,79,255,73,255,44,255,32,255,22,255,17,255,28,255,32,255,36,255,28,255,23,255,36,255,27,255,41,255,32,255,47,255,58,255,62,255,72,255,73,255,72,255,78,255,84,255,74,255,76,255,42,255,31,255,37,255,54,255,70,255,65,255,59,255,60,255,58,255,67,255,85,255,80,255,94,255,82,255,79,255,89,255,95,255,85,255,88,255,85,255,85,255,77,255,72,255,69,255,53,255,45,255,56,255,51,255,49,255,57,255,79,255,101,255,98,255,90,255,79,255,89,255,105,255,110,255,96,255,99,255,114,255,138,255,152,255,152,255,176,255,198,255,187,255,176,255,187,255,202,255,192,255,188,255,193,255,198,255,193,255,178,255,182,255,195,255,202,255,204,255,193,255,201,255,198,255,203,255,213,255,210,255,223,255,231,255,218,255,192,255,201,255,226,255,241,255,233,255,227,255,221,255,220,255,198,255,198,255,201,255,184,255,172,255,172,255,182,255,181,255,185,255,186,255,193,255,226,255,247,255,227,255,189,255,183,255,202,255,207,255,189,255,178,255,185,255,156,255,136,255,141,255,158,255,149,255,134,255,142,255,132,255,136,255,151,255,134,255,134,255,132,255,131,255,138,255,157,255,161,255,179,255,160,255,154,255,134,255,138,255,139,255,168,255,183,255,183,255,171,255,185,255,213,255,213,255,221,255,240,255,219,255,212,255,245,255,9,0,235,255,244,255,2,0,19,0,6,0,253,255,254,255,4,0,5,0,15,0,26,0,29,0,35,0,22,0,249,255,222,255,221,255,255,255,9,0,4,0,238,255,234,255,228,255,228,255,229,255,242,255,225,255,250,255,225,255,229,255,207,255,210,255,236,255,233,255,218,255,215,255,213,255,218,255,199,255,192,255,183,255,168,255,154,255,149,255,139,255,109,255,97,255,128,255,138,255,111,255,72,255,68,255,100,255,130,255,132,255,128,255,126,255,137,255,138,255,145,255,156,255,169,255,153,255,148,255,140,255,124,255,106,255,106,255,108,255,142,255,156,255,172,255,182,255,172,255,173,255,177,255,201,255,233,255,250,255,245,255,246,255,252,255,1,0,243,255,10,0,17,0,29,0,17,0,22,0,31,0,46,0,37,0,242,255,226,255,245,255,246,255,237,255,217,255,210,255,240,255,238,255,232,255,248,255,250,255,3,0,242,255,248,255,227,255,227,255,231,255,24,0,12,0,0,0,207,255,189,255,179,255,169,255,153,255,123,255]);fileData0.push.apply(fileData0,[120,255,131,255,160,255,179,255,168,255,165,255,187,255,193,255,179,255,160,255,171,255,185,255,184,255,178,255,175,255,149,255,146,255,124,255,175,255,190,255,179,255,179,255,171,255,170,255,181,255,186,255,170,255,199,255,204,255,209,255,194,255,201,255,205,255,187,255,159,255,158,255,170,255,170,255,164,255,166,255,170,255,145,255,156,255,172,255,205,255,200,255,193,255,184,255,172,255,178,255,176,255,162,255,157,255,195,255,231,255,218,255,181,255,143,255,143,255,174,255,189,255,200,255,186,255,163,255,159,255,159,255,170,255,176,255,179,255,180,255,159,255,163,255,177,255,199,255,197,255,188,255,210,255,201,255,203,255,195,255,164,255,170,255,170,255,163,255,195,255,205,255,181,255,158,255,162,255,159,255,150,255,122,255,109,255,124,255,134,255,146,255,148,255,140,255,119,255,119,255,109,255,122,255,147,255,143,255,131,255,152,255,187,255,175,255,139,255,121,255,131,255,133,255,155,255,178,255,180,255,162,255,131,255,112,255,131,255,155,255,176,255,179,255,165,255,155,255,177,255,170,255,180,255,189,255,199,255,204,255,211,255,225,255,228,255,225,255,204,255,203,255,185,255,163,255,162,255,145,255,114,255,110,255,99,255,125,255,136,255,131,255,125,255,131,255,126,255,130,255,133,255,146,255,136,255,141,255,143,255,145,255,153,255,154,255,157,255,179,255,170,255,139,255,120,255,140,255,164,255,171,255,168,255,172,255,190,255,210,255,196,255,207,255,199,255,204,255,199,255,170,255,152,255,149,255,140,255,128,255,140,255,133,255,118,255,111,255,120,255,115,255,119,255,84,255,64,255,52,255,68,255,67,255,71,255,53,255,41,255,29,255,35,255,41,255,39,255,48,255,67,255,84,255,99,255,105,255,74,255,57,255,49,255,75,255,75,255,72,255,47,255,48,255,38,255,48,255,49,255,70,255,81,255,88,255,92,255,87,255,96,255,107,255,131,255,151,255,172,255,198,255,190,255,188,255,185,255,187,255,171,255,172,255,168,255,157,255,148,255,153,255,163,255,175,255,179,255,169,255,157,255,167,255,156,255,124,255,93,255,95,255,126,255,140,255,139,255,136,255,147,255,147,255,131,255,151,255,177,255,200,255,175,255,155,255,172,255,181,255,171,255,133,255,134,255,140,255,171,255,147,255,130,255,113,255,109,255,105,255,109,255,85,255,89,255,103,255,115,255,100,255,70,255,63,255,46,255,58,255,53,255,56,255,54,255,56,255,71,255,81,255,75,255,66,255,56,255,53,255,16,255,30,255,37,255,58,255,70,255,52,255,21,255,8,255,5,255,6,255,0,255,6,255,13,255,21,255,27,255,32,255,48,255,63,255,60,255,45,255,66,255,72,255,71,255,74,255,92,255,116,255,119,255,100,255,79,255,74,255,80,255,79,255,79,255,83,255,99,255,114,255,105,255,91,255,101,255,110,255,117,255,97,255,97,255,87,255,100,255,104,255,98,255,87,255,93,255,84,255,75,255,66,255,71,255,93,255,104,255,130,255,145,255,146,255,130,255,125,255,140,255,139,255,116,255,124,255,113,255,94,255,52,255,50,255,48,255,56,255,41,255,32,255,20,255,24,255,22,255,17,255,45,255,61,255,35,255,6,255,19,255,49,255,67,255,78,255,87,255,112,255,109,255,111,255,110,255,109,255,107,255,95,255,71,255,60,255,54,255,49,255,57,255,35,255,37,255,41,255,40,255,29,255,8,255,14,255,41,255,74,255,89,255,96,255,113,255,122,255,124,255,111,255,113,255,110,255,80,255,72,255,43,255,43,255,43,255,60,255,77,255,91,255,89,255,101,255,92,255,115,255,141,255,141,255,134,255,138,255,137,255,121,255,129,255,124,255,116,255,121,255,122,255,125,255,118,255,122,255,101,255,86,255,88,255,92,255,87,255,93,255,92,255,93,255,95,255,95,255,89,255,61,255,60,255,67,255,74,255,77,255,85,255,85,255,55,255,36,255,48,255,75,255,98,255,111,255,115,255,99,255,73,255,79,255,99,255,95,255,68,255,78,255,98,255,118,255,123,255,119,255,119,255,133,255,148,255,163,255,165,255,153,255,149,255,136,255,141,255,120,255,115,255,99,255,105,255,124,255,121,255,91,255,70,255,85,255,88,255,117,255,114,255,115,255,100,255,91,255,112,255,124,255,110,255,130,255,126,255,134,255,121,255,95,255,94,255,110,255,102,255,88,255,79,255,96,255,100,255,105,255,114,255,98,255,89,255,103,255,138,255,150,255,156,255,149,255,142,255,132,255,150,255,158,255,172,255,168,255,136,255,144,255,140,255,125,255,111,255,118,255,123,255,124,255,135,255,147,255,165,255,185,255,185,255,175,255,158,255,152,255,155,255,153,255,157,255,176,255,189,255,153,255,139,255,138,255,133,255,118,255,95,255,88,255,99,255,104,255,99,255,93,255,107,255,125,255,135,255,112,255,103,255,114,255,126,255,146,255,140,255,170,255,196,255,199,255,197,255,207,255,213,255,222,255,240,255,249,255,12,0,15,0,11,0,255,255,247,255,2,0,12,0,21,0,18,0,12,0,252,255,251,255,1,0,250,255,231,255,209,255,221,255,10,0,14,0,11,0,236,255,229,255,224,255,222,255,211,255,202,255,182,255,159,255,154,255,162,255,152,255,131,255,118,255,134,255,145,255,164,255,155,255,139,255,121,255,119,255,122,255,120,255,138,255,169,255,198,255,215,255,224,255,225,255,227,255,207,255,243,255,250,255,227,255,205,255,197,255,234,255,17,0,27,0,247,255,240,255,239,255,3,0,233,255,213,255,206,255,204,255,216,255,210,255,213,255,243,255,13,0,0,0,243,255,241,255,230,255,207,255,228,255,249,255,0,0,244,255,224,255,211,255,206,255,217,255,234,255,5,0,4,0,6,0,251,255,238,255,241,255,3,0,234,255,225,255,219,255,241,255,253,255,3,0,4,0,249,255,245,255,1,0,15,0,36,0,58,0,64,0,89,0,96,0,91,0,97,0,83,0,80,0,74,0,66,0,55,0,61,0,53,0,58,0,49,0,43,0,41,0,33,0,33,0,32,0,19,0,3,0,2,0,3,0,237,255,228,255,246,255,246,255,222,255,222,255,225,255,243,255,239,255,232,255,230,255,247,255,6,0,1,0,21,0,22,0,34,0,47,0,47,0,64,0,63,0,40,0,17,0,5,0,3,0,243,255,218,255,208,255,210,255,234,255,9,0,19,0,23,0,37,0,59,0,88,0,90,0,103,0,83,0,66,0,37,0,39,0,28,0,25,0,3,0,235,255,225,255,221,255,205,255,183,255,159,255,154,255,137,255,139,255,166,255,211,255,218,255,208,255,194,255,200,255,199,255,215,255,240,255,1,0,248,255,229,255,237,255,244,255,246,255,225,255,233,255,249,255,5,0,7,0,10,0,22,0,31,0,33,0,21,0,14,0,23,0,35,0,48,0,38,0,34,0,22,0,4,0,253,255,239,255,236,255,244,255,0,0,247,255,254,255,240,255,247,255,246,255,2,0,21,0,5,0,16,0,1,0,5,0,250,255,20,0,21,0,12,0,2,0,252,255,224,255,201,255,206,255,217,255,235,255,235,255,236,255,212,255,202,255,203,255,220,255,227,255,222,255,211,255,203,255,202,255,192,255,162,255,170,255,168,255,178,255,191,255,206,255,197,255,192,255,163,255,134,255,125,255,118,255,131,255,128,255,147,255,145,255,163,255,141,255,147,255,147,255,131,255,138,255,152,255,169,255,167,255,161,255,169,255,197,255,214,255,217,255,204,255,199,255,209,255,209,255,221,255,215,255,204,255,186,255,171,255,181,255,192,255,227,255,242,255,255,255,255,255,0,0,10,0,1,0,1,0,233,255,216,255,219,255,216,255,192,255,192,255,187,255,192,255,180,255,173,255,158,255,153,255,134,255,110,255,103,255,99,255,113,255,117,255,122,255,118,255,118,255,104,255,100,255,100,255,104,255,111,255,107,255,98,255,81,255,73,255,59,255,68,255,61,255,78,255,77,255,75,255,99,255,101,255,97,255,86,255,67,255,46,255,27,255,4,255,0,255,13,255,60,255,98,255,128,255,131,255,131,255,123,255,95,255,68,255,47,255,85,255,99,255,122,255,117,255,105,255,84,255,97,255,94,255,98,255,97,255,84,255,94,255,110,255,116,255,101,255,76,255,67,255,67,255,83,255,88,255,121,255,129,255,119,255,138,255,138,255,147,255,129,255,130,255,122,255,142,255,159,255,182,255,176,255,152,255,137,255,124,255,126,255,144,255,140,255,121,255,117,255,133,255,110,255,109,255,109,255,131,255,124,255,137,255,125,255,129,255,133,255,125,255,130,255,126,255,117,255,123,255,128,255,124,255,110,255,94,255,104,255,90,255,80,255,83,255,93,255,115,255,107,255,110,255,104,255,92,255,90,255,74,255,86,255,104,255,88,255,111,255,129,255,162,255,183,255,164,255,170,255,171,255,187,255,172,255,164,255,151,255,128,255,106,255,81,255,74,255,79,255,80,255,110,255,132,255,141,255,114,255,82,255,62,255,40,255,16,255,245,254,244,254,13,255,8,255,248,254,232,254,246,254,250,254,7,255,15,255,12,255,13,255,7,255,252,254,223,254,216,254,208,254,210,254,235,254,4,255,37,255,81,255,93,255,70,255,49,255,37,255,33,255,13,255,241,254,243,254,234,254,252,254,17,255,38,255,47,255,40,255,29,255,24,255,43,255,24,255,21,255,41,255,56,255,52,255,42,255,37,255,41,255,49,255,49,255,43,255,62,255,79,255,78,255,47,255,5,255,234,254,205,254,204,254,192,254,165,254,165,254,155,254,172,254,171,254,211,254,252,254,29,255,47,255,57,255,75,255,80,255,73,255,42,255,17,255,41,255,58,255,70,255,59,255,62,255,62,255,70,255,73,255,87,255,99,255,118,255,134,255,132,255,120,255,105,255,92,255,70,255,48,255,37,255,68,255,107,255,144,255,153,255,179,255,197,255,205,255,167,255,127,255,86,255,78,255,93,255,97,255,99,255,96,255,77,255,77,255,61,255,50,255,41,255,37,255,47,255,36,255,15,255,11,255,12,255,247,254,245,254,252,254,252,254,11,255,33,255,38,255,37,255,44,255,47,255,52,255,50,255,23,255,46,255,62,255,82,255,76,255,84,255,78,255,67,255,53,255,53,255,57,255,80,255,73,255,72,255,66,255,58,255,55,255,50,255,57,255,44,255,61,255,76,255,75,255,98,255,101,255,109,255,122,255,134,255,148,255,154,255,156,255,151,255,129,255,89,255,47,255,34,255,23,255,44,255,69,255,83,255,102,255,119,255,112,255,96,255,75,255,56,255,46,255,42,255,55,255,43,255,33,255,30,255,32,255,43,255,60,255,84,255,97,255,127,255,129,255,126,255,97,255,86,255,55,255,12,255,15,255,26,255,82,255,137,255,176,255,193,255,186,255,193,255,173,255,121,255,70,255,68,255,93,255,157,255,190,255,213,255,235,255,212,255,187,255,131,255,112,255,99,255,105,255,124,255,136,255,132,255,106,255,96,255,63,255,54,255,33,255,18,255,42,255,43,255,66,255,74,255,78,255,85,255,102,255,110,255,129,255,124,255,144,255,197,255,19,0,64,0,67,0,64,0,79,0,83,0,31,0,225,255,185,255,146,255,138,255,140,255,155,255,159,255,173,255,188,255,193,255,205,255,199,255,210,255,207,255,206,255,190,255,153,255,166,255,176,255,167,255,140,255,114,255,93,255,55,255,30,255,24,255,35,255,46,255,52,255,39,255,20,255,232,254,222,254,246,254,249,254,2,255,24,255,41,255,60,255,80,255,109,255,138,255,156,255,152,255,137,255,164,255,162,255,146,255,142,255,169,255,176,255,156,255,112,255,70,255,24,255,17,255,34,255,49,255,50,255,56,255,71,255,59,255,39,255,48,255,50,255,60,255,75,255,92,255,118,255,128,255,117,255,62,255,9,255,217,254,177,254,158,254,162,254,197,254,210,254,211,254,214,254,247,254,12,255,3,255,251,254,0,255,2,255,14,255,8,255,25,255,45,255,51,255,64,255,88,255,121,255,190,255,216,255,235,255,222,255,210,255,212,255,198,255,214,255,225,255,240,255,248,255,244,255,227,255,220,255,231,255,249,255,253,255,239,255,219,255,216,255,223,255,216,255,223,255,213,255,189,255,194,255,197,255,217,255,221,255,201,255,164,255,122,255,86,255,31,255,34,255,57,255,93,255,119,255,127,255,150,255,175,255,174,255,173,255,162,255,168,255,163,255,176,255,190,255,210,255,235,255,243,255,254,255,241,255,253,255,17,0,23,0,61,0,80,0,92,0,81,0,59,0,59,0,30,0,16,0,21,0,30,0,33,0,61,0,92,0,111,0,117,0,107,0,99,0,88,0,68,0,61,0,47,0,50,0,37,0,13,0,232,255,218,255,184,255,169,255,148,255,143,255,148,255,167,255,203,255,226,255,245,255,228,255,218,255,182,255,146,255,114,255,112,255,117,255,142,255,195,255,212,255,217,255,208,255,179,255,160,255,158,255,174,255,210,255,231,255,242,255,241,255,236,255,235,255,216,255,236,255,13,0,46,0,34,0,31,0,25,0,7,0,237,255,188,255,154,255,146,255,138,255,145,255,152,255,166,255,180,255,182,255,200,255,188,255,205,255,209,255,216,255,202,255,194,255,177,255,176,255,181,255,177,255,135,255,108,255,101,255,90,255,77,255,45,255,20,255,0,255,238,254,230,254,239,254,249,254,23,255,66,255,118,255,147,255,163,255,152,255,144,255,145,255,141,255,147,255,164,255,173,255,169,255,169,255,157,255,118,255,89,255,53,255,51,255,62,255,94,255,125,255,172,255,187,255,196,255,201,255,199,255,185,255,153,255,145,255,132,255,165,255,189,255,231,255,30,0,91,0,95,0,57,0,5,0,234,255,208,255,211,255,197,255,187,255,175,255,166,255,155,255,138,255,113,255,101,255,74,255,38,255,1,255,249,254,243,254,9,255,33,255,35,255,33,255,51,255,75,255,106,255,138,255,167,255,210,255,236,255,12,0,17,0,18,0,12,0,255,255,241,255,254,255,16,0,60,0,98,0,109,0,131,0,111,0,70,0,38,0,21,0,246,255,216,255,205,255,209,255,214,255,226,255,5,0,53,0,77,0,60,0,20,0,239,255,208,255,194,255,191,255,198,255,215,255,206,255,193,255,155,255,121,255,60,255,18,255,248,254,205,254,203,254,233,254,5,255,253,254,224,254,209,254,233,254,3,255,0,255,12,255,64,255,136,255,191,255,230,255,253,255,6,0,248,255,246,255,248,255,26,0,68,0,141,0,199,0,214,0,205,0,194,0,196,0,185,0,178,0,209,0,231,0,2,1,240,0,210,0,149,0,86,0,39,0,11,0,242,255,224,255,205,255,173,255,145,255,73,255,0,255,230,254,232,254,237,254,222,254,221,254,206,254,190,254,130,254,70,254,45,254,73,254,124,254,169,254,235,254,4,255,7,255,240,254,217,254,177,254,190,254,18,255,107,255,172,255,197,255,228,255,2,0,246,255,236,255,238,255,10,0,62,0,114,0,184,0,242,0,30,1,26,1,251,0,187,0,127,0,111,0,168,0,240,0,12,1,6,1,223,0,161,0,92,0,28,0,251,255,247,255,34,0,67,0,83,0,104,0,89,0,39,0,234,255,203,255,225,255,241,255,21,0,36,0,45,0,40,0,20,0,4,0,4,0,8,0,78,0,140,0,194,0,216,0,224,0,227,0,204,0,192,0,206,0,249,0,37,1,66,1,97,1,109,1,80,1,31,1,3,1,224,0,225,0,24,1,116,1,164,1,196,1,143,1,75,1,233,0,156,0,123,0,126,0,187,0,237,0,240,0,212,0,165,0,95,0,6,0,192,255,198,255,222,255,4,0,9,0,19,0,6,0,2,0,236,255,226,255,240,255,33,0,60,0,104,0,145,0,176,0,143,0,136,0,129,0,119,0,113,0,116,0,167,0,238,0,57,1,141,1,187,1,182,1,139,1,124,1,95,1,72,1,49,1,68,1,103,1,125,1,115,1,110,1,155,1,180,1,155,1,105,1,73,1,71,1,50,1,44,1,41,1,54,1,53,1,31,1,214,0,106,0,254,255,181,255,169,255,199,255,10,0,82,0,149,0,162,0,83,0,236,255,156,255,90,255,61,255,71,255,111,255,127,255,123,255,135,255,124,255,120,255,107,255,120,255,157,255,196,255,209,255,1,0,53,0,80,0,120,0,149,0,174,0,191,0,243,0,63,1,138,1,225,1,17,2,41,2,35,2,7,2,193,1,118,1,64,1,27,1,15,1,249,0,15,1,50,1,95,1,149,1,193,1,203,1,191,1,139,1,82,1,29,1,27,1,24,1,56,1,133,1,195,1,235,1,236,1,209,1,207,1,196,1,190,1,162,1,101,1,48,1,13,1,227,0,199,0,178,0,220,0,25,1,73,1,53,1,14,1,253,0,0,1,15,1,11,1,14,1,33,1,52,1,41,1,16,1,4,1,29,1,81,1,155,1,204,1,221,1,224,1,174,1,88,1,245,0,188,0,195,0,232,0,16,1,252,0,210,0,129,0,19,0,175,255,116,255,83,255,108,255,193,255,59,0,133,0,152,0,127,0,72,0,231,255,152,255,148,255,215,255,38,0,93,0,130,0,161,0,184,0,224,0,7,1,68,1,145,1,192,1,177,1,119,1,243,0,105,0,40,0,18,0,14,0,76,0,200,0,109,1,227,1,1,2,219,1,160,1,64,1,229,0,176,0,194,0,207,0,10,1,64,1,53,1,245,0,208,0,241,0,58,1,126,1,177,1,198,1,168,1,56,1,155,0,80,0,98,0,192,0,26,1,97,1,117,1,91,1,15,1,162,0,28,0,212,255,190,255,254,255,102,0,172,0,13,1,149,1,38,2,118,2,140,2,153,2,207,2,0,3,58,3,95,3,162,3,180,3,140,3,253,2,65,2,126,1,53,1,110,1,201,1,55,2,160,2,217,2,139,2,5,2,145,1,59,1,23,1,16,1,38,1,96,1,111,1,58,1,200,0,58,0,194,255,153,255,169,255,0,0,117,0,26,1,201,1,21,2,230,1,119,1,1,1,136,0,28,0,245,255,70,0,224,0,173,1,77,2,135,2,76,2,250,1,222,1,248,1,83,2,212,2,98,3,151,3,74,3,121,2,136,1,196,0,71,0,38,0,72,0,186,0,77,1,169,1,198,1,172,1,61,1,171,0,43,0,251,255,2,0,78,0,203,0,49,1,84,1,66,1,248,0,109,0,246,255,189,255,176,255,222,255,5,0,32,0,114,0,242,0,112,1,166,1,200,1,234,1,10,2,254,1,208,1,121,1,51,1,49,1,76,1,83,1,50,1,49,1,167,1,37,2,118,2,172,2,213,2,19,3,53,3,12,3,154,2,249,1,118,1,25,1,204,0,148,0,170,0,38,1,194,1,255,1,206,1,170,1,178,1,250,1,20,2,40,2,124,2,204,2,172,2,4,2,241,0,210,255,17,255,4,255,57,255,204,255,141,0,120,1,9,2,15,2,196,1,127,1,160,1,195,1,196,1,228,1,78,2,129,2,150,2,58,2,190,1,67,1,249,0,245,0,56,1,223,1,230,2,251,3,127,4,47,4,118,3,158,2,187,1,21,1,9,1,155,1,104,2,234,2,193,2,21,2,24,1,28,0,52,255,217,254,26,255,197,255,123,0,204,0,135,0,235,255,85,255,202,254,93,254,68,254,204,254,210,255,197,0,97,1,142,1,142,1,138,1,159,1,128,1,110,1,167,1,64,2,160,2,184,2,118,2,8,2,128,1,49,1,58,1,180,1,175,2,211,3,194,4,16,5,126,4,123,3,159,2,36,2,15,2,88,2,235,2,67,3,244,2,230,1,177,0,144,255,160,254,50,254,112,254,222,254,246,254,16,255,38,255,13,255,254,254,94,255,28,0,7,1,216,1,3,2,144,1,146,0,64,255,51,254,2,254,122,254,81,255,96,0,111,1,9,2,219,1,144,1,134,1,173,1,220,1,92,2,254,2,76,3,238,2,91,2,188,1,21,1,168,0,29,1,114,2,244,3,222,4,31,5,207,4,179,3,9,2,188,0,55,0,130,0,98,1,129,2,105,3,129,3,118,2,254,0,181,255,193,254,66,254,224,254,142,0,60,2,210,2,147,2,225,1,201,0,165,255,14,255,67,255,216,255,79,0,116,0,107,0,26,0,179,255,185,255,73,0,26,1,238,1,243,2,196,3,24,4,212,3,158,3,202,3,234,3,240,3,69,4,40,5,151,5,30,5,68,4,134,3,220,2,54,2,219,1,48,2,5,3,184,3,238,3,147,3,173,2,169,1,34,1,52,1,28,1,15,1,110,1,247,1,176,1,131,0,119,255,56,255,131,255,51,0,102,1,54,3,141,4,174,4,190,3,61,2,51,0,65,254,14,253,234,252,170,253,217,254,113,0,6,2,251,2,29,3,235,2,153,2,230,1,67,1,124,1,112,2,67,3,203,3,124,4,211,4,122,4,181,3,20,3,218,2,142,2,68,2,142,2,119,3,69,4,47,4,180,3,58,3,89,2,57,1,139,0,122,0,181,0,27,1,73,1,227,0,25,0,71,255,188,254,130,254,75,254,34,254,169,254,180,255,137,0,239,0,170,1,157,2,248,2,98,2,73,1,69,0,167,255,141,255,252,255,157,0,38,1,95,1,33,1,244,255,66,254,12,253,48,253,145,254,89,0,34,2,242,3,31,5,205,4,48,3,68,1,12,0,180,255,103,0,200,1,125,3,14,5,64,6,229,6,143,6,98,5,189,3,169,2,4,2,111,1,68,1,187,1,40,2,176,1,131,0,102,255,195,254,174,254,94,255,218,0,120,2,76,3,30,3,86,2,107,1,124,0,235,255,81,0,80,1,102,2,30,3,109,3,47,3,139,2,43,2,82,2,129,2,129,2,166,2,252,2,216,2,13,2,128,1,147,1,14,2,138,2,13,3,130,3,122,3,180,2,110,1,32,0,7,255,160,254,228,254,18,0,183,1,67,3,146,4,139,5,173,5,25,5,124,4,252,3,147,3,102,3,209,3,75,4,90,4,193,3,19,3,181,2,58,2,140,1,94,1,211,1,71,2,54,2,181,1,23,1,98,0,137,255,158,254,205,253,85,253,102,253,217,253,114,254,242,254,212,255,97,1,45,3,50,4,172,4,223,4,168,4,132,3,199,1,171,0,128,0,238,0,168,1,100,2,10,3,2,3,111,2,109,1,141,0,15,0,45,0,21,1,37,2,168,2,138,2,63,2,222,1,83,1,57,1,12,2,75,3,50,4,202,4,89,5,176,5,88,5,97,4,122,3,27,3,191,2,1,2,163,1,182,1,175,1,105,1,18,1,211,0,182,0,238,0,35,1,71,1,59,1,59,1,117,1,163,1,84,1,7,1,81,1,175,1,147,1,32,1,249,0,43,1,96,1,99,1,82,1,18,1,199,0,60,0,106,255,195,254,80,254,185,254,14,0,166,1,180,2,60,3,87,3,182,2,236,0,30,255,126,254,13,255,188,255,78,0,234,0,129,1,185,1,180,1,236,1,205,2,69,4,225,5,21,7,63,7,140,6,73,5,47,4,21,3,187,1,232,0,87,1,126,2,66,3,88,3,51,3,229,2,245,1,62,0,42,254,168,252,26,252,71,252,192,252,142,253,211,254,128,0,10,2,205,2,183,2,167,2,10,3,105,3,16,3,81,2,28,2,67,2,59,2,28,2,56,2,205,2,155,3,28,4,18,4,137,3,251,2,244,2,75,3,128,3,86,3,100,3,236,3,64,4,234,3,115,3,149,3,29,4,88,4,81,4,101,4,239,4,123,5,167,5,67,5,86,4,77,3,105,2,184,1,68,1,35,1,214,1,52,3,92,4,161,4,246,3,12,3,52,2,69,1,139,0,113,0,13,1,204,1,207,1,199,0,62,255,9,254,176,253,247,253,222,254,33,0,172,1,70,3,219,3,24,3,253,1,15,1,68,0,170,255,120,255,78,0,242,1,30,4,200,5,139,6,133,6,142,5,247,3,137,2,135,1,61,1,242,1,62,3,55,4,193,4,194,4,110,4,232,3,242,2,128,2,245,2,22,4,6,5,82,5,66,5,232,4,197,3,49,2,213,0,56,0,59,0,122,0,220,0,244,0,71,0,22,255,250,253,202,252,155,251,11,251,124,251,156,252,72,253,252,252,43,252,10,251,174,249,52,248,65,247,92,247,100,248,16,250,209,251,31,253,188,253,20,254,165,254,209,254,64,254,220,253,147,254,10,0,231,0,216,0,254,0,151,1,222,1,121,1,33,1,121,1,46,2,143,2,133,2,135,1,201,255,244,254,74,255,194,255,34,0,25,1,82,3,105,5,197,5,5,5,99,4,93,4,116,3,123,1,81,0,135,0,63,1,44,2,240,3,14,6,93,7,128,7,13,7,130,5,184,2,62,0,140,255,160,0,163,2,145,5,47,9,252,11,220,12,187,11,14,10,183,8,201,7,158,7,221,8,81,11,131,13,158,14,63,15,209,14,48,13,209,11,166,11,57,12,32,13,179,14,194,16,172,17,17,16,197,12,72,9,114,6,34,4,218,2,75,3,123,4,219,4,129,3,102,0,1,252,122,247,37,244,147,242,145,242,89,243,52,245,136,247,147,248,19,247,103,244,26,242,236,239,88,237,79,235,53,235,181,236,161,238,81,240,240,241,142,243,150,244,188,244,139,244,101,244,161,244,151,245,47,247,6,249,19,251,233,253,58,1,93,4,192,6,252,8,192,11,151,14,153,16,171,17,133,18,59,19,85,19,176,18,1,18,206,17,111,18,40,19,42,19,113,18,108,17,130,16,43,15,246,12,19,10,187,7,28,6,129,4,73,2,47,0,21,255,69,254,158,252,183,249,184,246,75,244,143,242,130,241,66,241,167,241,153,242,195,243,159,244,190,244,94,244,80,244,27,245,169,246,72,248,231,249,239,251,58,254,40,0,37,1,116,1,70,2,70,3,45,4,29,5,35,6,114,7,16,9,192,10,42,12,48,13,202,13,44,14,131,14,208,14,129,14,44,13,252,10,1,8,176,4,59,2,205,1,252,2,98,4,49,5,35,5,144,3,133,255,254,249,253,245,13,245,248,245,208,246,34,247,243,246,54,246,132,245,84,244,171,242,183,242,235,245,141,250,15,254,109,255,96,0,196,2,215,4,241,3,235,1,38,3,19,8,151,13,198,17,102,21,24,25,243,27,27,28,99,25,232,21,96,20,58,22,14,26,90,29,10,31,247,31,241,31,137,28,177,21,0,15,140,12,253,13,243,15,57,16,43,15,129,12,33,7,104,255,141,247,114,241,145,237,153,235,74,234,211,231,212,227,183,223,27,220,140,216,236,212,70,210,95,209,226,209,114,210,92,210,174,210,225,211,127,213,143,215,174,218,1,223,254,227,230,233,114,240,67,246,6,251,228,255,19,5,68,9,212,11,188,13,142,16,220,19,235,22,116,26,135,31,155,37,231,42,128,46,126,48,251,48,178,47,249,44,216,41,22,39,2,37,26,36,55,36,223,35,10,34,171,31,17,29,51,25,189,19,13,14,107,9,137,5,170,1,218,253,241,250,222,248,126,246,87,243,229,239,178,236,45,234,155,232,47,232,96,232,67,232,214,231,189,231,220,231,20,232,205,233,27,238,193,243,198,248,182,252,130,255,236,0,20,1,131,0,238,255,43,0,122,1,201,3,123,6,220,8,206,10,89,12,65,13,12,13,151,11,117,10,142,10,225,10,103,10,41,9,83,7,212,4,19,1,173,252,64,249,225,247,105,248,62,250,40,252,227,252,253,251,223,249,152,246,61,242,207,237,57,235,232,234,32,236,193,237,69,239,63,241,147,243,228,244,234,244,175,244,14,245,27,246,177,248,163,252,217,0,187,4,157,8,249,11,7,14,215,14,120,15,64,17,99,20,147,23,154,25,204,26,108,27,47,27,27,26,145,24,65,23,232,22,150,23,198,23,49,22,68,18,185,12,224,6,142,1,107,253,193,250,157,250,215,251,138,252,30,252,221,250,64,249,248,247,115,247,44,247,113,246,228,244,109,242,49,239,222,235,84,233,204,231,229,231,61,233,96,234,118,234,77,233,235,230,92,228,58,227,247,227,62,230,221,233,14,239,14,245,87,250,190,253,92,255,189,0,174,2,106,4,175,5,155,7,0,11,66,15,133,19,10,23,11,26,57,29,61,32,179,34,131,36,11,38,144,39,32,41,57,42,201,41,14,40,29,38,81,36,95,34,114,32,193,30,127,29,107,28,164,26,204,23,98,20,179,16,138,12,164,8,251,5,116,4,67,3,89,2,202,1,241,0,39,255,75,252,57,248,91,243,16,238,242,232,68,228,84,224,208,221,251,220,129,221,105,222,124,222,129,221,36,220,98,218,9,216,235,213,96,213,65,215,94,219,246,224,244,230,238,235,81,239,201,241,119,243,112,244,107,245,223,247,137,252,131,1,189,4,224,5,243,5,6,6,101,6,52,7,111,9,212,13,202,19,155,25,101,29,154,30,80,29,198,26,241,23,231,20,147,18,191,18,81,21,242,23,62,24,146,21,98,16,15,9,14,0,7,247,82,240,188,236,120,235,236,234,19,234,44,232,78,229,214,225,189,222,155,220,111,220,255,221,25,224,157,225,141,226,73,228,173,231,138,236,182,242,230,250,172,4,178,13,3,20,11,24,29,27,243,29,117,32,152,34,158,36,199,38,18,41,76,42,201,40,227,36,117,32,3,29,132,26,104,24,243,22,38,23,100,24,204,23,110,19,51,13,209,7,96,4,97,2,44,1,150,0,224,255,222,253,249,248,52,241,234,232,251,226,200,224,100,225,19,227,207,228,80,230,67,230,57,227,53,222,23,218,109,217,167,220,226,226,72,234,53,241,83,246,170,248,151,248,217,247,155,248,45,253,232,5,221,16,72,27,224,35,68,42,181,45,152,46,208,46,161,48,10,53,157,59,141,66,197,71,5,74,25,73,45,69,90,63,51,57,80,52,151,49,34,48,126,45,210,39,103,31,23,21,88,9,90,252,198,239,112,229,156,221,154,214,248,206,24,199,190,191,58,185,137,179,10,175,144,172,221,172,68,175,98,177,204,177,241,176,135,176,81,177,227,178,172,181,73,187,134,196,194,207,76,218,108,227,180,236,20,247,121,1,179,10,41,19,100,28,217,38,241,48,30,56,74,60,141,63,199,66,187,68,133,68,6,67,55,66,210,65,12,63,16,56,71,46,146,36,80,27,211,17,131,8,246,0,241,251,23,248,175,242,98,234,72,224,182,214,239,206,54,201,227,197,9,198,214,201,24,207,123,210,80,211,135,211,79,213,198,216,194,220,98,225,131,231,4,239,109,246,157,252,255,1,177,7,45,14,152,20,212,25,92,30,136,35,20,42,237,48,161,54,100,58,196,60,188,61,149,60,223,57,160,54,242,51,83,50,207,48,28,46,11,42,116,37,26,33,26,29,79,25,255,21,159,19,64,18,150,16,244,12,166,7,237,1,1,252,154,245,4,239,167,232,161,226,187,220,244,214,93,209,121,204,218,200,0,199,168,198,251,198,137,199,171,200,168,202,37,205,69,208,147,212,25,219,8,228,75,238,129,248,116,2,53,12,240,20,97,28,147,35,192,43,107,53,127,63,253,71,182,77,11,81,210,82,13,83,22,82,82,81,169,81,39,82,130,80,238,74,161,65,122,54,236,42,29,31,78,19,210,7,11,253,249,241,232,228,34,213,226,195,236,179,139,167,59,158,179,150,225,144,147,141,189,140,237,140,214,141,99,145,209,153,242,166,245,181,229,195,235,207,207,218,127,229,116,239,144,247,177,254,27,7,229,16,132,25,69,30,181,31,230,32,241,34,255,35,161,34,221,32,42,33,55,35,151,36,107,35,177,32,124,30,49,29,255,26,118,23,125,20,31,20,181,21,160,22,160,21,82,19,138,16,19,12,212,4,54,252,65,245,118,241,2,240,111,239,7,239,20,238,169,235,111,231,119,226,214,222,114,222,190,225,114,231,75,237,252,241,25,245,132,246,216,246,15,247,214,248,44,253,51,3,20,9,230,13,23,18,38,22,125,26,170,30,203,34,107,39,40,44,12,48,115,50,124,51,137,51,28,51,25,50,60,47,50,42,87,36,159,31,204,28,62,27,7,26,166,24,74,23,36,21,0,17,15,11,186,5,167,2,33,1,48,255,95,251,65,246,174,240,231,233,178,225,21,217,254,209,150,205,150,203,240,202,23,203,134,204,53,207,241,209,130,211,178,212,82,215,170,220,21,228,23,236,212,244,224,254,93,9,101,18,90,25,58,31,105,37,187,43,149,49,208,54,45,60,157,65,204,69,113,71,140,70,64,68,62,65,79,61,162,55,173,48,112,41,54,34,95,25,49,14,210,1,37,246,180,234,36,222,59,209,42,198,233,189,82,183,211,176,233,170,54,167,120,166,123,168,184,172,249,178,160,187,81,198,134,209,4,219,196,226,210,234,158,244,198,253,94,3,94,5,197,5,143,4,240,254,110,245,33,236,2,230,91,227,33,227,106,229,217,234,91,242,90,249,146,254,142,2,159,6,205,11,188,18,220,26,154,34,203,41,124,48,79,53,68,54,75,51,114,46,89,41,215,35,170,29,38,24,63,20,52,17,243,13,154,9,109,4,179,255,201,252,223,251,18,252,49,252,110,251,191,249,214,246,195,241,101,235,17,231,100,230,79,232,186,235,83,240,217,245,171,251,195,0,178,4,24,8,91,12,172,18,166,26,91,34,5,40,99,43,147,45,8,46,150,43,118,39,155,36,212,35,122,34,224,30,46,26,34,22,204,18,230,15,57,14,23,14,138,14,192,14,17,14,79,12,89,9,19,6,213,3,65,3,98,3,138,2,34,1,218,255,156,253,205,248,211,241,142,234,21,228,3,222,203,216,186,213,224,212,123,213,122,214,58,215,140,215,109,216,115,218,207,222,21,230,116,240,126,252,209,7,75,16,226,20,32,22,199,21,201,20,131,20,104,22,2,27,76,32,116,35,253,35,224,34,9,33,212,30,206,28,254,27,233,28,100,30,99,30,134,27,137,21,240,13,241,5,149,253,223,244,195,236,123,230,52,225,26,219,143,211,197,204,219,200,192,199,40,200,182,201,142,205,220,210,29,215,1,217,20,218,52,220,253,222,51,225,89,226,138,226,181,225,131,223,229,219,6,216,150,213,208,213,34,217,135,222,13,229,96,236,174,244,80,253,219,4,251,10,221,16,35,23,178,29,179,35,73,41,114,47,196,53,31,59,116,62,190,63,103,63,106,61,157,57,148,52,198,46,12,41,193,35,140,30,1,25,83,19,219,13,43,9,108,5,120,2,141,255,170,251,39,246,214,238,235,230,19,224,67,220,148,220,132,225,114,233,197,241,166,248,168,253,191,1,245,5,35,11,243,17,28,26,71,34,164,40,28,44,108,44,249,41,93,38,240,35,245,34,140,34,149,33,153,31,83,28,77,23,223,16,41,11,59,9,251,11,172,16,64,20,193,21,237,20,110,17,8,11,31,3,73,252,73,248,73,247,92,248,94,250,101,252,45,253,90,251,215,245,143,236,91,225,97,215,228,208,172,206,26,208,240,211,23,216,70,218,85,217,250,213,178,210,230,209,128,212,102,218,123,226,63,234,246,238,194,239,168,237,78,235,12,236,242,241,68,253,60,12,202,27,98,40,251,47,103,51,226,52,211,54,221,58,33,65,200,71,63,76,149,76,167,71,18,62,60,49,13,34,30,18,71,3,239,245,240,232,95,219,128,205,134,192,63,181,209,171,63,165,86,163,124,166,44,172,105,177,255,180,95,183,42,186,140,190,241,196,205,205,105,216,246,226,188,235,10,241,207,242,178,242,55,243,26,246,219,250,74,0,102,6,5,13,170,19,66,25,161,29,18,34,182,39,23,46,100,51,221,54,89,57,118,59,26,61,17,62,66,62,165,61,33,60,226,56,109,51,49,44,226,36,158,30,61,25,35,20,193,14,10,9,211,3,193,255,178,252,141,250,219,248,165,246,40,242,14,235,34,227,58,221,11,219,112,220,164,224,175,230,57,237,152,242,119,246,38,250,133,255,64,7,147,16,1,26,112,34,132,40,74,43,73,43,81,42,109,41,68,41,208,42,94,45,218,45,6,43,160,37,75,31,249,25,251,22,119,22,196,23,246,25,14,27,176,24,209,18,18,11,59,3,51,253,191,249,209,248,10,250,240,252,215,255,57,0,124,252,41,244,225,232,246,220,170,210,181,203,254,200,135,201,57,203,21,203,134,198,103,189,121,178,120,169,11,165,214,166,139,175,208,189,41,206,106,220,178,229,121,234,7,238,203,243,228,253,24,13,30,32,228,51,169,68,158,79,0,84,39,84,173,83,229,84,142,87,219,89,62,90,237,86,224,78,50,65,229,46,3,27,191,8,237,248,248,234,14,222,159,209,204,196,203,182,250,167,203,153,156,143,8,140,226,142,154,149,177,157,6,166,143,174,232,183,235,193,190,204,38,217,178,231,214,245,117,0,230,5,255,6,138,7,145,9,135,11,175,13,90,18,87,26,122,35,169,42,47,47,15,50,152,52,17,54,162,52,6,50,159,48,210,48,223,49,217,50,117,51,57,52,34,53,10,53,166,50,233,46,115,43,167,40,46,37,118,31,116,23,71,14,217,4,37,252,57,246,59,244,231,244,76,245,57,242,102,234,168,222,250,209,252,199,178,195,172,197,206,204,121,214,141,224,180,233,154,241,55,249,127,1,220,10,5,21,183,30,121,38,96,43,102,45,13,45,255,42,109,40,69,39,251,39,23,41,93,41,105,40,117,38,212,34,246,29,225,25,145,24,53,26,200,28,230,30,71,32,1,32,107,28,31,21,215,11,164,2,171,250,143,244,106,240,211,237,165,235,101,232,225,226,229,218,233,208,156,198,254,189,175,183,54,179,110,176,53,175,201,174,230,173,100,172,205,171,198,173,2,180,96,191,125,207,5,226,142,243,51,1,136,9,43,13,172,14,44,18,240,26,43,41,147,57,45,72,41,82,54,86,229,84,36,80,217,74,186,71,159,71,134,72,103,71,184,65,154,54,189,38,240,19,178,255,52,235,197,216,42,201,97,186,50,171,187,156,164,144,72,136,195,132,184,134,54,142,220,153,35,168,51,184,209,201,247,218,161,232,251,242,127,251,51,2,33,6,167,7,53,9,117,12,129,15,64,16,204,15,21,17,98,21,61,28,50,36,98,43,121,48,104,51,242,51,59,50,70,48,53,49,137,54,83,62,171,68,68,71,109,70,224,66,109,60,233,51,126,44,86,40,207,38,197,37,99,34,229,26,73,15,248,1,23,246,10,238,76,234,235,233,57,235,3,235,74,230,181,220,139,209,52,201,231,197,35,199,14,203,17,208,221,213,126,220,61,227,87,233,228,239,201,248,57,4,176,15,111,25,234,33,23,42,80,48,199,50,16,50,85,48,68,47,90,46,20,45,128,43,165,41,250,38,194,35,207,32,1,31,24,30,67,29,48,28,39,26,230,21,17,15,12,6,225,251,39,242,11,235,210,231,254,231,201,233,112,235,106,234,77,228,181,216,135,202,11,190,136,181,57,177,176,176,57,179,25,183,22,186,113,187,202,188,245,191,183,197,131,206,189,218,160,233,245,248,86,5,205,12,155,14,69,12,72,9,6,9,199,13,9,24,109,37,39,50,158,58,6,62,43,62,166,61,59,62,53,64,108,67,238,70,38,72,152,68,217,59,30,47,96,31,187,13,237,250,92,231,106,211,174,191,28,173,59,156,151,142,45,134,228,132,7,139,63,150,238,163,154,178,121,193,125,207,57,220,54,232,211,243,114,254,244,6,107,12,49,15,26,16,139,15,0,14,231,11,169,9,222,8,185,11,131,18,110,27,187,36,211,44,24,50,108,51,251,49,81,49,25,52,37,59,130,68,94,77,146,83,230,84,18,80,5,70,93,57,8,45,57,35,226,28,24,25,219,21,24,17,95,9,239,254,245,243,240,234,3,230,231,229,26,233,201,236,189,237,200,233,137,225,62,216,143,208,134,203,140,201,188,203,56,209,51,215,16,220,22,224,234,228,228,235,197,244,98,255,38,12,84,26,54,39,46,48,16,52,14,51,26,48,178,46,239,46,133,47,16,48,186,48,101,48,82,45,94,39,107,33,195,29,219,26,143,21,69,13,95,4,12,252,143,244,69,238,95,234,235,233,129,236,50,240,66,243,100,244,192,242,78,238,32,231,243,220,35,209,124,198,139,191,130,188,107,188,181,190,14,195,6,201,229,206,199,210,215,212,184,214,161,218,37,225,227,233,49,243,124,251,206,0,158,1,93,254,47,250,167,249,227,254,193,8,86,20,55,31,145,39,62,44,181,46,175,49,44,55,214,62,216,70,42,77,181,79,14,77,59,69,66,57,102,42,66,25,71,6,67,242,250,220,77,198,12,176,9,158,163,146,95,142,39,145,124,154,138,168,218,182,162,193,94,201,31,209,181,218,72,229,95,240,43,252,67,7,14,15,78,18,143,17,181,14,183,11,157,9,22,9,105,10,36,14,47,20,174,27,148,34,51,39,109,42,28,46,231,50,10,56,64,61,180,66,234,71,249,74,254,73,3,69,12,62,212,54,157,47,40,40,61,33,248,27,80,24,66,20,36,13,195,2,73,248,86,240,70,235,130,233,227,235,231,240,139,244,23,243,139,235,90,224,90,213,124,205,202,201,133,201,145,203,78,207,209,212,183,218,193,223,124,229,216,238,177,251,235,8,34,20,67,29,19,37,82,42,50,43,102,41,109,40,96,41,176,43,112,46,189,47,110,46,228,42,193,37,126,30,75,21,10,12,207,4,250,255,215,251,79,247,53,244,71,244,163,245,206,245,78,245,66,246,65,249,182,252,104,254,145,253,234,250,152,246,155,239,166,229,205,218,90,210,106,206,242,205,222,206,44,209,102,213,135,217,85,218,52,215,226,210,191,208,90,210,209,214,192,220,255,226,52,232,33,234,226,232,235,230,209,231,46,238,238,249,241,7,173,20,79,31,109,40,74,48,215,55,72,65,234,77,168,91,67,102,144,106,182,103,160,93,204,76,135,55,21,33,56,11,247,245,244,224,135,204,83,185,123,168,203,155,166,148,215,147,148,152,23,161,236,171,49,183,78,193,221,202,152,214,61,228,112,240,169,250,28,4,86,12,28,18,0,21,243,21,131,22,20,23,183,22,188,20,58,19,112,20,131,24,108,30,220,35,243,38,140,39,104,38,224,35,204,32,171,31,237,34,50,42,41,50,27,55,95,55,165,51,32,45,75,37,30,30,35,25,183,22,249,21,225,19,176,13,184,3,115,249,200,242,255,240,118,243,214,248,224,254,3,2,5,255,74,245,182,231,249,218,170,210,215,207,219,209,44,215,23,222,104,229,185,235,230,239,50,242,75,245,191,250,86,1,84,7,214,12,44,18,25,22,118,23,91,22,107,21,191,22,64,26,69,30,0,34,212,35,201,33,234,26,16,16,65,4,239,250,243,246,163,248,175,253,158,3,53,8,73,10,144,9,76,6,133,2,129,0,83,1,237,3,50,6,219,6,216,5,51,3,163,254,188,247,83,239,55,231,194,224,218,219,246,215,84,212,45,209,217,205,230,200,242,193,87,187,32,184,175,185,235,190,222,197,84,204,114,209,79,213,53,216,219,219,31,227,218,239,1,1,9,19,134,34,214,46,16,57,43,66,114,74,125,82,21,91,120,99,168,104,23,104,1,97,107,84,157,67,111,47,10,25,116,2,121,237,158,218,50,201,23,185,78,171,33,161,28,155,70,153,6,156,94,164,133,177,217,192,49,207,98,219,115,230,98,240,174,248,202,255,216,6,156,14,123,21,232,24,101,24,75,21,22,18,112,16,185,16,46,19,216,23,82,29,235,32,202,31,23,26,109,18,31,12,121,9,31,11,202,16,204,25,213,35,157,43,164,46,112,44,96,38,225,30,95,24,58,20,27,19,255,20,87,24,53,26,60,24,255,17,24,10,33,4,32,2,33,4,135,8,25,12,54,11,242,3,117,247,249,232,242,220,64,215,41,216,62,221,30,227,74,231,215,232,43,232,238,229,58,228,112,229,85,234,199,240,181,246,250,251,192,0,113,4,112,6,138,7,149,9,138,13,163,18,58,23,153,25,203,24,0,21,114,14,136,6,169,255,170,252,107,255,21,7,30,16,222,22,135,25,132,24,86,20,88,14,211,9,0,10,64,15,18,23,225,28,155,29,174,24,79,15,182,3,188,247,61,237,248,228,185,222,137,216,148,208,35,199,91,190,127,183,108,178,8,175,139,173,233,173,216,175,68,179,102,184,219,190,0,198,167,205,114,214,228,224,243,236,118,250,173,9,156,25,128,40,70,53,181,63,24,72,23,79,175,85,118,92,103,98,7,102,197,101,6,97,115,87,127,72,94,53,29,33,79,14,54,253,126,236,139,219,150,202,107,186,176,172,145,163,14,161,62,166,163,177,158,191,165,204,134,213,119,218,79,222,143,227,171,234,31,244,244,255,221,11,156,20,17,24,57,22,134,17,243,12,162,9,23,8,20,9,4,12,81,14,224,13,50,10,126,4,93,255,197,252,56,253,193,0,233,7,225,17,247,27,157,35,179,39,130,40,133,38,23,34,1,29,184,26,242,28,24,34,24,39,222,41,109,40,250,33,247,23,101,14,234,8,161,8,133,11,98,14,24,14,243,8,214,254,18,242,55,230,216,221]);fileData0.push.apply(fileData0,[173,217,251,216,116,217,47,217,158,215,99,213,236,210,182,208,81,208,94,211,231,217,25,226,57,234,146,241,214,247,108,252,34,255,150,1,195,5,24,12,26,19,14,25,197,28,153,29,141,27,115,24,93,22,238,22,165,26,149,32,189,38,62,42,146,41,107,37,10,32,228,27,179,26,7,29,169,33,107,37,24,37,226,31,22,23,113,12,116,1,28,247,57,237,51,226,191,212,6,197,128,181,95,169,191,162,6,161,86,161,226,160,108,159,50,158,103,158,108,161,188,168,125,181,221,197,170,213,125,225,43,234,39,243,65,254,214,10,30,24,82,38,234,52,39,66,54,76,69,83,209,88,212,94,190,100,85,104,255,103,17,100,81,94,200,86,21,76,133,61,97,44,18,26,66,6,90,240,44,218,102,199,14,187,113,181,108,180,41,181,237,182,175,185,130,188,234,190,125,193,123,198,252,207,236,220,121,233,147,242,115,249,76,0,182,5,201,7,1,7,250,5,195,6,175,7,95,6,85,3,77,1,192,1,125,2,156,1,20,0,136,0,15,4,152,8,18,12,198,15,188,21,142,29,206,36,90,41,182,43,11,46,109,48,94,49,103,49,105,50,9,53,11,55,244,53,18,48,109,38,53,28,211,19,81,14,229,11,82,12,194,13,255,12,135,6,153,249,218,232,168,216,13,204,104,196,126,193,38,194,214,196,95,199,142,199,51,197,119,194,218,193,179,196,202,202,201,210,16,220,62,230,97,240,154,248,160,254,198,4,155,12,173,21,63,30,110,37,141,43,54,48,25,50,103,49,209,47,243,47,69,50,140,53,105,56,9,58,220,57,81,55,168,50,108,45,137,40,15,36,125,31,27,26,73,19,37,11,131,1,119,246,6,234,114,220,191,205,8,190,122,174,218,160,133,150,144,144,175,142,149,143,41,146,5,150,29,155,171,161,240,169,159,180,87,193,191,206,0,219,218,228,225,236,145,244,108,253,182,8,11,23,11,40,39,58,245,74,52,88,10,97,69,102,247,104,153,106,166,108,177,111,235,114,150,116,88,114,56,106,195,91,185,71,228,47,124,23,132,1,51,239,25,224,134,211,2,200,143,188,155,177,5,168,107,161,140,159,115,162,202,168,228,176,184,184,26,192,206,200,221,211,151,223,5,234,26,243,32,250,122,253,89,253,152,251,91,251,112,254,158,2,60,5,61,6,144,6,164,6,238,5,127,5,210,6,2,10,110,14,241,18,73,23,224,28,55,36,199,44,14,53,54,59,243,62,188,64,11,65,80,64,27,63,124,62,156,61,175,58,165,52,164,43,210,33,124,25,106,19,25,15,89,11,34,6,58,253,99,239,11,222,223,203,168,188,90,179,29,176,98,176,184,177,208,178,147,178,15,177,152,175,189,175,27,179,210,186,98,198,200,211,136,225,207,238,172,251,117,7,230,16,29,24,117,31,6,41,109,52,12,63,55,71,32,77,101,80,2,80,103,76,119,72,97,71,28,73,230,74,244,73,115,68,191,58,23,46,99,32,117,19,174,8,26,1,246,251,82,246,158,237,190,225,191,212,174,200,46,189,211,177,240,166,181,157,106,150,126,144,200,140,109,141,9,147,95,156,218,166,60,176,209,183,228,189,21,195,13,200,114,205,140,212,43,222,57,234,254,247,2,7,143,23,196,41,148,59,162,74,28,86,75,94,38,100,181,104,233,108,127,113,212,118,92,124,253,127,173,127,52,122,129,111,151,96,162,78,61,58,244,36,23,17,45,255,8,238,105,220,94,202,239,184,195,169,3,158,24,150,231,146,150,148,178,153,76,160,242,166,219,172,184,179,203,189,231,202,98,216,98,228,20,239,113,248,237,254,230,1,53,3,108,6,220,11,64,16,105,17,230,15,129,13,105,11,16,10,40,10,18,13,10,19,16,26,103,31,108,34,202,36,12,41,138,48,123,57,76,65,25,72,103,77,135,79,131,77,168,72,130,67,129,62,46,56,3,47,49,35,20,22,5,9,228,252,135,242,44,233,143,223,18,213,32,201,224,187,243,174,39,165,119,160,49,160,196,161,155,163,183,165,102,168,187,171,70,177,175,186,82,200,252,216,95,234,142,249,60,5,103,14,169,22,65,31,129,40,249,50,165,63,164,77,151,89,227,96,34,100,97,101,246,100,12,98,39,93,200,87,67,82,151,74,42,63,108,48,17,32,72,15,3,255,252,239,125,227,26,218,79,211,151,205,212,199,94,194,16,190,179,186,67,184,74,182,125,180,247,177,9,174,157,169,134,166,70,166,150,168,211,172,172,178,240,184,144,189,242,191,172,193,180,196,106,202,77,211,201,223,141,239,122,1,156,19,71,36,17,51,255,63,53,75,151,85,95,95,10,104,110,111,164,117,109,122,45,125,244,125,232,124,30,122,207,116,34,108,25,96,45,81,242,63,234,44,240,24,167,4,60,240,43,220,2,201,106,183,241,167,50,155,103,145,28,139,46,136,14,136,172,138,215,144,71,154,148,165,216,177,238,190,125,205,60,221,143,236,161,249,131,4,249,13,244,20,63,24,151,24,114,24,57,25,100,25,40,23,170,19,182,17,91,18,83,20,167,22,128,25,68,29,11,33,217,35,59,38,142,42,58,50,146,60,85,71,17,80,131,84,45,84,18,79,145,69,181,56,142,42,105,29,172,17,25,6,41,249,133,234,172,219,44,206,212,194,79,186,242,180,97,178,174,176,253,173,126,169,107,164,139,161,62,163,215,169,232,179,13,192,46,205,32,218,140,229,176,238,46,246,71,253,231,4,87,13,255,22,209,34,34,49,85,64,235,77,79,88,111,95,221,99,25,102,68,102,174,100,137,97,37,92,46,83,230,69,216,53,243,36,9,20,98,3,220,243,101,230,17,219,90,209,87,201,124,195,229,191,9,190,142,189,1,191,245,193,95,197,20,200,208,201,131,202,38,202,113,200,137,197,155,194,112,192,115,190,67,188,146,186,97,186,240,187,251,190,63,195,125,201,11,211,220,223,165,238,102,254,227,14,72,31,133,46,198,59,19,71,176,81,40,92,139,101,85,108,113,112,28,114,223,113,15,112,182,108,5,104,174,98,169,92,1,85,56,75,206,63,9,51,139,36,227,19,29,1,156,237,129,218,9,200,240,182,173,168,214,157,254,149,176,144,36,142,214,142,202,146,22,153,26,161,110,171,215,183,202,196,255,209,108,223,136,236,93,249,171,5,127,16,228,24,246,30,129,34,231,34,168,33,30,32,162,30,118,29,251,27,206,25,43,23,89,20,5,18,76,17,140,19,234,23,2,29,63,34,99,39,24,44,210,47,116,50,50,52,16,53,197,51,8,47,102,39,186,29,198,18,51,7,113,251,145,239,206,227,167,216,28,206,126,196,221,188,115,184,120,183,151,184,72,186,31,188,138,190,144,193,38,197,27,202,79,209,118,218,111,227,146,234,102,240,16,246,131,252,70,4,38,14,235,25,241,37,170,48,131,57,245,64,24,72,47,79,121,85,252,89,184,91,236,89,230,83,78,74,7,63,248,51,48,41,101,29,21,16,119,2,77,245,60,232,95,219,195,208,17,202,118,198,118,195,174,192,193,191,56,193,82,196,53,200,56,205,174,211,81,218,221,222,147,224,227,224,70,225,24,225,42,223,28,219,235,213,79,208,117,202,133,197,158,196,134,201,93,211,54,223,41,235,9,247,33,3,71,15,228,26,233,38,206,51,61,64,186,73,134,79,134,82,227,83,17,84,178,82,249,79,57,77,7,75,204,72,122,69,233,64,180,59,167,53,40,46,249,36,254,26,237,16,123,6,200,250,213,237,92,224,160,211,87,200,70,191,98,185,41,182,127,180,28,180,24,181,68,183,76,186,107,190,241,196,21,206,182,216,15,226,170,233,88,241,42,249,116,255,130,3,123,7,106,14,205,23,182,31,172,35,208,37,34,40,118,40,234,35,163,27,114,19,217,13,144,9,202,4,214,0,158,0,91,3,209,5,110,6,71,6,3,8,193,12,255,18,90,24,79,28,246,30,254,30,156,26,196,17,156,6,96,252,236,243,144,235,111,226,200,217,109,211,160,207,243,205,222,205,150,207,66,211,114,216,113,221,69,225,69,228,115,231,130,235,141,239,151,242,169,245,190,250,204,1,10,9,44,15,205,20,220,26,61,33,190,38,65,43,21,48,16,54,109,59,109,61,59,59,78,54,9,48,115,40,60,31,236,21,68,15,111,11,208,6,102,255,208,246,27,239,212,231,59,224,60,217,252,212,153,211,26,211,249,209,127,209,67,211,3,215,136,219,147,224,136,229,187,233,184,236,78,238,130,238,235,237,122,237,18,237,55,236,242,234,222,233,157,233,138,233,14,233,137,232,207,232,221,233,228,235,51,240,110,248,252,3,172,16,131,28,99,38,75,45,88,48,22,48,138,46,118,45,46,45,86,45,90,45,64,44,104,41,45,37,167,32,207,28,55,26,36,25,62,25,37,25,122,23,166,19,240,13,90,7,232,0,132,251,21,247,80,243,6,240,156,237,170,235,250,232,185,229,75,227,143,226,202,226,26,227,56,228,139,231,127,236,8,241,21,244,67,246,25,248,112,249,91,250,215,250,87,251,140,252,109,254,144,255,131,255,11,0,111,2,247,5,90,8,171,7,226,4,6,1,33,251,127,242,9,234,96,229,221,228,72,230,155,232,47,236,153,241,112,248,65,255,143,5,178,11,251,16,190,19,31,18,255,11,80,3,125,251,69,246,144,243,251,242,167,244,104,247,31,249,71,248,196,245,8,244,57,245,42,249,148,254,195,3,226,7,253,10,40,13,108,14,0,15,21,16,193,18,237,21,17,23,47,21,11,18,228,15,76,15,108,15,183,15,130,16,172,17,35,18,223,15,106,10,32,3,81,252,116,246,103,240,51,234,170,229,55,228,165,228,136,228,151,227,49,227,202,227,112,228,183,228,95,229,200,231,22,236,191,240,69,244,123,246,60,248,247,249,198,251,119,253,106,255,28,2,70,5,28,8,94,9,87,9,252,8,207,8,20,8,148,6,136,5,167,5,247,6,16,9,64,11,197,12,48,13,212,11,223,7,170,1,59,251,202,246,238,245,87,248,125,252,255,0,207,4,158,6,255,4,71,0,120,251,24,249,40,249,64,250,55,251,66,252,222,253,216,255,103,1,255,2,3,6,184,10,188,14,48,16,115,15,240,14,184,15,33,17,110,18,61,20,114,23,97,27,143,30,195,31,187,31,115,31,41,31,155,29,253,25,213,21,19,19,195,17,242,15,88,12,126,7,12,3,174,254,61,248,199,239,242,231,141,226,131,222,192,217,158,212,71,209,148,208,126,208,72,207,104,206,35,208,129,212,25,217,224,219,92,221,160,223,99,226,228,227,235,227,99,228,159,230,249,233,104,236,241,236,196,237,73,241,235,246,136,252,39,1,98,5,102,9,140,12,18,14,207,14,61,17,58,23,106,31,84,39,156,45,48,50,206,52,193,52,34,50,183,46,228,44,40,45,22,46,202,45,44,43,211,37,109,30,250,21,82,13,53,5,97,254,212,248,35,243,132,235,159,225,144,215,155,207,26,202,13,198,59,195,71,194,222,194,37,195,115,194,21,194,15,196,251,200,107,207,76,214,150,222,188,232,42,243,157,251,250,1,188,7,240,13,246,19,42,24,167,26,45,29,14,32,196,33,166,33,245,32,175,33,49,36,176,38,196,39,30,40,235,40,139,41,237,40,188,38,221,35,67,33,120,30,221,25,34,19,76,12,16,7,7,3,22,255,68,251,158,247,90,243,96,236,38,226,233,214,222,205,115,200,241,198,193,200,208,204,187,209,154,213,164,215,152,216,9,218,233,220,191,225,231,231,213,237,4,243,117,248,181,254,166,5,68,13,8,22,11,32,110,42,82,51,173,57,27,62,155,65,111,68,85,70,54,71,174,71,83,72,105,72,139,70,241,65,85,59,2,52,148,44,42,36,159,26,148,17,247,9,93,2,88,249,207,239,36,231,59,223,166,214,158,204,53,194,15,185,124,177,128,170,169,164,214,161,234,162,175,166,203,171,231,177,237,185,185,195,29,205,67,211,111,214,226,216,100,219,179,220,237,220,54,222,63,226,1,232,239,237,151,244,35,254,235,10,218,24,246,37,117,49,226,58,238,65,142,70,98,73,222,75,196,79,153,85,45,92,170,96,213,96,95,92,13,84,191,71,113,56,110,41,47,29,22,19,75,9,62,254,159,241,165,227,49,213,48,199,81,187,171,178,244,172,242,168,182,165,126,162,200,159,186,159,80,163,186,169,40,178,159,188,156,200,11,212,228,220,84,227,45,233,205,239,232,246,3,254,106,5,201,13,95,23,38,33,105,41,221,47,160,53,106,59,12,64,238,65,129,65,177,64,96,64,46,63,27,60,114,56,210,53,208,51,34,49,48,45,208,40,149,36,81,32,130,27,186,21,22,15,155,8,241,2,45,253,107,246,75,239,177,233,197,229,180,225,129,220,197,214,62,209,75,203,13,196,81,188,37,182,192,178,46,178,113,180,154,185,116,193,20,203,108,213,99,223,88,232,190,240,88,249,131,2,29,12,76,22,13,33,213,43,124,53,100,61,127,67,55,72,161,75,184,77,45,79,169,80,125,81,29,81,204,79,197,77,2,75,16,71,24,66,29,60,92,53,145,45,115,36,162,25,47,13,227,255,35,242,173,227,171,212,210,198,203,187,55,179,231,171,125,165,255,159,53,155,166,150,59,146,251,142,84,142,42,145,243,150,185,158,7,168,232,178,204,191,181,206,200,221,96,234,173,244,212,253,185,5,35,11,206,14,103,19,73,26,73,34,211,41,19,49,247,57,65,69,146,81,72,92,61,99,186,101,139,99,152,92,84,81,10,68,29,56,64,47,39,40,220,31,207,20,235,7,235,249,206,234,71,219,40,206,104,197,156,192,217,189,185,187,244,185,180,185,4,188,185,192,167,198,25,205,143,211,100,216,198,217,243,215,113,213,11,213,163,215,119,220,161,226,235,233,228,241,114,249,1,0,200,5,97,11,250,16,117,22,128,27,16,32,11,37,47,43,50,50,59,56,228,59,67,61,51,61,120,59,84,55,213,49,252,44,53,41,199,37,255,33,30,30,40,26,247,21,112,17,219,12,223,8,251,5,40,4,128,2,213,255,152,251,87,246,206,240,51,235,93,229,51,224,83,220,92,217,99,214,119,211,138,209,176,208,28,208,83,207,100,206,122,205,52,205,212,206,123,211,162,219,81,231,156,245,44,4,108,16,6,25,21,30,78,32,248,32,110,33,15,35,233,38,127,44,47,50,190,54,11,58,35,60,214,60,123,60,50,59,24,57,64,54,190,50,138,46,62,41,46,35,226,28,137,22,62,15,157,6,140,253,206,244,189,235,119,225,80,214,136,203,101,193,76,184,24,177,64,173,243,172,220,174,53,177,205,178,216,179,175,180,29,182,170,184,235,188,199,195,172,205,102,217,39,229,219,240,84,254,249,13,255,28,23,41,194,50,99,58,113,62,132,61,48,56,239,48,131,41,166,33,155,24,86,15,28,8,129,3,39,1,12,0,210,254,232,252,198,250,246,247,56,244,190,240,5,240,149,243,181,249,2,255,124,1,100,1,6,255,128,250,33,245,1,241,3,239,90,239,171,240,232,240,102,239,69,237,74,236,84,237,252,239,164,243,55,248,157,252,183,254,51,253,179,249,80,247,96,247,234,249,24,254,105,3,234,8,59,13,255,14,44,14,34,12,207,10,68,11,193,12,120,14,172,16,16,20,98,23,7,25,238,24,3,25,61,26,87,27,246,26,15,26,73,25,218,23,76,20,198,14,234,8,202,3,206,255,51,253,75,252,217,252,45,254,96,255,172,255,102,254,217,251,67,249,121,247,71,246,149,245,199,245,200,246,212,247,175,247,69,246,119,244,190,242,13,241,15,239,239,236,27,235,65,234,60,235,216,237,28,242,128,248,140,0,76,8,150,13,206,15,45,16,200,15,206,14,128,13,228,12,223,13,179,15,188,16,101,16,18,15,84,13,92,11,52,9,50,7,4,6,245,5,114,6,67,6,121,4,223,1,136,255,120,253,124,251,198,249,112,249,64,250,150,250,186,248,116,245,54,242,158,239,182,237,189,236,71,237,167,239,51,243,29,246,15,247,37,246,238,244,103,244,44,244,129,243,200,242,132,243,204,244,37,244,56,241,127,238,229,237,11,239,224,238,66,235,154,229,78,224,10,219,195,212,236,206,174,204,96,207,86,213,139,219,119,225,10,234,84,246,67,3,90,13,40,20,33,25,138,28,146,28,46,25,124,21,150,20,98,22,146,24,220,25,141,26,37,27,130,27,178,26,198,24,81,23,14,23,251,22,87,21,181,17,91,13,222,9,40,8,179,7,239,7,44,8,47,7,58,3,83,252,65,244,160,237,193,234,201,235,26,239,102,242,69,244,73,244,45,242,52,238,45,234,57,232,42,233,229,235,220,238,140,241,216,244,214,248,226,252,82,0,243,3,220,8,104,14,220,18,226,20,52,21,54,21,56,21,93,20,207,18,69,18,9,20,158,22,242,23,30,24,62,25,222,27,118,29,151,28,35,26,234,23,206,21,21,19,228,15,134,13,157,12,52,12,96,10,211,6,113,2,223,253,160,248,20,242,174,234,154,227,225,221,182,217,16,215,117,214,22,216,71,219,78,222,121,223,65,222,77,219,127,215,43,212,121,210,106,211,159,215,37,223,156,232,206,241,113,249,195,255,150,5,220,10,225,15,59,21,67,27,134,33,51,39,190,43,145,47,98,51,96,55,251,58,204,61,125,63,154,63,160,61,49,57,145,50,93,42,139,33,187,24,206,15,158,6,72,253,109,243,14,232,146,218,75,204,160,191,205,181,80,174,86,169,101,167,250,167,174,169,83,171,209,173,248,178,91,187,112,197,236,206,173,215,218,223,0,230,91,233,108,234,238,234,207,236,92,240,149,244,224,248,70,254,170,5,48,14,195,22,241,30,111,38,17,45,236,49,107,52,253,52,43,53,100,54,241,56,173,59,77,61,53,61,146,59,95,56,55,51,174,44,14,38,136,32,204,27,142,22,86,16,96,10,137,5,14,1,47,252,131,246,79,240,129,233,212,225,41,217,165,208,139,202,62,200,8,201,38,203,94,205,165,207,234,209,147,211,108,212,76,214,5,219,224,226,207,235,16,244,164,251,42,3,144,10,27,17,224,22,190,28,5,35,245,40,175,44,147,45,186,44,191,43,73,43,227,42,9,43,186,44,236,47,79,51,107,53,205,53,163,52,207,49,130,45,193,39,189,32,189,24,142,16,215,8,100,1,133,249,254,240,234,232,241,225,255,218,60,211,137,203,53,197,224,191,53,186,248,179,231,174,98,172,101,172,31,174,144,177,114,183,130,191,97,200,189,208,95,216,1,224,18,232,105,240,85,248,145,0,113,10,89,22,11,35,214,46,142,57,150,67,86,76,174,82,196,86,150,89,3,92,72,93,82,92,220,88,35,83,166,75,104,66,78,55,203,42,238,29,231,16,45,3,148,244,199,229,67,216,35,205,232,196,43,191,33,187,122,183,59,179,86,174,167,169,242,165,156,164,153,166,154,171,224,177,108,183,194,187,106,192,42,199,141,206,62,213,190,220,21,230,94,239,112,246,46,251,103,255,33,4,101,8,150,10,236,11,115,15,50,22,167,30,119,39,110,48,117,57,139,65,138,70,231,71,83,71,60,71,73,72,84,73,36,73,130,71,188,68,158,63,73,55,182,44,99,34,118,25,81,17,146,8,145,254,110,243,254,231,237,220,194,211,215,205,106,203,7,203,255,202,114,202,3,201,49,199,239,197,131,198,138,201,131,206,149,212,73,219,171,226,74,234,31,241,242,245,51,249,94,252,70,0,91,4,245,8,96,15,243,23,237,32,114,40,135,46,93,52,159,57,174,60,4,61,232,59,145,58,207,56,13,54,208,50,55,48,17,46,80,43,124,39,242,34,150,29,197,22,215,13,246,2,75,247,109,236,103,227,103,220,85,215,80,212,226,210,114,209,234,206,145,203,9,200,20,196,10,191,113,185,91,181,27,180,39,181,199,183,60,188,184,194,122,202,26,211,1,221,15,233,23,247,143,5,168,18,164,29,194,38,176,46,13,54,23,61,190,67,169,73,250,77,174,79,168,78,118,75,138,70,75,64,54,57,65,50,232,43,60,38,177,32,25,27,197,21,24,16,241,8,11,1,118,250,15,245,6,239,75,231,42,223,73,216,233,210,128,205,196,199,65,195,38,192,3,189,62,184,120,178,242,173,146,172,17,174,202,176,58,181,88,189,249,201,101,216,159,228,161,237,13,246,77,254,170,4,210,8,110,13,48,20,94,27,13,32,24,33,58,32,72,32,248,33,163,36,34,40,253,44,12,51,9,57,16,61,37,62,63,61,250,59,83,58,92,55,222,50,214,45,224,40,130,34,86,25,69,14,253,2,152,248,116,239,118,231,74,224,240,217,25,213,152,210,71,210,131,211,5,214,171,217,152,221,43,224,18,225,212,225,208,227,124,230,187,232,79,234,211,235,50,238,242,241,201,246,81,252,106,2,187,8,32,14,30,17,58,18,138,19,148,22,176,26,167,30,203,34,207,39,181,44,38,47,42,46,74,43,80,40,45,37,126,33,227,29,223,26,226,23,237,19,78,14,70,7,4,0,142,249,133,243,129,237,238,231,207,227,193,225,90,225,169,225,195,226,122,228,62,229,84,227,79,223,155,219,63,217,147,215,3,214,85,213,252,213,179,215,215,217,251,220,245,225,249,232,141,241,110,250,246,2,208,10,21,18,96,24,119,29,57,33,144,36,18,40,136,43,141,45,32,45,16,42,64,37,186,31,75,26,157,21,111,18,226,16,153,16,199,16,106,16,32,15,192,13,247,12,255,11,230,9,66,7,128,5,242,4,248,3,22,1,59,252,219,245,233,237,186,228,222,219,217,212,146,208,104,206,2,205,73,203,139,201,91,200,211,199,240,199,94,201,8,205,208,210,79,217,47,224,220,232,110,244,252,0,207,11,182,20,142,28,35,34,203,35,207,33,201,30,179,28,34,27,165,24,131,21,185,18,200,16,43,15,11,14,88,14,55,16,26,19,63,21,159,21,12,20,197,17,15,16,67,15,241,14,136,14,110,13,104,11,8,8,253,3,42,0,91,253,174,251,223,250,62,250,209,248,11,246,60,243,180,241,172,241,141,242,254,243,227,245,149,247,112,248,91,248,56,248,1,249,63,251,37,254,101,0,169,1,160,2,226,3,195,4,245,4,230,4,248,4,115,4,169,2,51,0,217,254,203,255,159,2,144,6,92,11,146,16,63,20,245,20,108,19,33,17,17,14,194,9,0,5,249,0,240,253,141,251,184,249,29,249,172,249,131,250,143,250,132,249,233,247,90,246,59,245,214,244,166,245,175,247,74,250,168,252,80,254,132,255,207,0,55,2,66,3,164,3,136,3,64,2,76,255,100,251,116,248,231,247,127,249,143,252,124,0,69,4,48,6,14,5,219,0,86,251,63,246,163,242,154,240,73,240,241,241,5,245,115,248,65,251,91,253,200,255,155,3,84,8,121,12,191,15,192,18,98,21,205,22,63,23,213,23,228,24,215,25,146,25,168,23,26,20,32,15,218,8,58,2,48,252,235,246,110,242,44,239,127,237,121,236,225,234,86,232,106,229,30,227,204,225,80,225,168,225,52,227,250,229,63,233,241,235,125,238,93,242,185,248,1,0,168,5,2,9,198,10,152,10,88,7,190,1,188,251,166,246,108,242,110,238,97,235,197,234,69,237,204,241,23,247,136,252,59,1,152,4,116,6,87,7,116,8,107,11,186,16,43,23,25,29,118,33,168,35,44,35,17,32,240,27,41,25,90,24,83,24,235,23,184,22,143,20,45,17,75,13,70,10,250,8,194,8,170,7,191,4,24,0,148,250,214,244,21,240,107,237,198,236,95,237,211,237,85,237,36,236,89,235,254,234,154,234,127,234,98,235,68,237,54,239,17,241,181,243,157,247,19,252,215,255,141,2,133,4,214,5,3,6,35,5,115,4,151,4,76,5,58,6,87,7,119,8,138,9,199,10,115,12,98,14,239,15,85,16,169,15,80,14,4,13,114,12,189,13,21,17,214,21,156,26,36,30,47,31,239,29,119,27,39,24,237,19,152,14,205,8,12,3,252,252,220,245,3,238,46,231,13,226,213,221,174,217,220,213,215,210,45,208,6,205,175,201,14,200,192,201,84,206,153,212,225,219,48,228,245,236,31,245,35,252,153,2,164,9,127,17,6,25,117,31,56,37,237,42,14,48,41,51,204,51,181,50,97,48,15,45,5,41,23,37,178,33,132,30,244,26,206,22,54,18,254,12,137,7,119,2,117,253,226,247,197,241,219,235,10,231,112,227,238,224,83,223,177,222,135,222,72,222,151,221,117,220,255,219,187,221,53,225,157,228,115,231,64,234,126,236,195,236,120,234,211,230,44,228,119,227,161,227,15,228,31,230,240,234,82,241,99,248,206,255,173,7,109,15,194,21,202,25,84,28,95,31,36,36,27,42,161,47,182,51,2,54,46,54,155,51,27,47,205,42,14,40,3,38,234,34,48,30,131,24,124,18,8,12,185,5,121,0,133,252,15,249,46,245,186,240,13,236,197,231,133,228,189,226,65,226,230,226,19,228,232,228,150,228,125,227,250,225,169,224,43,224,29,225,134,227,217,230,119,234,81,238,243,241,217,244,204,246,76,248,154,250,31,254,89,2,223,6,247,11,82,17,83,21,250,22,252,22,241,22,36,24,127,26,188,29,152,33,145,37,169,40,18,42,24,42,202,41,25,42,250,42,185,43,151,43,92,42,44,40,130,36,91,31,9,25,33,18,131,10,141,1,25,247,203,235,44,224,95,212,21,201,181,191,109,185,65,182,134,181,85,182,248,183,19,186,248,187,119,189,80,191,31,195,145,201,165,210,33,222,149,235,220,249,249,7,229,20,184,31,105,40,132,47,151,53,115,58,56,62,219,64,35,66,255,65,132,64,221,61,87,58,30,54,96,49,29,44,104,38,41,32,9,26,112,20,129,15,126,10,18,5,57,255,85,249,101,243,75,237,109,231,124,226,80,222,10,218,72,213,149,208,136,204,113,201,134,199,48,199,23,201,182,205,198,211,78,217,161,221,153,225,89,229,198,231,194,232,88,233,193,234,202,236,169,238,42,240,101,242,190,246,22,253,63,4,79,11,176,17,112,23,25,28,68,31,141,33,246,35,196,39,251,44,107,50,96,54,8,56,198,55,206,53,226,49,137,44,245,38,95,34,193,30,242,26,242,21,25,16,115,10,110,5,174,0,203,251,243,246,177,242,155,238,234,233,81,228,33,223,216,219,151,218,110,218,99,218,109,218,236,218,138,219,58,219,184,217,5,216,184,215,33,217,120,219,157,222,95,227,241,233,203,240,164,246,138,251,159,0,74,6,2,12,46,17,71,22,161,27,190,32,249,36,95,40,222,43,165,47,237,51,249,55,176,58,195,59,34,59,228,56,105,53,133,49,234,45,30,43,242,40,96,38,38,34,244,27,245,19,156,10,81,0,158,245,203,234,246,223,246,212,226,201,214,190,193,180,2,173,165,168,150,167,250,168,79,172,81,177,20,183,190,188,121,194,243,200,229,208,121,218,83,229,247,240,104,253,87,10,155,22,18,33,69,41,100,47,192,51,87,54,38,55,77,55,252,55,46,57,220,57,141,57,78,56,53,54,100,51,204,47,253,43,157,40,4,38,90,35,238,31,148,27,145,22,234,16,136,10,43,3,95,251,148,243,10,236,128,228,28,221,11,214,217,207,153,202,7,198,4,194,49,191,26,190,227,190,62,193,90,197,21,203,217,209,182,216,222,222,0,228,245,231,135,234,249,235,190,236,112,237,114,238,36,240,18,243,119,247,119,253,191,4,152,12,61,20,174,26,174,31,133,35,252,38,189,42,105,47,33,53,255,58,64,63,228,64,84,63,39,59,95,53,232,46,189,40,158,35,236,30,216,25,233,19,85,13,83,6,72,255,41,249,88,244,117,240,233,236,43,233,13,229,109,224,194,219,136,215,125,212,182,210,24,210,36,210,86,210,99,210,28,210,58,209,39,208,187,207,52,209,38,213,163,219,36,228,193,237,132,247,137,0,232,7,151,13,133,18,225,23,22,30,122,36,217,42,153,48,50,53,81,56,139,58,92,60,10,62,151,63,139,64,243,63,74,61,154,56,154,50,36,44,193,37,157,31,213,25,17,20,148,13,169,5,88,252,93,242,82,232,190,222,16,214,86,206,91,199,255,192,103,187,155,182,108,178,56,175,12,174,127,175,247,178,237,183,110,190,166,198,189,207,164,216,185,224,141,232,182,240,73,249,218,1,127,10,28,19,132,27,252,34,164,40,41,44,1,46,58,47,188,48,137,50,90,52,50,54,99,56,55,58,151,58,105,57,67,55,240,52,132,50,200,47,106,44,24,40,221,34,228,28,11,22,248,13,237,4,226,251,127,243,76,235,219,226,10,218,190,209,93,202,37,196,182,190,51,186,52,183,230,181,241,181,157,182,207,183,154,186,49,192,105,200,98,209,249,217,68,226,183,233,197,238,142,240,217,239,43,239,229,239,30,242,21,246,73,252,50,5,219,15,131,26,186,35,222,42,16,48,109,51,132,53,202,54,26,56,43,58,196,60,191,62,194,62,207,60,38,57,166,51,64,44,246,35,174,27,198,19,34,12,226,4,242,253,152,247,15,242,103,237,227,233,245,230,11,228,158,224,87,220,18,215,95,209,78,204,253,200,188,199,99,200,56,202,107,204,130,206,62,208,199,209,213,211,97,215,240,220,133,228,150,237,74,247,226,0,186,9,87,17,64,23,87,28,183,33,249,39,101,46,43,52,124,57,36,62,75,65,50,66,176,65,39,65,178,64,152,63,34,61,86,57,60,52,156,45,149,37,211,28,65,20,130,12,94,5,113,254,73,247,24,240,247,232,11,226,73,219,250,212,151,207,122,203,8,200,109,196,82,192,213,187,116,183,196,179,213,177,169,178,128,182,22,189,115,197,192,206,223,215,58,224,188,231,123,238,179,244,232,250,112,1,185,8,55,16,130,23,37,30,149,35,191,39,223,42,135,45,151,48,5,52,173,55,56,59,87,62,117,64,64,65,3,65,0,64,56,62,87,59,100,55,92,50,27,44,95,36,171,27,95,18,209,8,36,255,201,245,28,237,214,228,219,220,45,213,10,206,64,199,254,192,156,187,183,183,40,181,171,179,135,178,79,178,142,179,217,182,122,188,78,196,38,206,53,217,81,228,11,238,7,245,75,249,230,251,206,253,103,255,102,1,223,4,84,10,122,17,3,25,226,31,20,38,125,43,7,48,52,51,217,52,70,53,87,53,109,53,47,53,77,52,120,51,204,50,74,49,166,45,45,39,142,30,87,21,65,12,194,3,125,252,234,246,166,242,214,238,162,234,172,229,67,224,70,219,111,215,94,212,169,209,55,207,127,205,152,204,31,204,13,204,250,204,111,207,17,211,38,215,46,219,110,223,104,228,230,233,154,239,120,245,228,251,207,2,13,10,136,17,59,25,60,33,181,41,57,50,190,57,117,63,59,67,52,69,177,69,25,69,194,67,179,65,7,63,228,59,29,56,159,51,121,46,186,40,57,34,160,26,108,17,184,6,18,251,151,239,241,228,239,219,51,213,248,208,192,206,2,206,224,205,161,205,237,204,172,203,110,201,30,198,235,193,255,189,71,187,110,186,237,187,14,192,231,198,152,207,189,216,34,225,121,232,177,238,186,243,33,248,181,252,98,2,39,9,187,16,193,24,157,32,208,39,222,45,183,50,72,54,193,56,143,58,14,60,40,61,16,62,187,62,244,62,56,62,96,60,70,57,20,53,244,47,202,41,212,34,115,27,183,19,86,11,133,2,153,249,170,240,184,231,9,223,13,215,214,207,108,201,164,195,148,190,109,186,126,183,210,181,225,181,200,183,41,187,167,191,14,197,255,202,53,209,12,216,189,223,84,232,73,241,238,249,155,1,172,7,14,12,204,14,163,16,32,18,246,19,123,22,190,25,83,29,149,32,101,35,18,38,113,40,82,42,126,43,24,44,228,43,161,42,83,40,27,37,73,33,46,29,5,25,150,20,172,15,103,10,31,5,214,255,157,250,69,245,93,240,16,236,96,232,1,229,31,226,8,224,104,222,171,220,99,218,189,215,12,213,82,210,70,208,106,207,65,208,178,210,157,214,155,219,14,225,161,230,59,236,7,242,31,248,137,254,140,5,53,13,55,21,183,28,120,35,142,41,131,47,31,53,13,58,23,62,20,65,119,66,126,65,108,62,210,57,204,52,255,47,116,43,3,39,99,34,2,29,96,22,29,14,167,4,175,250,53,241,20,233,184,226,42,222,0,219,212,216,104,215,95,214,118,213,168,212,63,212,96,212,205,212,204,212,62,212,147,211,33,211,207,210,179,210,93,211,26,213,183,215,188,218,71,222,179,226,209,231,78,237,204,242,131,248,90,254,66,4,231,9,98,15,179,20,207,25,190,30,147,35,85,40,30,45,168,49,173,53,217,56,196,58,103,59,250,58,151,57,45,55,133,51,3,47,20,42,232,36,128,31,68,26,50,21,248,15,5,10,94,3,233,251,231,243,197,235,255,227,35,221,144,215,112,211,242,208,253,207,3,208,72,208,100,208,162,208,85,209,7,211,198,213,205,217,243,222,186,228,59,234,218,238,178,242,121,246,90,250,68,254,219,1,15,5,31,8,137,10,220,11,68,12,183,12,163,13,185,14,226,15,8,17,34,18,231,18,156,18,48,17,44,15,128,13,114,12,36,12,110,12,238,12,64,13,252,12,141,11,150,8,145,4,45,0,241,251,60,248,127,245,87,244,157,244,74,245,80,245,9,244,44,241,219,236,251,231,171,227,183,224,104,223,178,223,68,225,58,227,233,228,40,230,113,231,81,233,230,235,98,239,28,244,115,250,193,1,8,9,158,15,113,21,236,26,21,32,147,36,46,40,55,43,151,45,166,46,159,45,233,42,107,39,255,35,230,32,194,29,187,26,6,24,124,21,51,18,161,13,45,8,153,2,70,253,75,248,246,243,191,240,21,239,152,238,127,238,104,238,85,238,79,238,42,238,155,237,178,236,107,235,51,234,47,233,132,232,52,232,51,232,68,232,121,232,132,232,98,232,44,232,70,232,69,233,55,235,231,237,238,240,70,244,190,247,231,250,78,253,206,254,17,0,152,1,126,3,7,6,90,9,170,13,122,18,255,22,230,26,45,30,8,33,74,35,149,36,222,36,131,36,187,35,110,34,117,32,199,29,161,26,56,23,121,19,78,15,237,10,135,6,16,2,99,253,137,248,202,243,185,239,198,236,57,235,31,235,59,236,240,237,166,239,26,241,22,242,227,242,170,243,151,244,242,245,180,247,218,249,110,252,189,255,92,3,223,6,225,9,248,11,242,12,180,12,104,11,76,9,39,7,94,5,35,4,160,3,241,3,154,4,234,4,96,4,155,2,217,255,116,252,211,248,65,245,62,242,108,240,148,239,103,239,184,239,53,240,215,240,108,241,222,241,78,242,41,243,164,244,165,246,129,248,203,249,94,250,71,250,135,249,103,248,162,247,3,248,126,249,231,251,171,254,34,1,0,3,207,3,146,3,135,2,59,1,110,0,155,0,17,2,114,4,95,7,119,10,66,13,94,15,148,16,47,17,122,17,110,17,39,17,128,16,203,15,34,15,168,14,99,14,1,14,136,13,24,13,94,12,4,11,142,8,132,5,78,2,141,255,108,253,33,252,214,251,59,252,191,252,173,252,196,251,63,250,137,248,217,246,83,245,7,244,68,243,232,242,2,243,164,243,22,245,131,247,177,250,171,253,183,255,167,0,206,0,78,0,41,255,227,253,63,253,198,253,85,255,140,1,55,4,65,7,89,10,165,12,233,13,46,14,148,13,43,12,220,9,21,7,79,4,72,2,74,1,114,1,188,2,221,4,246,6,81,8,130,8,151,7,200,5,101,3,200,0,91,254,138,252,92,251,205,250,224,250,73,251,83,251,159,250,83,249,141,247,202,245,111,244,4,244,253,244,92,247,138,250,225,253,74,1,115,4,24,7,229,8,239,9,109,10,217,10,178,11,46,13,94,15,103,18,152,21,131,24,129,26,145,27,171,27,238,26,4,25,33,22,3,19,39,16,133,13,53,11,93,9,7,8,0,7,208,5,9,4,158,1,193,254,97,251,92,247,241,242,144,238,193,234,182,231,77,229,108,227,58,226,173,225,192,225,106,226,143,227,47,229,15,231,228,232,94,234,97,235,79,236,122,237,79,239,59,242,61,246,84,251,251,0,200,6,249,11,11,16,160,18,223,19,99,20,121,20,138,20,204,20,141,21,179,22,235,23,3,25,194,25,78,26,123,26,0,26,186,24,174,22,246,19,179,16,97,13,74,10,156,7,8,5,133,2,8,0,49,253,208,249,234,245,248,241,93,238,152,235,189,233,194,232,100,232,125,232,169,232,218,232,19,233,232,233,201,235,200,238,99,242,231,245,250,248,36,251,33,252,4,252,55,251,127,250,89,250,50,251,234,252,48,255,217,1,161,4,105,7,203,9,160,11,31,13,217,14,212,16,191,18,220,20,59,23,231,25,210,28,152,31,142,33,99,34,226,33,249,31,20,29,94,25,45,21,243,16,22,13,163,9,19,6,105,2,1,255,71,252,227,249,168,247,156,245,23,244,28,243,54,242,6,241,132,239,201,237,1,236,43,234,122,232,57,231,239,230,191,231,109,233,114,235,216,237,235,240,141,244,57,248,181,251,232,254,41,2,52,5,0,8,147,10,103,13,112,16,187,19,220,22,104,25,89,27,154,28,6,29,135,28,118,27,103,26,173,25,25,25,69,24,216,22,220,20,95,18,110,15,66,12,127,9,135,7,35,6,12,5,42,4,27,3,161,1,97,255,104,252,197,248,163,244,149,240,111,237,71,235,14,234,188,233,69,234,91,235,115,236,54,237,135,237,156,237,98,237,17,237,233,236,156,237,213,239,163,243,166,248,31,254,116,3,94,8,156,12,183,15,138,17,102,18,2,19,117,19,116,19,25,19,203,18,215,18,181,18,10,18,212,16,151,15,169,14,227,13,252,12,149,11,221,9,148,7,118,4,10,0,153,250,255,244,15,240,37,236,121,233,125,232,95,233,163,235,87,238,148,240,21,242,18,243,188,243,102,244,34,245,186,245,46,246,220,246,183,247,158,248,122,249,80,250,36,251,143,251,74,251,117,250,232,249,48,250,148,251,174,253,144,0,148,3,183,6,185,9,105,12,219,14,32,17,99,19,221,21,101,24,168,26,203,28,149,30,229,31,63,32,158,31,117,30,240,28,244,26,76,24,34,21,194,17,121,14,60,11,63,8,144,5,249,2,85,0,107,253,132,250,23,248,216,246,195,246,135,247,169,248,201,249,178,250,253,250,64,250,219,248,58,247,215,245,44,245,129,245,21,247,205,249,55,253,75,0,121,2,151,3,241,3,195,3,124,3,113,3,151,3,248,3,146,4,142,5,172,6,11,8,112,9,143,10,233,10,78,10,211,8,145,6,230,3,27,1,187,254,200,252,170,251,108,251,2,252,10,253,13,254,228,254,140,255,211,255,140,255,193,254,164,253,109,252,233,250,69,249,59,248,89,248,147,249,103,251,54,253,161,254,96,255,92,255,224,254,156,254,29,255,183,0,30,3,26,6,105,9,37,13,218,16,24,20,113,22,250,23,251,24,126,25,92,25,240,24,192,24,14,25,103,25,121,25,244,24,184,23,38,21,179,16,116,10,5,3,76,251,71,244,205,238,68,235,183,233,209,233,215,234,243,235,162,236,188,236,70,236,78,235,6,234,176,232,151,231,254,230,31,231,244,231,115,233,139,235,40,238,85,241,255,244,144,248,157,251,7,254,244,255,56,1,232,1,102,2,54,3,116,4,176,5,98,6,153,6,181,6,133,6,232,5,252,4,65,4,223,3,5,4,149,4,176,5,76,7,56,9,11,11,44,12,104,12,38,12,213,11,96,11,122,10,79,9,44,8,88,7,141,6,215,5,67,5,244,4,197,4,78,4,100,3,248,1,30,0,241,253,224,251,95,250,206,249,139,250,156,252,140,255,95,2,93,4,59,5,64,5,192,4,31,4,21,4,239,4,174,6,230,8,21,11,214,12,46,14,41,15,214,15,79,16,219,16,247,17,207,19,251,21,237,23,103,25,67,26,6,26,119,24,202,21,173,18,95,15,28,12,22,9,147,6,115,4,102,2,12,0,91,253,32,250,113,246,135,242,1,239,50,236,68,234,27,233,150,232,102,232,20,232,127,231,244,230,138,230,83,230,159,230,131,231,232,232,157,234,165,236,4,239,157,241,80,244,58,247,107,250,225,253,132,1,68,5,79,9,167,13,25,18,156,22,51,27,110,31,174,34,146,36,44,37,243,36,97,36,241,35,0,36,93,36,104,36,182,35,215,33,141,30,220,25,117,20,3,15,235,9,108,5,177,1,190,254,246,251,235,248,94,245,73,241,29,237,71,233,78,230,177,228,139,228,161,229,138,231,229,233,64,236,71,238,211,239,220,240,62,241,29,241,196,240,193,240,71,241,105,242,52,244,118,246,184,248,122,250,112,251,198,251,180,251,105,251,239,250,197,250,27,251,230,251,9,253,94,254,219,255,115,1,49,3,66,5,149,7,7,10,168,12,36,15,25,17,59,18,154,18,126,18,209,17,87,16,77,14,194,11,34,9,110,6,8,4,38,2,223,0,224,255,163,254,251,252,216,250,184,248,19,247,215,245,34,245,243,244,124,245,192,246,65,248,107,249,79,250,33,251,226,251,104,252,228,252,3,254,38,0,38,3,137,6,255,9,64,13,241,15,170,17,120,18,125,18,74,18,97,18,242,18,60,20,243,21,149,23,205,24,229,24,113,23,183,20,158,17,202,14,155,12,81,11,212,10,227,10,17,11,222,10,217,9,241,7,70,5,4,2,208,254,249,251,212,249,139,248,56,248,208,248,144,249,234,249,181,249,183,248,196,246,220,243,140,240,169,237,223,235,93,235,65,236,58,238,6,241,11,244,184,246,218,248,108,250,227,251,116,253,80,255,149,1,68,4,185,7,141,11,26,15,49,18,187,20,112,22,239,22,71,22,252,20,117,19,229,17,124,16,57,15,93,14,173,13,239,12,6,12,202,10,40,9,50,7,46,5,255,2,223,0,146,254,118,252,158,250,51,249,163,248,83,249,51,251,153,253,31,0,81,2,148,3,211,3,32,3,233,1,169,0,185,255,52,255,30,255,98,255,214,255,62,0,176,0,255,0,198,0,245,255,118,254,108,252,226,249,63,247,15,245,193,243,107,243,226,243,6,245,131,246,49,248,14,250,16,252,5,254,141,255,147,0,228,0,186,0,77,0,240,255,236,255,136,0,141,1,106,2,154,2,208,1,59,0,255,253,179,251,130,249,200,247,180,246,70,246,53,246,22,246,45,246,26,247,218,248,220,250,252,252,253,254,142,0,120,1,166,1,147,1,15,2,128,3,200,5,140,8,108,11,248,13,191,15,178,16,179,16,144,15,189,13,219,11,71,10,254,8,246,7,147,7,219,7,89,8,146,8,157,8,127,8,31,8,94,7,72,6,10,5,171,3,96,2,87,1,13,1,86,1,51,2,175,3,177,5,195,7,29,9,181,9,156,9,193,8,6,7,124,4,181,1,84,255,189,253,245,252,247,252,215,253,82,255,157,0,103,1,108,1,221,0,31,0,123,255,34,255,93,255,180,0,6,3,218,5,185,8,69,11,90,13,155,14,64,15,147,15,187,15,233,15,53,16,201,16,146,17,112,18,238,18,241,18,32,18,118,16,164,13,18,10,44,6,64,2,169,254,233,251,45,250,95,249,22,249,20,249,15,249,176,248,197,247,123,246,243,244,93,243,22,242,181,241,106,242,246,243,25,246,232,248,35,252,89,255,31,2,93,4,62,6,132,7,61,8,144,8,198,8,210,8,124,8,251,7,155,7,146,7,183,7,10,8,142,8,69,9,244,9,136,10,195,10,131,10,226,9,169,8,6,7,13,5,223,2,244,0,140,255,223,254,178,254,214,254,243,254,174,254,85,253,22,251,86,248,76,245,45,242,114,239,138,237,112,236,9,236,51,236,126,236,214,236,228,236,156,236,171,235,80,234,219,232,181,231,8,231,63,231,90,232,57,234,157,236,0,239,39,241,14,243,234,244,249,246,92,249,78,252,196,255,91,3,235,6,108,10,169,13,125,16,200,18,213,20,222,22,186,24,56,26,112,27,87,28,125,28,139,27,151,25,5,23,28,20,80,17,215,14,240,12,166,11,176,10,215,9,238,8,129,7,142,5,51,3,127,0,105,253,80,250,190,247,59,246,130,245,130,245,29,246,128,247,49,249,213,250,27,252,234,252,63,253,243,252,96,252,255,251,38,252,214,252,218,253,60,255,151,0,160,1,36,2,78,2,75,2,104,2,225,2,239,3,102,5,29,7,218,8,91,10,90,11,218,11,85,12,33,13,121,14,70,16,144,18,248,20,53,23,192,24,170,25,226,25,143,25,169,24,50,23,69,21,229,18,64,16,185,13,126,11,107,9,43,7,144,4,228,1,61,255,117,252,168,249,11,247,229,244,62,243,213,241,146,240,86,239,17,238,178,236,97,235,72,234,211,233,135,234,87,236,0,239,222,241,174,244,12,247,196,248,169,249,231,249,37,250,157,250,82,251,116,252,93,254,52,1,177,4,119,8,23,12,60,15,104,17,109,18,111,18,128,17,1,16,125,14,30,13]);fileData0.push.apply(fileData0,[84,12,42,12,201,12,164,13,93,14,102,14,156,13,25,12,252,9,99,7,139,4,117,1,49,254,228,250,198,247,244,244,123,242,77,240,101,238,236,236,176,235,146,234,108,233,134,232,187,231,213,230,162,229,84,228,28,227,75,226,223,225,34,226,76,227,136,229,118,232,172,235,14,239,69,242,62,245,233,247,68,250,125,252,211,254,124,1,113,4,186,7,74,11,35,15,247,18,66,22,164,24,22,26,95,26,134,25,0,24,112,22,105,21,52,21,150,21,128,22,148,23,105,24,138,24,182,23,239,21,157,19,250,16,21,14,76,11,237,8,233,6,254,4,51,3,87,1,104,255,57,253,236,250,145,248,123,246,202,244,133,243,170,242,121,242,160,242,243,242,75,243,159,243,242,243,59,244,89,244,139,244,21,245,2,246,78,247,243,248,253,250,84,253,232,255,159,2,68,5,27,8,12,11,18,14,65,17,125,20,155,23,101,26,202,28,173,30,17,32,26,33,206,33,49,34,54,34,194,33,229,32,159,31,183,29,73,27,74,24,244,20,121,17,250,13,169,10,148,7,236,4,109,2,255,255,121,253,206,250,205,247,139,244,36,241,233,237,251,234,88,232,36,230,125,228,90,227,180,226,111,226,115,226,220,226,146,227,176,228,26,230,168,231,52,233,3,235,76,237,70,240,219,243,13,248,150,252,65,1,214,5,33,10,148,13,14,16,193,17,180,18,19,19,65,19,130,19,254,19,169,20,75,21,145,21,135,21,65,21,250,20,140,20,4,20,53,19,18,18,132,16,73,14,147,11,130,8,129,5,139,2,167,255,211,252,38,250,204,247,181,245,231,243,45,242,146,240,40,239,241,237,177,236,115,235,68,234,50,233,73,232,137,231,44,231,14,231,61,231,196,231,106,232,1,233,136,233,72,234,112,235,252,236,185,238,199,240,61,243,15,246,49,249,131,252,66,0,141,4,32,9,185,13,14,18,250,21,87,25,221,27,127,29,57,30,91,30,59,30,224,29,118,29,27,29,203,28,111,28,186,27,72,26,26,24,242,20,219,16,7,12,209,6,193,1,77,253,205,249,74,247,186,245,146,244,123,243,68,242,219,240,52,239,83,237,164,235,101,234,225,233,54,234,105,235,142,237,134,240,247,243,155,247,26,251,89,254,67,1,178,3,171,5,79,7,165,8,215,9,51,11,225,12,204,14,184,16,194,18,177,20,105,22,203,23,236,24,205,25,123,26,9,27,118,27,224,27,139,28,119,29,87,30,200,30,226,30,67,30,207,28,161,26,231,23,41,21,90,18,190,15,88,13,28,11,221,8,77,6,47,3,77,255,210,250,225,245,11,241,145,236,190,232,143,229,32,227,115,225,139,224,84,224,164,224,135,225,225,226,94,228,201,229,61,231,123,232,142,233,123,234,199,235,201,237,136,240,30,244,88,248,16,253,194,1,248,5,83,9,194,11,57,13,210,13,185,13,72,13,211,12,138,12,141,12,234,12,98,13,225,13,63,14,102,14,49,14,191,13,57,13,183,12,87,12,6,12,180,11,181,11,232,11,38,12,85,12,60,12,157,11,101,10,194,8,216,6,163,4,121,2,145,0,197,254,210,252,154,250,48,248,146,245,199,242,226,239,36,237,191,234,213,232,59,231,20,230,155,229,187,229,53,230,21,231,123,232,132,234,31,237,56,240,152,243,19,247,191,250,122,254,50,2,153,5,186,8,246,11,55,15,102,18,123,21,74,24,190,26,114,28,251,28,126,28,74,27,187,25,220,23,137,21,5,19,133,16,246,13,90,11,119,8,69,5,25,2,60,255,172,252,73,250,91,248,9,247,68,246,206,245,128,245,96,245,154,245,8,246,153,246,45,247,202,247,32,248,77,248,107,248,172,248,12,249,220,249,34,251,247,252,248,254,228,0,169,2,80,4,178,5,139,6,253,6,47,7,99,7,210,7,149,8,188,9,80,11,81,13,81,15,57,17,254,18,102,20,125,21,25,22,119,22,186,22,17,23,119,23,179,23,229,23,246,23,27,24,22,24,233,23,186,23,133,23,23,23,14,22,104,20,83,18,195,15,185,12,89,9,167,5,179,1,154,253,199,249,122,246,204,243,219,241,181,240,3,240,117,239,174,238,119,237,241,235,28,234,27,232,74,230,44,229,239,228,156,229,60,231,179,233,159,236,150,239,70,242,96,244,174,245,60,246,89,246,127,246,247,246,202,247,83,249,170,251,99,254,12,1,76,3,34,5,122,6,110,7,64,8,36,9,62,10,126,11,225,12,43,14,63,15,227,15,11,16,219,15,52,15,78,14,70,13,74,12,73,11,56,10,1,9,218,7,169,6,105,5,14,4,134,2,186,0,138,254,49,252,215,249,181,247,187,245,62,244,63,243,249,242,55,243,219,243,221,244,237,245,223,246,151,247,8,248,114,248,242,248,195,249,227,250,124,252,66,254,52,0,98,2,171,4,237,6,224,8,98,10,96,11,203,11,231,11,230,11,13,12,102,12,65,13,121,14,6,16,110,17,125,18,11,19,235,18,8,18,142,16,180,14,194,12,193,10,226,8,108,7,61,6,87,5,99,4,119,3,91,2,45,1,191,255,231,253,194,251,77,249,149,246,183,243,215,240,32,238,39,236,15,235,39,235,19,236,152,237,112,239,58,241,154,242,76,243,176,243,24,244,198,244,231,245,153,247,233,249,172,252,203,255,240,2,7,6,203,8,75,11,94,13,255,14,46,16,25,17,227,17,167,18,103,19,50,20,239,20,119,21,218,21,211,21,127,21,187,20,187,19,132,18,43,17,156,15,227,13,32,12,118,10,220,8,70,7,191,5,57,4,206,2,109,1,9,0,195,254,124,253,89,252,71,251,11,250,176,248,63,247,239,245,169,244,153,243,209,242,83,242,31,242,39,242,49,242,53,242,83,242,113,242,101,242,105,242,140,242,208,242,54,243,182,243,128,244,104,245,119,246,142,247,214,248,106,250,40,252,0,254,227,255,164,1,71,3,164,4,217,5,216,6,213,7,167,8,132,9,116,10,61,11,168,11,165,11,45,11,35,10,117,8,103,6,46,4,48,2,107,0,251,254,178,253,128,252,57,251,217,249,63,248,107,246,119,244,175,242,69,241,85,240,255,239,23,240,216,240,26,242,184,243,141,245,104,247,70,249,25,251,244,252,183,254,165,0,144,2,194,4,20,7,103,9,166,11,177,13,164,15,59,17,113,18,82,19,219,19,55,20,129,20,203,20,28,21,113,21,237,21,70,22,84,22,229,21,227,20,89,19,112,17,57,15,251,12,236,10,37,9,165,7,145,6,182,5,49,5,172,4,7,4,50,3,33,2,210,0,63,255,116,253,111,251,69,249,65,247,130,245,46,244,104,243,43,243,84,243,224,243,179,244,154,245,136,246,87,247,255,247,122,248,231,248,50,249,126,249,230,249,168,250,252,251,190,253,198,255,246,1,225,3,121,5,157,6,240,6,129,6,167,5,182,4,201,3,249,2,139,2,125,2,148,2,136,2,96,2,75,2,81,2,94,2,140,2,197,2,240,2,226,2,82,2,111,1,60,0,36,255,73,254,177,253,73,253,12,253,125,252,183,251,123,250,193,248,230,246,22,245,165,243,128,242,169,241,79,241,95,241,147,241,227,241,75,242,158,242,193,242,166,242,84,242,255,241,13,242,163,242,254,243,238,245,107,248,38,251,191,253,255,255,204,1,23,3,219,3,112,4,195,4,251,4,68,5,8,6,71,7,215,8,119,10,249,11,2,13,136,13,101,13,130,12,46,11,252,9,55,9,242,8,15,9,57,9,96,9,121,9,100,9,28,9,172,8,59,8,126,7,97,6,190,4,214,2,194,0,169,254,227,252,141,251,196,250,104,250,69,250,13,250,146,249,137,248,42,247,118,245,207,243,159,242,34,242,133,242,165,243,66,245,31,247,235,248,152,250,203,251,189,252,67,253,113,253,146,253,205,253,86,254,75,255,179,0,135,2,173,4,200,6,130,8,187,9,84,10,114,10,58,10,0,10,252,9,76,10,216,10,173,11,130,12,23,13,90,13,84,13,0,13,147,12,10,12,86,11,72,10,218,8,84,7,192,5,94,4,65,3,121,2,2,2,182,1,114,1,28,1,212,0,121,0,234,255,31,255,57,254,65,253,76,252,104,251,172,250,92,250,114,250,11,251,222,251,233,252,245,253,11,255,252,255,198,0,161,1,173,2,34,4,241,5,226,7,183,9,36,11,5,12,135,12,164,12,191,12,254,12,96,13,36,14,9,15,255,15,183,16,46,17,57,17,227,16,251,15,175,14,227,12,210,10,122,8,1,6,149,3,65,1,44,255,82,253,153,251,9,250,109,248,179,246,193,244,139,242,0,240,86,237,196,234,72,232,24,230,110,228,35,227,66,226,148,225,0,225,83,224,188,223,101,223,93,223,223,223,253,224,161,226,127,228,93,230,66,232,8,234,210,235,227,237,109,240,99,243,165,246,233,249,20,253,218,255,42,2,220,3,240,4,143,5,252,5,54,6,137,6,224,6,120,7,54,8,220,8,52,9,39,9,211,8,93,8,221,7,107,7,21,7,239,6,246,6,16,7,17,7,4,7,227,6,204,6,162,6,96,6,10,6,156,5,17,5,135,4,8,4,191,3,194,3,66,4,48,5,91,6,140,7,141,8,146,9,146,10,111,11,16,12,169,12,101,13,82,14,67,15,14,16,3,17,39,18,128,19,208,20,2,22,62,23,74,24,178,24,36,24,245,22,74,21,49,19,140,16,177,13,1,11,165,8,130,6,154,4,192,2,206,0,154,254,11,252,4,249,144,245,204,241,218,237,40,234,198,230,254,227,10,226,243,224,195,224,63,225,92,226,145,227,115,228,219,228,249,228,9,229,5,229,74,229,87,230,34,232,154,234,95,237,116,240,161,243,176,246,115,249,215,251,254,253,44,0,149,2,48,5,240,7,180,10,133,13,71,16,217,18,243,20,156,22,202,23,151,24,36,25,90,25,129,25,162,25,197,25,223,25,219,25,159,25,222,24,144,23,189,21,103,19,145,16,63,13,220,9,169,6,184,3,247,0,116,254,48,252,4,250,198,247,115,245,24,243,232,240,0,239,109,237,86,236,193,235,175,235,31,236,18,237,100,238,250,239,170,241,123,243,95,245,112,247,130,249,110,251,8,253,97,254,161,255,175,0,214,1,1,3,71,4,158,5,21,7,156,8,63,10,223,11,115,13,150,14,59,15,63,15,112,14,4,13,38,11,246,8,228,6,70,5,27,4,115,3,10,3,168,2,224,1,85,0,250,253,236,250,120,247,238,243,197,240,46,238,92,236,72,235,215,234,155,234,92,234,227,233,49,233,48,232,28,231,24,230,125,229,142,229,42,230,90,231,20,233,31,235,178,237,145,240,155,243,197,246,8,250,62,253,67,0,250,2,90,5,88,7,77,9,37,11,249,12,217,14,0,17,31,19,253,20,126,22,131,23,198,23,75,23,24,22,106,20,140,18,201,16,51,15,246,13,14,13,61,12,165,11,230,10,187,9,209,7,67,5,14,2,127,254,225,250,180,247,54,245,143,243,149,242,44,242,8,242,228,241,196,241,138,241,36,241,144,240,42,240,62,240,220,240,5,242,157,243,159,245,244,247,85,250,150,252,150,254,102,0,16,2,149,3,251,4,122,6,254,7,159,9,71,11,237,12,123,14,205,15,189,16,6,17,133,16,50,15,101,13,90,11,37,9,52,7,164,5,138,4,162,3,213,2,233,1,152,0,218,254,123,252,182,249,174,246,198,243,42,241,13,239,126,237,110,236,184,235,87,235,58,235,57,235,2,235,132,234,205,233,252,232,53,232,116,231,250,230,196,230,11,231,185,231,186,232,34,234,229,235,201,237,202,239,215,241,234,243,241,245,253,247,23,250,64,252,126,254,166,0,235,2,58,5,170,7,48,10,179,12,1,15,84,17,109,19,111,21,9,23,56,24,250,24,82,25,52,25,115,24,58,23,167,21,203,19,175,17,93,15,249,12,139,10,31,8,221,5,177,3,154,1,146,255,155,253,171,251,191,249,4,248,115,246,39,245,65,244,186,243,169,243,234,243,121,244,59,245,35,246,28,247,25,248,56,249,131,250,244,251,88,253,163,254,236,255,19,1,9,2,222,2,187,3,190,4,213,5,9,7,74,8,123,9,127,10,100,11,11,12,106,12,143,12,158,12,159,12,203,12,254,12,35,13,44,13,244,12,73,12,73,11,211,9,2,8,227,5,201,3,207,1,10,0,114,254,12,253,196,251,80,250,156,248,113,246,223,243,248,240,0,238,22,235,106,232,70,230,191,228,238,227,185,227,0,228,168,228,84,229,213,229,58,230,110,230,145,230,227,230,101,231,79,232,217,233,225,235,90,238,48,241,77,244,108,247,36,250,119,252,118,254,59,0,144,1,119,2,107,3,163,4,51,6,210,7,127,9,63,11,238,12,49,14,242,14,238,14,132,14,196,13,239,12,248,11,21,11,65,10,162,9,24,9,129,8,212,7,21,7,55,6,41,5,173,3,248,1,43,0,99,254,193,252,65,251,27,250,84,249,11,249,32,249,103,249,143,249,162,249,85,249,233,248,98,248,234,247,160,247,166,247,72,248,67,249,149,250,14,252,142,253,248,254,34,0,234,0,136,1,240,1,33,2,23,2,230,1,197,1,240,1,58,2,158,2,10,3,118,3,184,3,155,3,37,3,90,2,81,1,47,0,12,255,244,253,247,252,250,251,240,250,222,249,183,248,142,247,77,246,13,245,146,243,21,242,169,240,70,239,204,237,103,236,29,235,13,234,90,233,222,232,194,232,192,232,222,232,198,232,173,232,105,232,57,232,72,232,196,232,219,233,130,235,153,237,19,240,223,242,190,245,145,248,35,251,127,253,164,255,185,1,225,3,48,6,200,8,176,11,164,14,154,17,111,20,234,22,216,24,41,26,210,26,27,27,252,26,157,26,239,25,82,25,211,24,88,24,217,23,63,23,138,22,128,21,255,19,200,17,36,15,15,12,214,8,196,5,22,3,24,1,189,255,203,254,22,254,88,253,118,252,84,251,24,250,163,248,42,247,203,245,216,244,93,244,170,244,131,245,181,246,27,248,173,249,38,251,112,252,66,253,169,253,186,253,158,253,156,253,202,253,102,254,114,255,222,0,84,2,154,3,114,4,188,4,119,4,208,3,248,2,42,2,147,1,92,1,71,1,110,1,173,1,211,1,191,1,96,1,186,0,242,255,211,254,152,253,48,252,190,250,109,249,36,248,47,247,131,246,53,246,247,245,193,245,93,245,193,244,208,243,182,242,130,241,98,240,93,239,215,238,209,238,72,239,1,240,213,240,153,241,27,242,49,242,8,242,198,241,173,241,218,241,87,242,91,243,173,244,80,246,16,248,183,249,42,251,154,252,208,253,224,254,208,255,201,0,169,1,94,2,0,3,111,3,232,3,68,4,162,4,214,4,194,4,77,4,153,3,127,2,21,1,130,255,213,253,74,252,232,250,208,249,3,249,131,248,30,248,200,247,99,247,237,246,85,246,168,245,220,244,238,243,46,243,172,242,125,242,191,242,105,243,143,244,253,245,133,247,198,248,181,249,38,250,70,250,54,250,38,250,18,250,75,250,233,250,226,251,44,253,144,254,234,255,39,1,25,2,156,2,162,2,49,2,148,1,216,0,94,0,53,0,112,0,22,1,250,1,212,2,102,3,131,3,49,3,104,2,49,1,175,255,234,253,44,252,190,250,170,249,26,249,230,248,234,248,6,249,10,249,217,248,89,248,143,247,149,246,165,245,253,244,200,244,42,245,66,246,199,247,179,249,186,251,196,253,148,255,16,1,46,2,23,3,191,3,78,4,223,4,117,5,21,6,222,6,190,7,163,8,100,9,15,10,137,10,188,10,151,10,15,10,49,9,32,8,18,7,49,6,124,5,28,5,240,4,244,4,231,4,149,4,26,4,81,3,85,2,57,1,56,0,102,255,230,254,186,254,213,254,41,255,133,255,146,255,99,255,220,254,22,254,64,253,92,252,161,251,17,251,206,250,191,250,3,251,99,251,214,251,52,252,146,252,243,252,98,253,231,253,156,254,117,255,94,0,114,1,133,2,127,3,86,4,8,5,134,5,250,5,90,6,201,6,68,7,162,7,245,7,29,8,31,8,225,7,124,7,245,6,93,6,187,5,3,5,62,4,90,3,67,2,8,1,180,255,52,254,164,252,48,251,16,250,51,249,194,248,168,248,228,248,64,249,118,249,141,249,102,249,13,249,129,248,214,247,51,247,153,246,68,246,50,246,119,246,242,246,127,247,37,248,198,248,116,249,247,249,29,250,240,249,134,249,248,248,97,248,216,247,149,247,185,247,70,248,4,249,223,249,159,250,61,251,98,251,37,251,162,250,252,249,67,249,114,248,171,247,244,246,94,246,219,245,94,245,230,244,92,244,185,243,15,243,93,242,132,241,193,240,24,240,208,239,243,239,115,240,80,241,124,242,187,243,221,244,196,245,122,246,15,247,185,247,125,248,117,249,167,250,42,252,204,253,139,255,67,1,224,2,83,4,157,5,137,6,74,7,239,7,135,8,30,9,190,9,94,10,234,10,81,11,107,11,58,11,209,10,80,10,185,9,44,9,139,8,26,8,180,7,94,7,215,6,50,6,85,5,82,4,28,3,204,1,111,0,11,255,164,253,49,252,224,250,153,249,113,248,87,247,89,246,75,245,124,244,178,243,19,243,174,242,134,242,116,242,93,242,69,242,31,242,252,241,26,242,125,242,72,243,98,244,206,245,134,247,113,249,59,251,202,252,245,253,209,254,103,255,231,255,87,0,255,0,220,1,215,2,231,3,216,4,183,5,80,6,185,6,191,6,148,6,24,6,99,5,133,4,157,3,223,2,76,2,8,2,248,1,11,2,45,2,52,2,3,2,150,1,213,0,250,255,61,255,166,254,114,254,132,254,241,254,172,255,101,0,250,0,55,1,62,1,237,0,79,0,158,255,228,254,90,254,30,254,69,254,199,254,125,255,73,0,244,0,113,1,158,1,133,1,82,1,0,1,178,0,142,0,132,0,194,0,41,1,149,1,206,1,209,1,146,1,36,1,155,0,3,0,132,255,8,255,174,254,60,254,197,253,78,253,216,252,74,252,156,251,242,250,66,250,155,249,36,249,214,248,153,248,105,248,74,248,56,248,43,248,27,248,46,248,129,248,229,248,93,249,210,249,88,250,215,250,68,251,186,251,78,252,11,253,246,253,244,254,27,0,78,1,90,2,34,3,185,3,16,4,83,4,113,4,135,4,182,4,10,5,143,5,73,6,6,7,186,7,49,8,119,8,111,8,35,8,214,7,125,7,47,7,243,6,173,6,110,6,26,6,177,5,15,5,67,4,110,3,114,2,95,1,75,0,58,255,57,254,60,253,58,252,44,251,12,250,232,248,219,247,239,246,37,246,106,245,203,244,69,244,203,243,87,243,238,242,150,242,77,242,249,241,146,241,91,241,82,241,144,241,238,241,74,242,175,242,0,243,85,243,154,243,197,243,250,243,48,244,149,244,2,245,136,245,72,246,48,247,16,248,207,248,121,249,27,250,190,250,110,251,37,252,229,252,168,253,101,254,21,255,204,255,133,0,44,1,207,1,115,2,1,3,122,3,200,3,241,3,0,4,253,3,209,3,168,3,148,3,153,3,164,3,133,3,76,3,234,2,117,2,252,1,135,1,6,1,161,0,89,0,49,0,28,0,23,0,48,0,54,0,61,0,27,0,240,255,166,255,79,255,15,255,239,254,220,254,246,254,66,255,181,255,70,0,193,0,4,1,6,1,218,0,149,0,76,0,27,0,2,0,51,0,146,0,255,0,111,1,186,1,246,1,31,2,25,2,9,2,250,1,251,1,25,2,75,2,124,2,179,2,220,2,212,2,142,2,252,1,82,1,155,0,227,255,52,255,154,254,30,254,208,253,161,253,82,253,216,252,93,252,196,251,34,251,133,250,0,250,148,249,61,249,24,249,255,248,15,249,80,249,168,249,41,250,210,250,152,251,97,252,29,253,224,253,157,254,66,255,234,255,119,0,14,1,169,1,88,2,5,3,159,3,36,4,151,4,1,5,60,5,90,5,78,5,33,5,242,4,200,4,164,4,91,4,39,4,239,3,198,3,151,3,93,3,251,2,112,2,206,1,46,1,132,0,242,255,100,255,255,254,169,254,112,254,57,254,240,253,124,253,220,252,33,252,124,251,246,250,145,250,67,250,18,250,23,250,46,250,100,250,195,250,56,251,189,251,94,252,3,253,170,253,86,254,18,255,231,255,214,0,4,2,56,3,114,4,181,5,210,6,235,7,194,8,113,9,236,9,60,10,163,10,4,11,105,11,230,11,94,12,150,12,151,12,82,12,209,11,11,11,16,10,248,8,214,7,192,6,196,5,200,4,223,3,7,3,75,2,141,1,217,0,15,0,35,255,0,254,200,252,145,251,96,250,118,249,190,248,62,248,217,247,137,247,46,247,192,246,10,246,55,245,105,244,188,243,40,243,176,242,111,242,86,242,128,242,203,242,68,243,207,243,89,244,214,244,74,245,180,245,10,246,123,246,248,246,164,247,108,248,94,249,122,250,170,251,226,252,51,254,75,255,93,0,9,1,127,1,153,1,126,1,44,1,209,0,126,0,50,0,242,255,202,255,202,255,166,255,78,255,172,254,231,253,10,253,28,252,41,251,55,250,119,249,224,248,108,248,18,248,223,247,215,247,205,247,203,247,217,247,248,247,77,248,180,248,60,249,212,249,150,250,91,251,57,252,3,253,190,253,96,254,249,254,149,255,18,0,160,0,68,1,234,1,178,2,97,3,248,3,107,4,203,4,26,5,82,5,129,5,173,5,222,5,13,6,45,6,87,6,138,6,206,6,1,7,51,7,88,7,98,7,89,7,70,7,246,6,136,6,12,6,156,5,77,5,252,4,198,4,116,4,28,4,177,3,19,3,85,2,101,1,102,0,66,255,11,254,237,252,239,251,38,251,113,250,229,249,129,249,74,249,65,249,70,249,86,249,93,249,70,249,31,249,235,248,215,248,240,248,62,249,195,249,155,250,145,251,154,252,137,253,105,254,25,255,145,255,217,255,248,255,24,0,32,0,72,0,105,0,165,0,252,0,91,1,172,1,222,1,234,1,242,1,181,1,87,1,244,0,171,0,125,0,143,0,181,0,6,1,115,1,223,1,74,2,128,2,138,2,96,2,13,2,170,1,79,1,18,1,233,0,223,0,222,0,207,0,209,0,164,0,88,0,236,255,109,255,207,254,49,254,126,253,235,252,120,252,52,252,11,252,235,251,224,251,224,251,219,251,209,251,212,251,215,251,233,251,29,252,123,252,237,252,141,253,74,254,45,255,224,255,132,0,243,0,51,1,73,1,8,1,153,0,35,0,210,255,196,255,210,255,15,0,92,0,154,0,191,0,131,0,6,0,53,255,60,254,71,253,67,252,131,251,5,251,212,250,249,250,85,251,223,251,111,252,250,252,44,253,54,253,13,253,200,252,147,252,100,252,120,252,201,252,77,253,248,253,181,254,97,255,249,255,140,0,255,0,65,1,108,1,127,1,156,1,173,1,218,1,12,2,84,2,168,2,33,3,123,3,194,3,1,4,18,4,7,4,250,3,191,3,141,3,53,3,232,2,145,2,68,2,13,2,222,1,195,1,135,1,58,1,180,0,36,0,125,255,182,254,202,253,227,252,30,252,122,251,243,250,139,250,54,250,236,249,141,249,26,249,149,248,6,248,99,247,184,246,55,246,203,245,158,245,160,245,204,245,28,246,118,246,214,246,47,247,131,247,184,247,242,247,54,248,168,248,19,249,122,249,201,249,33,250,149,250,3,251,102,251,190,251,24,252,102,252,195,252,11,253,84,253,178,253,20,254,144,254,20,255,130,255,240,255,46,0,73,0,44,0,27,0,246,255,209,255,180,255,180,255,202,255,210,255,242,255,22,0,42,0,45,0,254,255,176,255,57,255,188,254,71,254,240,253,196,253,173,253,227,253,42,254,128,254,172,254,199,254,202,254,176,254,147,254,146,254,179,254,252,254,131,255,23,0,163,0,61,1,217,1,94,2,215,2,54,3,145,3,234,3,55,4,97,4,138,4,153,4,156,4,172,4,176,4,166,4,146,4,72,4,219,3,69,3,149,2,233,1,52,1,130,0,206,255,12,255,40,254,40,253,15,252,248,250,212,249,204,248,232,247,56,247,210,246,145,246,112,246,104,246,139,246,182,246,223,246,17,247,87,247,148,247,225,247,64,248,196,248,122,249,76,250,66,251,81,252,85,253,91,254,79,255,42,0,235,0,163,1,86,2,248,2,128,3,245,3,129,4,25,5,179,5,86,6,231,6,109,7,238,7,98,8,207,8,37,9,82,9,82,9,61,9,19,9,250,8,221,8,198,8,165,8,114,8,35,8,210,7,100,7,180,6,216,5,221,4,212,3,201,2,175,1,175,0,181,255,220,254,41,254,130,253,235,252,80,252,186,251,39,251,155,250,10,250,140,249,19,249,184,248,97,248,56,248,82,248,145,248,222,248,79,249,208,249,92,250,234,250,94,251,201,251,46,252,162,252,11,253,120,253,215,253,70,254,174,254,21,255,100,255,184,255,10,0,89,0,146,0,168,0,181,0,183,0,220,0,5,1,64,1,95,1,137,1,126,1,120,1,108,1,95,1,61,1,17,1,232,0,205,0,179,0,165,0,156,0,145,0,131,0,88,0,40,0,246,255,178,255,79,255,217,254,84,254,221,253,126,253,54,253,17,253,17,253,36,253,68,253,78,253,53,253,12,253,161,252,47,252,184,251,90,251,30,251,38,251,100,251,172,251,1,252,68,252,127,252,174,252,171,252,160,252,155,252,153,252,148,252,121,252,126,252,169,252,232,252,69,253,152,253,205,253,241,253,226,253,170,253,79,253,233,252,141,252,54,252,11,252,240,251,13,252,47,252,81,252,84,252,68,252,25,252,249,251,217,251,167,251,105,251,79,251,84,251,120,251,200,251,6,252,91,252,157,252,187,252,230,252,242,252,6,253,254,252,253,252,24,253,60,253,85,253,98,253,132,253,160,253,167,253,151,253,132,253,106,253,100,253,98,253,95,253,96,253,107,253,119,253,117,253,103,253,100,253,107,253,117,253,133,253,167,253,208,253,10,254,98,254,198,254,29,255,103,255,172,255,207,255,234,255,8,0,9,0,10,0,13,0,30,0,87,0,125,0,208,0,27,1,104,1,159,1,208,1,220,1,207,1,176,1,150,1,114,1,88,1,54,1,19,1,238,0,216,0,171,0,142,0,79,0,18,0,208,255,115,255,12,255,145,254,17,254,181,253,119,253,76,253,49,253,240,252,185,252,102,252,40,252,214,251,140,251,79,251,35,251,243,250,225,250,178,250,155,250,155,250,186,250,227,250,30,251,89,251,119,251,159,251,207,251,247,251,28,252,65,252,124,252,195,252,34,253,129,253,231,253,93,254,213,254,61,255,171,255,252,255,85,0,179,0,255,0,82,1,166,1,247,1,96,2,193,2,42,3,146,3,233,3,39,4,66,4,67,4,32,4,18,4,246,3,229,3,219,3,230,3,249,3,241,3,196,3,134,3,47,3,199,2,77,2,229,1,146,1,70,1,15,1,235,0,179,0,116,0,28,0,200,255,100,255,244,254,115,254,237,253,106,253,249,252,167,252,101,252,83,252,98,252,122,252,152,252,170,252,180,252,188,252,192,252,160,252,148,252,126,252,136,252,192,252,21,253,102,253,196,253,50,254,159,254,4,255,88,255,122,255,112,255,61,255,40,255,48,255,70,255,126,255,204,255,51,0,114,0,146,0,153,0,139,0,85,0,33,0,211,255,137,255,73,255,55,255,42,255,56,255,73,255,99,255,96,255,71,255,9,255,162,254,50,254,180,253,71,253,238,252,170,252,122,252,73,252,18,252,229,251,173,251,127,251,73,251,8,251,203,250,147,250,85,250,32,250,243,249,234,249,6,250,46,250,124,250,200,250,11,251,66,251,117,251,167,251,190,251,218,251,5,252,67,252,137,252,216,252,43,253,129,253,239,253,56,254,95,254,102,254,105,254,98,254,63,254,53,254,48,254,96,254,147,254,195,254,250,254,40,255,93,255,122,255,160,255,165,255,153,255,153,255,133,255,139,255,165,255,191,255,227,255,245,255,0,0,234,255,201,255,126,255,38,255,196,254,91,254,10,254,177,253,90,253,253,252,199,252,180,252,154,252,157,252,143,252,124,252,105,252,103,252,118,252,139,252,175,252,217,252,38,253,129,253,244,253,85,254,181,254,13,255,78,255,125,255,149,255,178,255,175,255,165,255,165,255,171,255,203,255,217,255,233,255,213,255,179,255,91,255,2,255,164,254,95,254,47,254,31,254,253,253,252,253,15,254,35,254,68,254,51,254,16,254,232,253,210,253,181,253,158,253,106,253,95,253,82,253,67,253,43,253,30,253,31,253,12,253,252,252,6,253,217,252,178,252,137,252,120,252,97,252,63,252,41,252,23,252,24,252,54,252,84,252,119,252,173,252,234,252,34,253,67,253,112,253,162,253,205,253,15,254,113,254,192,254,28,255,136,255,242,255,52,0,89,0,114,0,113,0,125,0,101,0,105,0,121,0,130,0,161,0,174,0,191,0,213,0,234,0,225,0,196,0,176,0,146,0,143,0,167,0,180,0,205,0,223,0,3,1,23,1,36,1,34,1,5,1,212,0,158,0,103,0,62,0,34,0,23,0,20,0,7,0,7,0,251,255,216,255,172,255,75,255,232,254,108,254,31,254,226,253,197,253,199,253,224,253,236,253,255,253,225,253,188,253,117,253,43,253,213,252,130,252,84,252,50,252,70,252,96,252,139,252,169,252,171,252,169,252,145,252,124,252,99,252,85,252,84,252,78,252,86,252,126,252,198,252,11,253,87,253,127,253,183,253,205,253,211,253,200,253,227,253,254,253,59,254,120,254,204,254,62,255,164,255,7,0,94,0,178,0,231,0,245,0,231,0,217,0,237,0,252,0,46,1,87,1,161,1,244,1,79,2,156,2,203,2,204,2,170,2,112,2,29,2,205,1,153,1,133,1,141,1,160,1,164,1,165,1,155,1,114,1,35,1,206,0,119,0,18,0,201,255,116,255,56,255,247,254,207,254,150,254,86,254,35,254,213,253,154,253,96,253,36,253,228,252,168,252,133,252,116,252,116,252,142,252,164,252,187,252,181,252,185,252,187,252,186,252,186,252,182,252,169,252,171,252,213,252,11,253,88,253,157,253,251,253,88,254,176,254,223,254,21,255,63,255,76,255,110,255,132,255,145,255,177,255,214,255,246,255,33,0,67,0,125,0,148,0,160,0,135,0,99,0,73,0,60,0,26,0,18,0,3,0,11,0,10,0,243,255,191,255,137,255,57,255,237,254,158,254,69,254,8,254,199,253,163,253,115,253,107,253,64,253,28,253,246,252,184,252,121,252,61,252,250,251,184,251,131,251,84,251,56,251,42,251,38,251,50,251,78,251,110,251,133,251,156,251,171,251,188,251,200,251,248,251,42,252,101,252,153,252,195,252,255,252,41,253,87,253,125,253,151,253,185,253,213,253,217,253,210,253,205,253,198,253,186,253,207,253,238,253,22,254,50,254,65,254,59,254,43,254,22,254,2,254,244,253,238,253,236,253,247,253,8,254,7,254,18,254,22,254,13,254,0,254,237,253,211,253,154,253,107,253,59,253,25,253,8,253,24,253,42,253,64,253,45,253,18,253,6,253,249,252,242,252,235,252,12,253,79,253,146,253,226,253,55,254,135,254,223,254,30,255,90,255,134,255,162,255,231,255,39,0,115,0,210,0,58,1,157,1,243,1,36,2,79,2,87,2,63,2,14,2,223,1,150,1,111,1,80,1,64,1,46,1,37,1,20,1,240,0,182,0,127,0,53,0,233,255,127,255,33,255,226,254,179,254,149,254,151,254,136,254,119,254,109,254,76,254,50,254,0,254,181,253,116,253,50,253,25,253,8,253,28,253,31,253,49,253,63,253,74,253,77,253,51,253,31,253,246,252,211,252,213,252,220,252,243,252,21,253,81,253,145,253,215,253,2,254,47,254,102,254,144,254,183,254,218,254,12,255,84,255,155,255,230,255,64,0,132,0,194,0,227,0,17,1,19,1,0,1,237,0,183,0,139,0,92,0,60,0,12,0,4,0,241,255,2,0,2,0,245,255,213,255,156,255,74,255,238,254,128,254,81,254,24,254,252,253,254,253,15,254,47,254,90,254,113,254,108,254,79,254,36,254,221,253,161,253,95,253,55,253,19,253,31,253,53,253,98,253,98,253,106,253,73,253,44,253,231,252,171,252,94,252,44,252,245,251,205,251,194,251,208,251,6,252,37,252,78,252,95,252,99,252,93,252,44,252,8,252,227,251,227,251,210,251,205,251,224,251,2,252,42,252,66,252,80,252,93,252,64,252,15,252,216,251,155,251,122,251,115,251,137,251,189,251,238,251,42,252,124,252,183,252,232,252,244,252,255,252,247,252,2,253,15,253,51,253,71,253,124,253,204,253,58,254,150,254,224,254,35,255,84,255,99,255,60,255,22,255,243,254,245,254,236,254,244,254,9,255,39,255,67,255,85,255,81,255,79,255,40,255,10,255,205,254,155,254,110,254,111,254,140,254,192,254,241,254,28,255,43,255,33,255,20,255,248,254,248,254,220,254,184,254,135,254,125,254,135,254,137,254,144,254,139,254,138,254,130,254,130,254,130,254,121,254,101,254,102,254,100,254,116,254,136,254,199,254,22,255,106,255,167,255,225,255,29,0,57,0,90,0,110,0,121,0,124,0,141,0,154,0,178,0,199,0,216,0,224,0,208,0,195,0,182,0,154,0,116,0,84,0,40,0,250,255,194,255,158,255,113,255,85,255,47,255,254,254,222,254,165,254,102,254,41,254,1,254,228,253,205,253,162,253,117,253,81,253,80,253,101,253,101,253,104,253,88,253,83,253,74,253,53,253,55,253,45,253,70,253,103,253,171,253,225,253,42,254,110,254,174,254,218,254,255,254,56,255,76,255,99,255,136,255,176,255,231,255,35,0,82,0,151,0,201,0,240,0,238,0,245,0,237,0,201,0,177,0,148,0,154,0,170,0,187,0,192,0,187,0,187,0,166,0,140,0,87,0,28,0,247,255,192,255,172,255,154,255,158,255,163,255,183,255,178,255,180,255,151,255,115,255,81,255,40,255,254,254,220,254,197,254,195,254,209,254,8,255,59,255,102,255,146,255,190,255,220,255,219,255,196,255,168,255,151,255,172,255,201,255,240,255,26,0,81,0,127,0,165,0,176,0,174,0,156,0,118,0,77,0,13,0,220,255,193,255,218,255,225,255,0,0,10,0,10,0,5,0,249,255,179,255,100,255,35,255,235,254,200,254,170,254,153,254,148,254,159,254,179,254,188,254,190,254,199,254,179,254,149,254,89,254,50,254,29,254,23,254,42,254,71,254,115,254,164,254,222,254,32,255,82,255,117,255,139,255,156,255,175,255,202,255,226,255,12,0,73,0,152,0,233,0,62,1,139,1,203,1,249,1,35,2,39,2,33,2,2,2,223,1,206,1,194,1,199,1,216,1,215,1,201,1,162,1,104,1,35,1,210,0,122,0,32,0,219,255,144,255,117,255,80,255,62,255,26,255,243,254,172,254,123,254,50,254,235,253,170,253,96,253,41,253,0,253,226,252,187,252,179,252,184,252,224,252,246,252,17,253,21,253,35,253,24,253,16,253,2,253,15,253,56,253,106,253,167,253,229,253,41,254,95,254,166,254,221,254,253,254,34,255,57,255,89,255,130,255,181,255,215,255,245,255,39,0,87,0,148,0,227,0,13,1,31,1,246,0,213,0,170,0,135,0,111,0,92,0,100,0,127,0,159,0,189,0,188,0,159,0,104,0,45,0,223,255,133,255,61,255,29,255,9,255,4,255,25,255,46,255,95,255,123,255,133,255,115,255,78,255,34,255,246,254,211,254,190,254,181,254,202,254,249,254,66,255,151,255,251,255,66,0,99,0,113,0,114,0,108,0,98,0,113,0,147,0,189,0,248,0,53,1,107,1,143,1,183,1,187,1,174,1,153,1,123,1,100,1,103,1,111,1,134,1,173,1,211,1,237,1,20,2,31,2,36,2,15,2,238,1,210,1,166,1,118,1,64,1,3,1,229,0,217,0,230,0,231,0,222,0,180,0,144,0,75,0,24,0,212,255,142,255,105,255,87,255,83,255,103,255,131,255,185,255,227,255,237,255,232,255,214,255,208,255,202,255,215,255,219,255,0,0,65,0,141,0,215,0,37,1,108,1,172,1,201,1,215,1,215,1,191,1,152,1,124,1,120,1,137,1,143,1,163,1,181,1,202,1,201,1,194,1,150,1,80,1,250,0,190,0,120,0,77,0,31,0,36,0,36,0,55,0,67,0,78,0,69,0,59,0,13,0,228,255,159,255,114,255,84,255,74,255,68,255,94,255,134,255,169,255,192,255,196,255,188,255,186,255,164,255,118,255,87,255,52,255,62,255,97,255,137,255,210,255,245,255,46,0,74,0,93,0,94,0,40,0,7,0,236,255,209,255,188,255,183,255,189,255,207,255,237,255,255,255,11,0,22,0,19,0,238,255,206,255,174,255,165,255,134,255,89,255,73,255,45,255,53,255,86,255,116,255,128,255,141,255,109,255,90,255,68,255,47,255,30,255,254,254,251,254,11,255,13,255,38,255,55,255,98,255,128,255,128,255,148,255,142,255,167,255,194,255,232,255,25,0,67,0,131,0,198,0,244,0,28,1,70,1,103,1,117,1,130,1,120,1,101,1,93,1,105,1,111,1,132,1,150,1,160,1,171,1,154,1,133,1,85,1,61,1,25,1,250,0,207,0,192,0,162,0,164,0,168,0,178,0,186,0,177,0,159,0,124,0,92,0,70,0,37,0,29,0,26,0,54,0,86,0,124,0,165,0,200,0,238,0,250,0,24,1,32,1,42,1,24,1,14,1,3,1,3,1,21,1,30,1,64,1,82,1,92,1,92,1,113,1,127,1,136,1,155,1,164,1,164,1,159,1,153,1,173,1,189,1,197,1,209,1,212,1,224,1,241,1,249,1,12,2,17,2,245,1,205,1,163,1,125,1,91,1,66,1,44,1,28,1,23,1,6,1,4,1,233,0,195,0,141,0,102,0,70,0,47,0,40,0,24,0,8,0,8,0,43,0,65,0,87,0,111,0,124,0,135,0,160,0,171,0,209,0,233,0,241,0,6,1,27,1,80,1,114,1,170,1,199,1,237,1,0,2,42,2,49,2,61,2,51,2,45,2,44,2,46,2,44,2,42,2,44,2,50,2,48,2,58,2,50,2,54,2,21,2,20,2,15,2,8,2,246,1,235,1,222,1,209,1,180,1,164,1,152,1,140,1,103,1,55,1,11,1,229,0,210,0,210,0,208,0,219,0,230,0,243,0,254,0,21,1,37,1,24,1,255,0,246,0,251,0,13,1,36,1,48,1,54,1,74,1,94,1,103,1,102,1,77,1,70,1,58,1,66,1,79,1,72,1,76,1,78,1,98,1,86,1,98,1,92,1,70,1,37,1,4,1,228,0,200,0,184,0,168,0,162,0,156,0,165,0,172,0,165,0,137,0,110,0,93,0,48,0,21,0,229,255,217,255,208,255,219,255,222,255,243,255,6,0,28,0,20,0,35,0,54,0,48,0,48,0,43,0,54,0,70,0,96,0,126,0,143,0,189,0,228,0,10,1,43,1,63,1,73,1,75,1,75,1,91,1,93,1,129,1,150,1,183,1,204,1,252,1,19,2,10,2,230,1,215,1,198,1,163,1,138,1,135,1,146,1,144,1,151,1,154,1,150,1,137,1,115,1,100,1,73,1,21,1,240,0,196,0,178,0,168,0,173,0,171,0,205,0,242,0,39,1,66,1,78,1,66,1,62,1,56,1,58,1,64,1,69,1,80,1,95,1,118,1,156,1,187,1,213,1,236,1,249,1,227,1,221,1,240,1,251,1,15,2,21,2,41,2,62,2,96,2,100,2,108,2,107,2,100,2,85,2,70,2,45,2,30,2,21,2,14,2,3,2,8,2,244,1,209,1,168,1,136,1,113,1,97,1,77,1,70,1,54,1,42,1,38,1,38,1,40,1,39,1,55,1,69,1,70,1,54,1,66,1,69,1,76,1,88,1,103,1,127,1,138,1,145,1,153,1,176,1,185,1,184,1,184,1,156,1,145,1,142,1,154,1,155,1,174,1,183,1,207,1,222,1,225,1,230,1,239,1,247,1,251,1,5,2,9,2,16,2,255,1,236,1,203,1,178,1,159,1,138,1,113,1,86,1,62,1,46,1,21,1,247,0,218,0,200,0,175,0,140,0,111,0,69,0,56,0,45,0,37,0,35,0,11,0,12,0,0,0,249,255,5,0,248,255,0,0,236,255,240,255,233,255,234,255,234,255,228,255,222,255,230,255,4,0,35,0,65,0,89,0,121,0,145,0,175,0,177,0,189,0,184,0,192,0,200,0,209,0,213,0,220,0,240,0,245,0,0,1,254,0,233,0,227,0,207,0,174,0,156,0,149,0,153,0,184,0,202,0,232,0,241,0,230,0,201,0,188,0,160,0,145,0,128,0,124,0,92,0,91,0,88,0,98,0,116,0,121,0,134,0,125,0,129,0,117,0,118,0,112,0,100,0,108,0,130,0,160,0,180,0,219,0,232,0,244,0,239,0,240,0,237,0,233,0,215,0,205,0,220,0,222,0,235,0,241,0,14,1,59,1,70,1,84,1,61,1,48,1,39,1,28,1,255,0,244,0,224,0,232,0,255,0,14,1,21,1,25,1,24,1,17,1,0,1,255,0,225,0,206,0,166,0,148,0,132,0,125,0,128,0,140,0,152,0,135,0,138,0,146,0,163,0,133,0,108,0,96,0,84,0,72,0,70,0,87,0,121,0,139,0,147,0,137,0,155,0,179,0,233,0,251,0,24,1,13,1,15,1,27,1,49,1,71,1,88,1,100,1,117,1,143,1,158,1,181,1,198,1,203,1,207,1,185,1,190,1,192,1,186,1,188,1,174,1,162,1,157,1,158,1,168,1,154,1,124,1,88,1,41,1,17,1,6,1,242,0,224,0,194,0,153,0,124,0,91,0,91,0,76,0,82,0,55,0,47,0,31,0,36,0,45,0,64,0,69,0,66,0,53,0,66,0,63,0,66,0,84,0,90,0,105,0,115,0,120,0,118,0,128,0,133,0,135,0,140,0,162,0,181,0,213,0,251,0,250,0,6,1,2,1,255,0,226,0,213,0,206,0,195,0,194,0,204,0,218,0,241,0,248,0,18,1,26,1,22,1,240,0,203,0,164,0,142,0,144,0,122,0,97,0,95,0,123,0,145,0,170,0,177,0,178,0,169,0,171,0,183,0,174,0,159,0,136,0,134,0,153,0,174,0,196,0,237,0,19,1,49,1,57,1,76,1,87,1,96,1,124,1,144,1,167,1,197,1,216,1,250,1,20,2,56,2,75,2,95,2,106,2,112,2,114,2,100,2,95,2,91,2,105,2,93,2,90,2,98,2,115,2,121,2,118,2,111,2,100,2,64,2,37,2,8,2,232,1,218,1,196,1,185,1,169,1,148,1,145,1,127,1,133,1,112,1,88,1,62,1,14,1,237,0,199,0,159,0,138,0,137,0,167,0,192,0,182,0,173,0,184,0,175,0,157,0,100,0,58,0,22,0,10,0,255,255,253,255,22,0,28,0,55,0,85,0,104,0,108,0,87,0,69,0,38,0,18,0,16,0,11,0,22,0,38,0,69,0,103,0,156,0,175,0,193,0,209,0,197,0,190,0,170,0,155,0,158,0,160,0,189,0,221,0,253,0,21,1,36,1,46,1,27,1,19,1,238,0,219,0,192,0,186,0,180,0,191,0,200,0,235,0,7,1,21,1,17,1,255,0,237,0,219,0,209,0,191,0,184,0,177,0,189,0,194,0,218,0,243,0,228,0,212,0,175,0,150,0,115,0,89,0,77,0,60,0,59,0,58,0,68,0,78,0,71,0,95,0,113,0,113,0,100,0,68,0,56,0,23,0,24,0,32,0,40,0,55,0,62,0,79,0,96,0,103,0,117,0,135,0,115,0,98,0,69,0,37,0,23,0,255,255,249,255,252,255,18,0,55,0,66,0,71,0,68,0,48,0,38,0,32,0,16,0,37,0,43,0,39,0,51,0,74,0,105,0,120,0,144,0,196,0,224,0,226,0,235,0,228,0,228,0,226,0,237,0,244,0,4,1,29,1,54,1,80,1,92,1,104,1,103,1,83,1,74,1,47,1,28,1,1,1,234,0,221,0,210,0,205,0,203,0,206,0,194,0,195,0,179,0,182,0,177,0,167,0,146,0,151,0,161,0,174,0,186,0,181,0,190,0,211,0,244,0,1,1,5,1,249,0,240,0,218,0,218,0,213,0,229,0,224,0,222,0,220,0,236,0,252,0,6,1,1,1,253,0,240,0,240,0,244,0,246,0,253,0,3,1,239,0,238,0,217,0,200,0,175,0,148,0,145,0,147,0,122,0,112,0,92,0,86,0,77,0,68,0,45,0,12,0,240,255,225,255,194,255,180,255,157,255,150,255,124,255,102,255,96,255,110,255,123,255,124,255,111,255,80,255,65,255,74,255,89,255,98,255,118,255,114,255,133,255,165,255,194,255,216,255,236,255,247,255,20,0,40,0,48,0,43,0,26,0,30,0,35,0,56,0,59,0,71,0,86,0,137,0,166,0,191,0,183,0,177,0,167,0,155,0,154,0,153,0,151,0,178,0,217,0]);fileData0.push.apply(fileData0,[227,0,218,0,206,0,196,0,190,0,197,0,209,0,205,0,193,0,196,0,189,0,177,0,176,0,158,0,142,0,126,0,119,0,124,0,103,0,94,0,98,0,90,0,59,0,54,0,33,0,59,0,40,0,43,0,34,0,22,0,32,0,52,0,64,0,71,0,72,0,82,0,87,0,88,0,113,0,125,0,134,0,123,0,133,0,123,0,119,0,119,0,110,0,131,0,129,0,151,0,173,0,168,0,172,0,176,0,174,0,175,0,164,0,142,0,104,0,98,0,94,0,113,0,125,0,123,0,119,0,99,0,71,0,45,0,37,0,28,0,255,255,242,255,216,255,227,255,216,255,230,255,218,255,223,255,223,255,201,255,211,255,218,255,239,255,238,255,234,255,208,255,202,255,199,255,227,255,246,255,242,255,236,255,242,255,1,0,6,0,14,0,9,0,242,255,228,255,206,255,197,255,189,255,191,255,181,255,186,255,171,255,162,255,169,255,186,255,226,255,1,0,40,0,63,0,78,0,91,0,102,0,121,0,129,0,137,0,146,0,157,0,178,0,185,0,192,0,197,0,213,0,215,0,219,0,187,0,191,0,159,0,140,0,110,0,82,0,70,0,48,0,42,0,26,0,26,0,9,0,253,255,243,255,240,255,228,255,208,255,174,255,162,255,153,255,137,255,139,255,153,255,163,255,177,255,179,255,188,255,199,255,195,255,194,255,161,255,157,255,155,255,153,255,144,255,141,255,156,255,160,255,184,255,189,255,200,255,204,255,196,255,195,255,189,255,192,255,205,255,219,255,223,255,10,0,60,0,110,0,141,0,174,0,203,0,222,0,244,0,248,0,251,0,252,0,249,0,5,1,15,1,32,1,54,1,75,1,75,1,69,1,58,1,51,1,40,1,35,1,27,1,24,1,17,1,8,1,247,0,247,0,235,0,232,0,220,0,200,0,178,0,161,0,142,0,131,0,130,0,119,0,117,0,99,0,81,0,53,0,7,0,223,255,214,255,197,255,177,255,153,255,131,255,127,255,109,255,97,255,96,255,78,255,90,255,97,255,88,255,83,255,82,255,98,255,119,255,127,255,149,255,165,255,185,255,212,255,234,255,7,0,27,0,70,0,98,0,112,0,100,0,125,0,128,0,135,0,138,0,140,0,143,0,158,0,156,0,142,0,142,0,137,0,132,0,118,0,107,0,86,0,80,0,80,0,76,0,82,0,94,0,95,0,100,0,86,0,94,0,99,0,86,0,85,0,83,0,81,0,72,0,67,0,55,0,45,0,43,0,41,0,39,0,49,0,54,0,55,0,25,0,17,0,247,255,244,255,232,255,220,255,211,255,212,255,210,255,223,255,235,255,228,255,218,255,210,255,196,255,196,255,194,255,181,255,178,255,180,255,204,255,225,255,226,255,241,255,252,255,21,0,33,0,39,0,44,0,25,0,14,0,252,255,14,0,18,0,15,0,25,0,34,0,36,0,48,0,37,0,34,0,24,0,28,0,15,0,22,0,14,0,0,0,2,0,7,0,255,255,252,255,242,255,244,255,242,255,227,255,186,255,150,255,112,255,98,255,87,255,84,255,89,255,94,255,68,255,61,255,59,255,45,255,33,255,13,255,3,255,240,254,207,254,195,254,184,254,209,254,217,254,222,254,234,254,247,254,0,255,252,254,25,255,36,255,49,255,48,255,59,255,56,255,73,255,67,255,39,255,15,255,243,254,219,254,189,254,177,254,163,254,171,254,160,254,135,254,119,254,118,254,120,254,118,254,135,254,124,254,113,254,98,254,106,254,110,254,113,254,120,254,129,254,158,254,181,254,217,254,252,254,16,255,45,255,68,255,87,255,96,255,99,255,109,255,114,255,137,255,120,255,138,255,143,255,154,255,146,255,123,255,104,255,95,255,92,255,82,255,95,255,94,255,121,255,113,255,119,255,126,255,138,255,123,255,96,255,94,255,86,255,93,255,82,255,87,255,88,255,92,255,122,255,144,255,168,255,185,255,180,255,192,255,194,255,203,255,192,255,183,255,174,255,166,255,182,255,185,255,174,255,164,255,155,255,143,255,151,255,148,255,154,255,153,255,148,255,136,255,128,255,128,255,125,255,138,255,152,255,144,255,159,255,138,255,139,255,114,255,123,255,114,255,107,255,92,255,86,255,89,255,85,255,74,255,72,255,53,255,35,255,14,255,3,255,3,255,12,255,34,255,32,255,38,255,34,255,38,255,30,255,42,255,45,255,60,255,58,255,70,255,69,255,66,255,68,255,65,255,91,255,97,255,113,255,118,255,132,255,132,255,148,255,135,255,148,255,124,255,132,255,127,255,131,255,156,255,163,255,177,255,181,255,184,255,192,255,190,255,187,255,183,255,163,255,144,255,123,255,113,255,112,255,117,255,125,255,135,255,154,255,146,255,135,255,132,255,124,255,130,255,115,255,104,255,88,255,74,255,67,255,52,255,54,255,44,255,46,255,55,255,56,255,65,255,53,255,48,255,52,255,40,255,40,255,52,255,44,255,49,255,41,255,53,255,74,255,81,255,79,255,79,255,90,255,51,255,36,255,19,255,10,255,27,255,40,255,73,255,71,255,78,255,73,255,97,255,110,255,120,255,113,255,92,255,91,255,88,255,88,255,91,255,92,255,90,255,76,255,78,255,86,255,100,255,101,255,107,255,113,255,88,255,81,255,71,255,87,255,105,255,105,255,113,255,122,255,121,255,130,255,128,255,115,255,112,255,98,255,95,255,75,255,58,255,43,255,27,255,28,255,28,255,30,255,32,255,30,255,16,255,2,255,7,255,3,255,2,255,254,254,12,255,38,255,39,255,51,255,45,255,57,255,67,255,60,255,62,255,61,255,57,255,57,255,64,255,95,255,90,255,123,255,142,255,177,255,205,255,229,255,228,255,231,255,239,255,229,255,228,255,221,255,230,255,249,255,5,0,13,0,13,0,13,0,21,0,29,0,33,0,25,0,23,0,1,0,7,0,255,255,250,255,252,255,12,0,249,255,8,0,240,255,232,255,204,255,184,255,179,255,172,255,175,255,174,255,150,255,169,255,169,255,158,255,145,255,147,255,146,255,150,255,143,255,116,255,126,255,117,255,123,255,115,255,120,255,139,255,155,255,160,255,173,255,177,255,181,255,186,255,201,255,193,255,191,255,191,255,190,255,190,255,194,255,196,255,217,255,243,255,252,255,244,255,1,0,5,0,19,0,44,0,71,0,89,0,110,0,129,0,132,0,133,0,147,0,153,0,158,0,163,0,162,0,174,0,174,0,160,0,139,0,123,0,109,0,83,0,64,0,53,0,42,0,30,0,28,0,8,0,245,255,213,255,186,255,155,255,145,255,122,255,130,255,133,255,141,255,135,255,123,255,128,255,113,255,111,255,104,255,94,255,98,255,117,255,106,255,89,255,87,255,81,255,66,255,52,255,62,255,53,255,55,255,62,255,88,255,115,255,131,255,161,255,185,255,214,255,237,255,2,0,7,0,11,0,12,0,23,0,39,0,56,0,66,0,65,0,82,0,69,0,37,0,22,0,9,0,3,0,7,0,253,255,246,255,229,255,230,255,214,255,199,255,198,255,192,255,201,255,192,255,179,255,175,255,178,255,183,255,190,255,191,255,172,255,161,255,169,255,179,255,184,255,185,255,182,255,190,255,185,255,177,255,172,255,168,255,164,255,179,255,213,255,235,255,248,255,9,0,17,0,34,0,41,0,68,0,83,0,85,0,97,0,108,0,131,0,147,0,149,0,161,0,161,0,162,0,166,0,175,0,181,0,179,0,163,0,144,0,143,0,144,0,133,0,120,0,118,0,118,0,90,0,78,0,57,0,38,0,14,0,9,0,253,255,5,0,3,0,14,0,5,0,0,0,242,255,232,255,213,255,203,255,218,255,216,255,218,255,216,255,207,255,199,255,187,255,185,255,188,255,185,255,197,255,197,255,213,255,211,255,227,255,243,255,242,255,255,255,10,0,25,0,42,0,57,0,69,0,98,0,114,0,111,0,120,0,115,0,102,0,118,0,142,0,180,0,190,0,193,0,186,0,195,0,195,0,208,0,193,0,191,0,174,0,170,0,166,0,169,0,187,0,188,0,175,0,161,0,153,0,135,0,126,0,116,0,113,0,108,0,93,0,86,0,85,0,84,0,78,0,97,0,97,0,89,0,89,0,87,0,96,0,93,0,94,0,90,0,79,0,82,0,73,0,79,0,78,0,91,0,94,0,86,0,89,0,96,0,113,0,96,0,97,0,84,0,85,0,99,0,102,0,97,0,100,0,112,0,131,0,139,0,135,0,142,0,142,0,144,0,148,0,162,0,156,0,164,0,138,0,136,0,142,0,171,0,199,0,196,0,196,0,188,0,157,0,154,0,142,0,137,0,118,0,114,0,105,0,103,0,83,0,85,0,86,0,82,0,89,0,85,0,84,0,72,0,80,0,82,0,94,0,88,0,88,0,92,0,108,0,109,0,109,0,97,0,105,0,96,0,92,0,80,0,72,0,77,0,92,0,119,0,134,0,137,0,136,0,137,0,137,0,143,0,124,0,125,0,118,0,124,0,127,0,132,0,133,0,155,0,151,0,146,0,121,0,112,0,96,0,74,0,72,0,81,0,76,0,78,0,96,0,107,0,108,0,112,0,112,0,114,0,119,0,119,0,117,0,124,0,123,0,133,0,147,0,170,0,181,0,197,0,200,0,201,0,204,0,187,0,183,0,178,0,186,0,192,0,186,0,179,0,186,0,190,0,207,0,220,0,227,0,242,0,252,0,2,1,20,1,18,1,9,1,252,0,245,0,243,0,234,0,228,0,209,0,202,0,192,0,197,0,192,0,185,0,173,0,168,0,154,0,125,0,103,0,82,0,64,0,58,0,74,0,65,0,49,0,41,0,44,0,41,0,52,0,46,0,60,0,81,0,103,0,96,0,92,0,94,0,130,0,157,0,185,0,199,0,202,0,195,0,206,0,204,0,195,0,185,0,199,0,197,0,220,0,231,0,249,0,7,1,250,0,238,0,211,0,192,0,200,0,191,0,188,0,187,0,177,0,181,0,172,0,172,0,176,0,173,0,165,0,156,0,138,0,128,0,156,0,165,0,174,0,178,0,175,0,170,0,157,0,149,0,158,0,153,0,160,0,157,0,147,0,142,0,147,0,159,0,158,0,160,0,158,0,160,0,180,0,200,0,209,0,229,0,232,0,232,0,239,0,249,0,253,0,14,1,31,1,50,1,61,1,79,1,104,1,134,1,136,1,135,1,129,1,135,1,142,1,138,1,155,1,161,1,162,1,169,1,182,1,196,1,185,1,184,1,165,1,151,1,145,1,134,1,116,1,112,1,92,1,82,1,71,1,63,1,55,1,46,1,47,1,34,1,40,1,30,1,20,1,21,1,13,1,10,1,255,0,234,0,222,0,215,0,225,0,222,0,216,0,217,0,213,0,211,0,203,0,202,0,193,0,190,0,200,0,193,0,189,0,175,0,166,0,166,0,175,0,194,0,207,0,240,0,248,0,14,1,28,1,40,1,41,1,71,1,93,1,111,1,108,1,92,1,105,1,97,1,128,1,120,1,111,1,96,1,90,1,96,1,100,1,126,1,140,1,147,1,154,1,156,1,149,1,147,1,130,1,116,1,68,1,51,1,45,1,37,1,38,1,15,1,16,1,255,0,236,0,225,0,205,0,212,0,216,0,204,0,211,0,216,0,232,0,238,0,4,1,3,1,253,0,252,0,18,1,8,1,3,1,236,0,221,0,220,0,227,0,219,0,219,0,228,0,232,0,200,0,196,0,213,0,229,0,219,0,213,0,200,0,194,0,206,0,224,0,240,0,8,1,26,1,21,1,35,1,37,1,47,1,38,1,63,1,76,1,76,1,84,1,97,1,109,1,122,1,125,1,121,1,120,1,137,1,156,1,157,1,152,1,143,1,153,1,158,1,154,1,156,1,147,1,152,1,151,1,140,1,136,1,129,1,134,1,139,1,149,1,162,1,177,1,184,1,190,1,197,1,195,1,194,1,195,1,195,1,191,1,176,1,169,1,162,1,166,1,153,1,149,1,134,1,116,1,129,1,120,1,112,1,115,1,115,1,103,1,77,1,64,1,41,1,31,1,30,1,17,1,22,1,252,0,7,1,255,0,5,1,5,1,0,1,19,1,56,1,88,1,107,1,112,1,131,1,124,1,127,1,156,1,161,1,182,1,184,1,191,1,177,1,180,1,179,1,168,1,169,1,175,1,186,1,174,1,175,1,170,1,164,1,163,1,177,1,185,1,176,1,174,1,166,1,166,1,165,1,170,1,185,1,184,1,180,1,170,1,185,1,166,1,175,1,162,1,160,1,160,1,167,1,160,1,153,1,146,1,166,1,180,1,173,1,180,1,189,1,206,1,195,1,193,1,206,1,216,1,242,1,243,1,232,1,235,1,235,1,0,2,4,2,4,2,3,2,19,2,9,2,6,2,9,2,16,2,11,2,20,2,35,2,37,2,38,2,39,2,41,2,23,2,13,2,6,2,245,1,240,1,244,1,237,1,229,1,217,1,212,1,206,1,200,1,185,1,175,1,163,1,158,1,156,1,158,1,171,1,178,1,183,1,190,1,181,1,175,1,178,1,196,1,197,1,196,1,193,1,190,1,187,1,196,1,197,1,190,1,183,1,196,1,197,1,186,1,170,1,170,1,158,1,165,1,165,1,155,1,151,1,143,1,144,1,152,1,163,1,162,1,149,1,128,1,125,1,138,1,155,1,159,1,157,1,173,1,167,1,178,1,180,1,176,1,183,1,188,1,187,1,177,1,178,1,186,1,181,1,177,1,183,1,173,1,168,1,176,1,156,1,142,1,127,1,110,1,118,1,122,1,125,1,119,1,94,1,86,1,73,1,81,1,85,1,94,1,96,1,105,1,117,1,112,1,97,1,89,1,68,1,56,1,73,1,75,1,68,1,72,1,71,1,71,1,66,1,81,1,97,1,100,1,131,1,139,1,153,1,134,1,120,1,130,1,139,1,168,1,171,1,188,1,164,1,149,1,160,1,167,1,180,1,163,1,151,1,148,1,148,1,162,1,177,1,176,1,163,1,145,1,139,1,133,1,135,1,136,1,110,1,107,1,114,1,120,1,123,1,135,1,124,1,122,1,121,1,125,1,143,1,147,1,152,1,172,1,208,1,217,1,228,1,237,1,242,1,240,1,237,1,245,1,250,1,1,2,9,2,6,2,255,1,5,2,5,2,16,2,16,2,9,2,9,2,4,2,248,1,248,1,235,1,229,1,205,1,199,1,195,1,196,1,204,1,209,1,200,1,192,1,178,1,157,1,154,1,154,1,139,1,140,1,116,1,111,1,103,1,89,1,77,1,69,1,77,1,78,1,98,1,89,1,74,1,71,1,76,1,81,1,106,1,107,1,107,1,116,1,118,1,113,1,130,1,132,1,149,1,156,1,154,1,155,1,177,1,167,1,170,1,152,1,135,1,130,1,147,1,140,1,150,1,175,1,197,1,191,1,182,1,189,1,208,1,228,1,218,1,212,1,195,1,194,1,181,1,163,1,153,1,149,1,135,1,122,1,105,1,64,1,52,1,30,1,0,1,245,0,225,0,238,0,248,0,247,0,238,0,223,0,241,0,253,0,10,1,21,1,2,1,6,1,19,1,18,1,13,1,17,1,18,1,33,1,44,1,33,1,28,1,25,1,24,1,13,1,15,1,15,1,7,1,27,1,22,1,44,1,55,1,68,1,76,1,77,1,74,1,78,1,82,1,97,1,104,1,119,1,99,1,99,1,115,1,120,1,113,1,118,1,117,1,123,1,111,1,115,1,103,1,108,1,110,1,106,1,98,1,78,1,71,1,63,1,51,1,33,1,28,1,16,1,255,0,230,0,230,0,224,0,245,0,246,0,241,0,229,0,227,0,225,0,228,0,234,0,227,0,244,0,255,0,10,1,23,1,9,1,254,0,243,0,7,1,26,1,38,1,43,1,47,1,50,1,57,1,40,1,41,1,39,1,45,1,52,1,52,1,45,1,12,1,2,1,253,0,238,0,237,0,233,0,226,0,220,0,211,0,201,0,187,0,187,0,181,0,192,0,184,0,183,0,158,0,158,0,154,0,174,0,194,0,212,0,220,0,215,0,212,0,225,0,247,0,251,0,246,0,241,0,228,0,235,0,238,0,223,0,232,0,238,0,253,0,251,0,252,0,5,1,11,1,14,1,14,1,15,1,19,1,11,1,6,1,18,1,19,1,22,1,17,1,27,1,31,1,20,1,17,1,16,1,5,1,3,1,251,0,246,0,238,0,218,0,202,0,210,0,202,0,202,0,187,0,171,0,159,0,129,0,116,0,129,0,140,0,145,0,132,0,127,0,139,0,131,0,135,0,128,0,130,0,125,0,130,0,123,0,107,0,105,0,122,0,136,0,153,0,149,0,160,0,159,0,162,0,161,0,158,0,159,0,136,0,136,0,131,0,134,0,160,0,166,0,160,0,148,0,160,0,168,0,178,0,185,0,177,0,178,0,182,0,205,0,208,0,223,0,227,0,229,0,243,0,248,0,243,0,218,0,179,0,181,0,171,0,173,0,169,0,177,0,174,0,179,0,176,0,167,0,167,0,181,0,186,0,177,0,173,0,159,0,144,0,128,0,150,0,158,0,173,0,175,0,173,0,154,0,147,0,161,0,177,0,191,0,181,0,189,0,185,0,182,0,187,0,198,0,209,0,224,0,232,0,249,0,247,0,253,0,5,1,11,1,17,1,17,1,16,1,14,1,14,1,21,1,27,1,39,1,51,1,58,1,67,1,72,1,74,1,67,1,53,1,43,1,42,1,67,1,64,1,58,1,54,1,53,1,49,1,49,1,54,1,37,1,43,1,26,1,32,1,39,1,43,1,46,1,37,1,32,1,33,1,30,1,45,1,60,1,74,1,70,1,50,1,29,1,38,1,26,1,24,1,10,1,6,1,18,1,32,1,14,1,15,1,251,0,243,0,223,0,201,0,197,0,185,0,176,0,177,0,164,0,158,0,162,0,161,0,197,0,221,0,219,0,217,0,227,0,239,0,237,0,236,0,239,0,250,0,241,0,231,0,214,0,222,0,230,0,233,0,226,0,223,0,215,0,220,0,239,0,248,0,255,0,247,0,255,0,7,1,17,1,24,1,6,1,227,0,210,0,232,0,234,0,247,0,234,0,242,0,251,0,2,1,254,0,248,0,245,0,245,0,234,0,243,0,232,0,228,0,224,0,232,0,238,0,239,0,253,0,254,0,241,0,214,0,193,0,182,0,155,0,155,0,142,0,156,0,162,0,158,0,160,0,152,0,158,0,157,0,155,0,154,0,162,0,157,0,154,0,159,0,161,0,139,0,140,0,144,0,173,0,203,0,209,0,224,0,214,0,211,0,193,0,176,0,152,0,144,0,138,0,143,0,150,0,163,0,177,0,191,0,202,0,201,0,193,0,172,0,165,0,176,0,188,0,205,0,214,0,215,0,218,0,216,0,220,0,218,0,214,0,200,0,204,0,215,0,213,0,204,0,185,0,213,0,222,0,206,0,188,0,180,0,173,0,153,0,155,0,155,0,169,0,152,0,128,0,130,0,135,0,163,0,168,0,163,0,160,0,154,0,155,0,159,0,147,0,142,0,128,0,115,0,127,0,123,0,127,0,121,0,122,0,111,0,118,0,104,0,113,0,112,0,119,0,98,0,126,0,117,0,119,0,128,0,130,0,130,0,135,0,137,0,153,0,146,0,139,0,129,0,147,0,170,0,176,0,176,0,160,0,173,0,182,0,183,0,183,0,169,0,162,0,162,0,171,0,190,0,185,0,183,0,165,0,163,0,156,0,144,0,145,0,141,0,126,0,135,0,135,0,144,0,131,0,125,0,122,0,117,0,116,0,107,0,124,0,138,0,144,0,137,0,140,0,139,0,145,0,160,0,173,0,180,0,169,0,160,0,163,0,181,0,195,0,197,0,196,0,178,0,174,0,156,0,149,0,146,0,142,0,143,0,140,0,132,0,132,0,117,0,115,0,104,0,115,0,120,0,137,0,149,0,148,0,173,0,170,0,183,0,201,0,185,0,189,0,185,0,180,0,186,0,188,0,195,0,192,0,196,0,181,0,197,0,193,0,214,0,203,0,213,0,225,0,229,0,220,0,212,0,203,0,210,0,211,0,202,0,194,0,178,0,197,0,193,0,185,0,178,0,183,0,169,0,164,0,170,0,188,0,194,0,192,0,191,0,201,0,214,0,230,0,247,0,249,0,225,0,209,0,206,0,222,0,211,0,223,0,222,0,222,0,216,0,203,0,197,0,183,0,182,0,193,0,193,0,174,0,156,0,135,0,125,0,139,0,149,0,142,0,152,0,146,0,148,0,154,0,158,0,147,0,154,0,149,0,145,0,148,0,143,0,147,0,132,0,135,0,131,0,130,0,112,0,113,0,126,0,132,0,132,0,132,0,131,0,133,0,108,0,89,0,85,0,103,0,113,0,116,0,102,0,99,0,84,0,92,0,93,0,102,0,100,0,96,0,93,0,87,0,111,0,110,0,120,0,115,0,126,0,145,0,135,0,125,0,115,0,126,0,121,0,130,0,117,0,109,0,113,0,105,0,112,0,121,0,121,0,115,0,125,0,123,0,130,0,132,0,156,0,168,0,165,0,154,0,156,0,159,0,160,0,176,0,177,0,181,0,171,0,153,0,162,0,151,0,139,0,146,0,150,0,143,0,121,0,132,0,135,0,128,0,122,0,118,0,111,0,130,0,124,0,130,0,150,0,142,0,145,0,133,0,131,0,136,0,133,0,130,0,122,0,131,0,116,0,117,0,120,0,110,0,98,0,96,0,96,0,97,0,102,0,97,0,96,0,98,0,103,0,98,0,107,0,92,0,102,0,81,0,87,0,78,0,86,0,90,0,94,0,90,0,98,0,94,0,104,0,103,0,104,0,109,0,109,0,113,0,114,0,108,0,104,0,84,0,83,0,72,0,60,0,48,0,48,0,46,0,55,0,68,0,71,0,74,0,84,0,86,0,97,0,110,0,106,0,101,0,94,0,93,0,97,0,101,0,110,0,108,0,108,0,105,0,99,0,96,0,86,0,80,0,74,0,73,0,78,0,101,0,101,0,106,0,122,0,131,0,141,0,148,0,144,0,154,0,150,0,157,0,169,0,181,0,206,0,212,0,199,0,205,0,203,0,202,0,213,0,204,0,196,0,187,0,209,0,209,0,215,0,214,0,211,0,207,0,208,0,214,0,212,0,221,0,224,0,233,0,224,0,232,0,225,0,216,0,206,0,194,0,179,0,180,0,201,0,202,0,196,0,190,0,201,0,187,0,183,0,192,0,190,0,192,0,184,0,190,0,181,0,176,0,181,0,182,0,150,0,133,0,123,0,127,0,120,0,130,0,119,0,114,0,96,0,94,0,95,0,110,0,113,0,120,0,127,0,134,0,122,0,118,0,99,0,111,0,121,0,119,0,126,0,123,0,142,0,127,0,123,0,120,0,140,0,141,0,147,0,135,0,119,0,99,0,101,0,113,0,97,0,97,0,94,0,112,0,107,0,110,0,120,0,120,0,128,0,138,0,126,0,101,0,86,0,83,0,72,0,69,0,63,0,60,0,62,0,78,0,91,0,99,0,88,0,82,0,68,0,67,0,66,0,67,0,68,0,79,0,82,0,98,0,81,0,103,0,138,0,163,0,162,0,133,0,124,0,118,0,112,0,114,0,101,0,80,0,70,0,74,0,78,0,80,0,79,0,79,0,66,0,44,0,44,0,44,0,45,0,47,0,12,0,11,0,247,255,2,0,252,255,245,255,244,255,8,0,6,0,4,0,7,0,9,0,16,0,26,0,32,0,38,0,48,0,56,0,49,0,58,0,44,0,51,0,55,0,58,0,38,0,31,0,52,0,55,0,49,0,31,0,27,0,29,0,50,0,59,0,79,0,80,0,95,0,93,0,86,0,73,0,57,0,39,0,22,0,6,0,3,0,3,0,11,0,8,0,12,0,26,0,14,0,35,0,23,0,20,0,16,0,8,0,6,0,11,0,13,0,10,0,15,0,7,0,17,0,14,0,36,0,37,0,53,0,78,0,74,0,67,0,65,0,42,0,47,0,50,0,71,0,67,0,71,0,75,0,68,0,71,0,61,0,65,0,68,0,67,0,65,0,65,0,55,0,62,0,41,0,30,0,30,0,28,0,28,0,28,0,25,0,20,0,9,0,28,0,49,0,50,0,46,0,48,0,53,0,57,0,54,0,62,0,56,0,65,0,76,0,77,0,71,0,67,0,67,0,76,0,72,0,69,0,48,0,21,0,11,0,20,0,25,0,40,0,35,0,38,0,39,0,59,0,55,0,60,0,46,0,50,0,54,0,47,0,54,0,60,0,73,0,74,0,81,0,89,0,98,0,104,0,123,0,119,0,115,0,127,0,112,0,123,0,120,0,115,0,114,0,104,0,112,0,100,0,94,0,108,0,118,0,115,0,94,0,73,0,63,0,69,0,53,0,69,0,64,0,81,0,81,0,93,0,112,0,120,0,131,0,122,0,125,0,127,0,132,0,125,0,138,0,143,0,146,0,148,0,144,0,148,0,149,0,140,0,141,0,121,0,113,0,102,0,81,0,73,0,59,0,68,0,67,0,56,0,58,0,43,0,52,0,46,0,50,0,61,0,48,0,48,0,25,0,33,0,11,0,3,0,240,255,236,255,232,255,238,255,224,255,225,255,216,255,204,255,205,255,177,255,182,255,177,255,198,255,193,255,201,255,211,255,212,255,226,255,230,255,233,255,224,255,221,255,223,255,225,255,223,255,241,255,235,255,234,255,247,255,250,255,228,255,220,255,214,255,222,255,243,255,252,255,237,255,222,255,209,255,208,255,215,255,224,255,224,255,232,255,247,255,1,0,11,0,11,0,23,0,10,0,5,0,12,0,18,0,12,0,6,0,250,255,232,255,199,255,186,255,179,255,185,255,185,255,190,255,182,255,188,255,192,255,177,255,171,255,178,255,193,255,206,255,209,255,213,255,204,255,205,255,210,255,218,255,229,255,236,255,248,255,255,255,18,0,7,0,0,0,244,255,225,255,230,255,237,255,240,255,246,255,7,0,13,0,14,0,8,0,15,0,9,0,21,0,6,0,254,255,234,255,224,255,226,255,232,255,247,255,247,255,240,255,244,255,242,255,253,255,2,0,15,0,12,0,3,0,7,0,254,255,11,0,13,0,14,0,3,0,252,255,248,255,244,255,3,0,255,255,4,0,247,255,239,255,219,255,229,255,235,255,236,255,236,255,215,255,214,255,224,255,231,255,233,255,238,255,218,255,201,255,202,255,209,255,210,255,196,255,190,255,187,255,200,255,196,255,214,255,218,255,216,255,198,255,187,255,199,255,202,255,206,255,188,255,187,255,167,255,155,255,158,255,170,255,160,255,162,255,174,255,178,255,194,255,200,255,210,255,215,255,234,255,242,255,217,255,202,255,196,255,192,255,195,255,181,255,181,255,183,255,184,255,171,255,180,255,183,255,193,255,201,255,212,255,215,255,223,255,210,255,200,255,195,255,188,255,193,255,187,255,192,255,182,255,180,255,157,255,154,255,163,255,174,255,176,255,166,255,153,255,135,255,144,255,153,255,149,255,138,255,125,255,125,255,123,255,132,255,132,255,129,255,154,255,158,255,165,255,157,255,161,255,155,255,135,255,144,255,140,255,121,255,99,255,94,255,103,255,109,255,109,255,109,255,111,255,130,255,120,255,105,255,88,255,81,255,85,255,91,255,75,255,79,255,67,255,51,255,40,255,29,255,31,255,26,255,36,255,19,255,21,255,10,255,3,255,245,254,252,254,253,254,15,255,23,255,45,255,34,255,25,255,15,255,16,255,30,255,53,255,47,255,26,255,15,255,19,255,36,255,41,255,28,255,35,255,33,255,30,255,7,255,2,255,2,255,9,255,19,255,14,255,23,255,38,255,58,255,53,255,44,255,28,255,31,255,38,255,57,255,49,255,33,255,22,255,10,255,21,255,53,255,68,255,52,255,35,255,32,255,33,255,24,255,31,255,41,255,55,255,64,255,82,255,69,255,74,255,69,255,81,255,61,255,57,255,32,255,21,255,11,255,20,255,27,255,23,255,31,255,31,255,53,255,37,255,37,255,27,255,30,255,21,255,25,255,30,255,20,255,9,255,252,254,3,255,249,254,226,254,225,254,232,254,241,254,226,254,221,254,214,254,200,254,190,254,192,254,203,254,215,254,227,254,234,254,240,254,10,255,25,255,33,255,20,255,28,255,43,255,39,255,33,255,31,255,15,255,11,255,22,255,28,255,10,255,253,254,251,254,246,254,250,254,2,255,249,254,229,254,215,254,228,254,244,254,249,254,234,254,4,255,12,255,17,255,18,255,10,255,6,255,248,254,250,254,245,254,246,254,230,254,202,254,186,254,191,254,177,254,165,254,156,254,163,254,170,254,160,254,158,254,137,254,119,254,133,254,136,254,124,254,126,254,121,254,117,254,102,254,105,254,108,254,116,254,79,254,68,254,65,254,92,254,98,254,91,254,110,254,117,254,128,254,127,254,140,254,144,254,142,254,134,254,140,254,144,254,145,254,149,254,142,254,150,254,160,254,160,254,155,254,162,254,156,254,159,254,170,254,176,254,162,254,135,254,143,254,155,254,170,254,167,254,149,254,143,254,149,254,150,254,145,254,128,254,129,254,131,254,148,254,135,254,131,254,108,254,100,254,105,254,111,254,118,254,124,254,135,254,148,254,158,254,155,254,158,254,158,254,164,254,174,254,181,254,188,254,193,254,179,254,165,254,169,254,153,254,147,254,137,254,149,254,163,254,157,254,142,254,144,254,137,254,139,254,147,254,146,254,142,254,135,254,152,254,150,254,143,254,129,254,143,254,130,254,142,254,133,254,137,254,123,254,128,254,149,254,154,254,158,254,146,254,134,254,125,254,123,254,119,254,128,254,130,254,136,254,132,254,117,254,114,254,109,254,103,254,110,254,118,254,124,254,101,254,81,254,85,254,84,254,88,254,91,254,92,254,87,254,80,254,73,254,49,254,48,254,36,254,52,254,39,254,45,254,36,254,46,254,44,254,46,254,36,254,46,254,68,254,63,254,53,254,60,254,66,254,99,254,107,254,112,254,122,254,125,254,124,254,118,254,138,254,122,254,121,254,134,254,144,254,150,254,148,254,137,254,147,254,156,254,148,254,144,254,137,254,131,254,117,254,100,254,91,254,90,254,74,254,96,254,99,254,104,254,86,254,71,254,70,254,69,254,101,254,123,254,140,254,127,254,117,254,107,254,125,254,135,254,141,254,139,254,142,254,142,254,132,254,121,254,106,254,94,254,86,254,74,254,68,254,63,254,78,254,83,254,74,254,82,254,78,254,79,254,76,254,74,254,94,254,95,254,114,254,125,254,143,254,133,254,144,254,123,254,114,254,127,254,145,254,159,254,169,254,172,254,157,254,155,254,144,254,115,254,99,254,93,254,108,254,106,254,101,254,98,254,97,254,100,254,125,254,128,254,129,254,120,254,106,254,122,254,124,254,126,254,120,254,113,254,115,254,124,254,114,254,102,254,98,254,90,254,81,254,93,254,81,254,70,254,77,254,103,254,120,254,121,254,119,254,121,254,127,254,119,254,131,254,131,254,135,254,148,254,133,254,129,254,124,254,108,254,109,254,125,254,137,254,142,254,126,254,116,254,110,254,104,254,111,254,121,254,138,254,144,254,131,254,123,254,124,254,112,254,127,254,146,254,152,254,142,254,124,254,112,254,109,254,99,254,93,254,94,254,84,254,90,254,64,254,76,254,69,254,65,254,80,254,102,254,126,254,128,254,133,254,135,254,136,254,140,254,143,254,130,254,147,254,166,254,163,254,148,254,144,254,151,254,157,254,163,254,166,254,175,254,174,254,182,254,170,254,134,254,119,254,128,254,135,254,134,254,135,254,140,254,127,254,144,254,147,254,138,254,118,254,120,254,109,254,107,254,107,254,119,254,108,254,90,254,72,254,71,254,84,254,92,254,87,254,101,254,105,254,115,254,119,254,134,254,123,254,113,254,92,254,81,254,79,254,80,254,76,254,87,254,92,254,116,254,120,254,106,254,101,254,106,254,109,254,107,254,88,254,94,254,96,254,99,254,101,254,90,254,103,254,114,254,140,254,151,254,161,254,142,254,142,254,140,254,156,254,156,254,162,254,156,254,137,254,129,254,118,254,130,254,132,254,145,254,150,254,161,254,169,254,176,254,198,254,193,254,188,254,176,254,174,254,162,254,163,254,164,254,182,254,158,254,159,254,171,254,150,254,142,254,152,254,145,254,150,254,143,254,134,254,127,254,130,254,137,254,152,254,159,254,164,254,167,254,185,254,185,254,178,254,171,254,149,254,139,254,128,254,144,254,152,254,167,254,172,254,201,254,220,254,232,254,236,254,230,254,242,254,247,254,242,254,236,254,225,254,244,254,223,254,226,254,229,254,243,254,238,254,251,254,248,254,245,254,252,254,24,255,27,255,36,255,37,255,19,255,13,255,0,255,4,255,8,255,11,255,1,255,8,255,8,255,29,255,31,255,44,255,39,255,33,255,29,255,26,255,23,255,7,255,10,255,9,255,23,255,22,255,6,255,6,255,18,255,12,255,10,255,1,255,10,255,0,255,2,255,237,254,225,254,228,254,228,254,235,254,239,254,245,254,251,254,252,254,1,255,20,255,28,255,44,255,36,255,43,255,42,255,50,255,68,255,68,255,72,255,83,255,88,255,92,255,96,255,93,255,104,255,99,255,87,255,74,255,64,255,70,255,87,255,92,255,76,255,80,255,77,255,74,255,73,255,60,255,66,255,81,255,73,255,56,255,46,255,36,255,36,255,33,255,43,255,45,255,55,255,64,255,69,255,67,255,58,255,59,255,55,255,55,255,51,255,46,255,28,255,21,255,24,255,24,255,40,255,47,255,47,255,27,255,7,255,245,254,2,255,23,255,35,255,41,255,54,255,74,255,85,255,94,255,84,255,83,255,96,255,99,255,112,255,107,255,128,255,125,255,128,255,126,255,130,255,137,255,136,255,150,255,165,255,177,255,182,255,165,255,176,255,179,255,195,255,193,255,190,255,173,255,176,255,185,255,193,255,176,255,156,255,124,255,126,255,120,255,126,255,109,255,99,255,80,255,79,255,71,255,79,255,81,255,78,255,81,255,95,255,101,255,122,255,116,255,119,255,126,255,119,255,113,255,95,255,84,255,102,255,121,255,132,255,145,255,143,255,168,255,184,255,182,255,194,255,194,255,205,255,196,255,194,255,192,255,188,255,179,255,179,255,194,255,204,255,210,255,192,255,191,255,189,255,205,255,201,255,199,255,202,255,206,255,217,255,229,255,234,255,229,255,241,255,240,255,237,255,230,255,221,255,228,255,232,255,232,255,241,255,245,255,255,255,3,0,250,255,249,255,253,255,11,0,17,0,4,0,250,255,231,255,245,255,250,255,6,0,9,0,9,0,4,0,2,0,248,255,237,255,241,255,250,255,250,255,240,255,248,255,232,255,244,255,236,255,239,255,245,255,254,255,11,0,11,0,38,0,33,0,43,0,33,0,28,0,34,0,35,0,46,0,26,0,15,0,0,0,2,0,18,0,16,0,18,0,18,0,32,0,43,0,43,0,54,0,65,0,78,0,84,0,79,0,76,0,103,0,120,0,122,0,104,0,96,0,97,0,76,0,65,0,54,0,43,0,46,0,59,0,48,0,49,0,28,0,48,0,65,0,89,0,89,0,96,0,85,0,81,0,61,0,64,0,59,0,66,0,62,0,61,0,62,0,52,0,52,0,48,0,49,0,33,0,22,0,33,0,27,0,31,0,45,0,53,0,74,0,73,0,80,0,107,0,124,0,121,0,123,0,120,0,111,0,113,0,107,0,119,0,114,0,97,0,88,0,82,0,97,0,102,0,122,0,125,0,113,0,120,0,123,0,132,0,134,0,148,0,146,0,147,0,144,0,131,0,131,0,127,0,126,0,112,0,116,0,132,0,140,0,131,0,123,0,117,0,115,0,97,0,91,0,92,0,90,0,76,0,79,0,77,0,86,0,66,0,57,0,52,0,69,0,70,0,83,0,83,0,102,0,112,0,122,0,130,0,118,0,143,0,154,0,167,0,169,0,175,0,178,0,177,0,172,0,160,0,161,0,163,0,155,0,143,0,145,0,156,0,167,0,169,0,175,0,158,0,158,0,144,0,124,0,96,0,82,0,75,0,62,0,65,0,56,0,56,0,55,0,49,0,62,0,60,0,77,0,93,0,93,0,82,0,70,0,73,0,82,0,84,0,89,0,91,0,101,0,82,0,84,0,75,0,80,0,75,0,80,0,81,0,96,0,83,0,86,0,84,0,86,0,99,0,115,0,119,0,126,0,133,0,142,0,148,0,143,0,157,0,165,0,166,0,155,0,153,0,145,0,145,0,142,0,158,0,128,0,106,0,107,0,124,0,138,0,131,0,126,0,117,0,125,0,114,0,116,0,104,0,88,0,84,0,77,0,67,0,75,0,75,0,76,0,71,0,52,0,48,0,49,0,57,0,74,0,78,0,97,0,107,0,103,0,124,0,135,0,148,0,169,0,174,0,181,0,184,0,169,0,165,0,155,0,174,0,170,0,162,0,145,0,126,0,121,0,130,0,141,0,149,0,149,0,141,0,139,0,131,0,149,0,151,0,159,0,159,0,158,0,172,0,167,0,170,0,158,0,167,0,150,0,152,0,147,0,155,0,161,0,161,0,161,0,171,0,179,0,188,0,197,0,198,0,176,0,164,0,150,0,163,0,149,0,136,0,131,0,137,0,135,0,138,0,141,0,124,0,121,0,116,0,97,0,95,0,94,0,96,0,96,0,98,0,87,0,91,0,90,0,90,0,109,0,118,0,130,0,140,0,125,0,101,0,106,0,118,0,140,0,146,0,152,0,159,0,165,0,165,0,163,0,174,0,194,0,220,0,225,0,207,0,214,0,219,0,245,0,6,1,8,1,2,1,236,0,241,0,0,1,11,1,9,1,9,1,255,0,246,0,248,0,236,0,222,0,216,0,204,0,213,0,211,0,208,0,195,0,202,0,207,0,234,0,242,0,248,0,247,0,243,0,224,0,225,0,228,0,228,0,223,0,220,0,226,0,227,0,233,0,235,0,232,0,239,0,234,0,224,0,213,0,180,0,167,0,142,0,137,0,120,0,112,0,102,0,98,0,95,0,94,0,95,0,103,0,107,0,122,0,115,0,118,0,110,0,98,0,92,0,98,0,110,0,111,0,115,0,104,0,99,0,98,0,95,0,86,0,89,0,95,0,115,0,123,0,139,0,148,0,152,0,162,0,144,0,152,0,152,0,153,0,155,0,172,0,172,0,182,0,186,0,187,0,174,0,178,0,168,0,161,0,136,0,133,0,126,0,137,0,144,0,147,0,159,0,167,0,173,0,184,0,185,0,198,0,208,0,212,0,197,0,180,0,184,0,178,0,179,0,185,0,168,0,192,0,182,0,190,0,189,0,206,0,198,0,206,0,180,0,178,0,147,0,144,0,149,0,151,0,155,0,137,0,133,0,127,0,138,0,125,0,129,0,128,0,120,0,131,0,134,0,144,0,129,0,119,0,123,0,111,0,113,0,117,0,119,0,111,0,103,0,93,0,92,0,102,0,119,0,122,0,117,0,119,0,122,0,118,0,127,0,100,0,114,0,114,0,123,0,129,0,132,0,117,0,117,0,106,0,114,0,113,0,102,0,113,0,108,0,109,0,105,0,115,0,103,0,99,0,97,0,88,0,97,0,96,0,97,0,92,0,87,0,75,0,73,0,70,0,46,0,47,0,42,0,53,0,55,0,64,0,54,0,50,0,56,0,69,0,58,0,53,0,59,0,74,0,80,0,95,0,95,0,106,0,118,0,123,0,124,0,109,0,112,0,104,0,111,0,115,0,120,0,114,0,104,0,101,0,101,0,86,0,92,0,100,0,119,0,112,0,127,0,136,0,166,0,171,0,171,0,157,0,155,0,157,0,159,0,153,0,132,0,116,0,97,0,91,0,91,0,90,0,93,0,80,0,62,0,62,0,67,0,64,0,58,0,70,0,89,0,91,0,109,0,109,0,98,0,90,0,92,0,91,0,84,0,84,0,82,0,88,0,91,0,99,0,112,0,103,0,101,0,99,0,84,0,98,0,109,0,103,0,97,0,88,0,98,0,107,0,88,0,82,0,74,0,66,0,62,0,51,0,56,0,74,0,85,0,94,0,81,0,79,0,76,0,74,0,64,0,61,0,39,0,32,0,34,0,21,0,18,0,28,0,33,0,28,0,30,0,40,0,54,0,71,0,83,0,75,0,89,0,96,0,105,0,109,0,122,0,112,0,116,0,109,0,127,0,127,0,152,0,164,0,171,0,172,0,157,0,164,0,152,0,144,0,153,0,164,0,168,0,166,0,157,0,149,0,138,0,124,0,119,0,112,0,96,0,73,0,67,0,63,0,59,0,43,0,45,0,50,0,54,0,63,0,47,0,27,0,32,0,46,0,56,0,52,0,50,0,38,0,35,0,18,0,5,0,10,0,12,0,27,0,22,0,26,0,23,0,21,0,9,0,9,0,17,0,42,0,37,0,42,0,40,0,47,0,59,0,57,0,58,0,37,0,41,0,22,0,12,0,35,0,34,0,31,0,22,0,36,0,45,0,49,0,52,0,42,0,49,0,51,0,54,0,39,0,29,0,22,0,6,0,245,255,240,255,248,255,249,255,5,0,7,0,12,0,20,0,28,0,43,0,53,0,50,0,51,0,48,0,50,0,26,0,12,0,247,255,238,255,230,255,233,255,221,255,211,255,191,255,197,255,199,255,203,255,196,255,209,255,212,255,214,255,212,255,218,255,228,255,219,255,217,255,212,255,216,255,225,255,236,255,228,255,228,255,240,255,244,255,240,255,234,255,223,255,211,255,223,255,232,255,242,255,240,255,240,255,229,255,236,255,236,255,234,255,246,255,242,255,253,255,252,255,250,255,233,255,227,255,222,255,239,255,239,255,227,255,222,255,222,255,246,255,237,255,242,255,236,255,237,255,244,255,236,255,236,255,230,255,228,255,227,255,233,255,223,255,231,255,234,255,237,255,245,255,254,255,12,0,36,0,31,0,45,0,40,0,30,0,21,0,19,0,11,0,1,0,4,0,252,255,249,255,249,255,247,255,234,255,227,255,230,255,227,255,243,255,241,255,232,255,234,255,214,255,219,255,215,255,234,255,243,255,240,255,251,255,3,0,8,0,16,0,0,0,3,0,13,0,13,0,17,0,1,0,234,255,229,255,228,255,225,255,218,255,224,255,213,255,231,255,225,255,218,255,223,255,234,255,234,255,235,255,234,255,227,255,230,255,232,255,230,255,236,255,216,255,217,255,218,255,211,255,197,255,197,255,182,255,184,255,172,255,171,255,166,255,170,255,164,255,128,255,117,255,98,255,107,255,111,255,120,255,141,255,143,255,150,255,151,255,169,255,202,255,206,255,197,255,181,255,177,255,172,255,193,255,214,255,215,255,225,255,208,255,207,255,193,255,194,255,196,255,199,255,183,255,196,255,194,255,192,255,191,255,195,255,201,255,206,255,199,255,212,255,214,255,226,255,230,255,213,255,210,255,216,255,236,255,227,255,240,255,228,255,223,255,225,255,225,255,233,255,239,255,218,255,210,255,199,255,206,255,205,255,218,255,205,255,183,255,173,255,164,255,155,255,137,255,138,255,136,255,143,255,141,255,147,255,145,255,152,255,153,255,153,255,165,255,168,255,169,255,165,255,183,255,181,255,182,255,177,255,182,255,204,255,207,255,217,255,234,255,241,255,1,0,0,0,0,0,251,255,250,255,231,255,236,255,242,255,246,255,237,255,251,255,243,255,246,255,232,255,220,255,206,255,206,255,211,255,205,255,201,255,188,255,190,255,175,255,172,255,177,255,177,255,173,255,154,255,153,255,140,255,148,255,141,255,140,255,142,255,149,255,164,255,186,255,187,255,201,255,190,255,203,255,196,255,190,255,187,255,197,255,206,255,207,255,211,255,227,255,221,255,226,255,207,255,200,255,171,255,145,255,140,255,143,255,161,255,160,255,165,255,165,255,175,255,192,255,198,255,200,255,196,255,209,255,210,255,209,255,201,255,195,255,201,255,198,255,208,255,214,255,215,255,218,255,231,255,231,255,239,255,246,255,241,255,251,255,246,255,244,255,248,255,237,255,222,255,203,255,198,255,198,255,196,255,195,255,199,255,202,255,202,255,204,255,207,255,208,255,200,255,200,255,193,255,205,255,191,255,182,255,157,255,135,255,132,255,130,255,114,255,115,255,108,255,109,255,130,255,126,255,135,255,136,255,129,255,127,255,128,255,131,255,145,255,150,255,149,255,144,255,159,255,164,255,154,255,153,255,143,255,125,255,99,255,93,255,92,255,98,255,101,255,104,255,84,255,87,255,101,255,86,255,93,255,102,255,106,255,116,255,129,255,113,255,115,255,109,255,106,255,122,255,117,255,128,255,137,255,148,255,155,255,154,255,149,255,128,255,123,255,119,255,122,255,134,255,152,255,165,255,161,255,151,255,151,255,164,255,175,255,186,255,188,255,203,255,191,255,185,255,174,255,192,255,188,255,182,255,166,255,160,255,148,255,129,255,128,255,132,255,141,255,140,255,141,255,113,255,119,255,108,255,131,255,141,255,149,255,137,255,131,255,130,255,141,255,144,255,151,255,162,255,176,255,189,255,193,255,220,255,233,255,243,255,251,255,2,0,239,255,246,255,230,255,233,255,230,255,218,255,206,255,212,255,201,255,213,255,193,255,187,255,184,255,176,255,168,255,158,255,178,255,197,255,194,255,188,255,199,255,215,255,232,255,237,255,236,255,242,255,253,255]);fileData0.push.apply(fileData0,[245,255,243,255,217,255,224,255,216,255,235,255,242,255,243,255,235,255,229,255,239,255,217,255,223,255,235,255,234,255,254,255,251,255,23,0,16,0,29,0,28,0,34,0,38,0,30,0,33,0,34,0,52,0,60,0,66,0,55,0,46,0,27,0,31,0,36,0,38,0,40,0,29,0,19,0,30,0,34,0,33,0,32,0,37,0,44,0,45,0,32,0,15,0,7,0,0,0,8,0,10,0,1,0,3,0,249,255,240,255,211,255,207,255,213,255,218,255,224,255,216,255,219,255,224,255,220,255,227,255,224,255,232,255,241,255,242,255,232,255,0,0,12,0,23,0,1,0,3,0,249,255,239,255,237,255,222,255,203,255,192,255,183,255,192,255,176,255,179,255,166,255,163,255,165,255,157,255,167,255,154,255,159,255,158,255,142,255,164,255,172,255,163,255,152,255,149,255,157,255,170,255,163,255,178,255,176,255,184,255,181,255,206,255,237,255,236,255,229,255,223,255,251,255,18,0,26,0,30,0,48,0,39,0,42,0,47,0,37,0,41,0,31,0,32,0,27,0,22,0,21,0,8,0,5,0,253,255,0,0,244,255,251,255,4,0,4,0,4,0,245,255,242,255,241,255,255,255,250,255,238,255,237,255,230,255,220,255,215,255,191,255,182,255,168,255,179,255,184,255,177,255,156,255,155,255,148,255,139,255,136,255,147,255,141,255,158,255,155,255,152,255,148,255,158,255,157,255,161,255,165,255,175,255,164,255,152,255,154,255,149,255,166,255,163,255,174,255,177,255,188,255,179,255,194,255,205,255,225,255,231,255,224,255,211,255,197,255,205,255,208,255,213,255,194,255,214,255,212,255,233,255,223,255,211,255,214,255,224,255,233,255,230,255,232,255,231,255,233,255,229,255,236,255,245,255,0,0,246,255,245,255,239,255,221,255,229,255,228,255,220,255,202,255,198,255,196,255,205,255,207,255,201,255,191,255,193,255,202,255,196,255,200,255,212,255,221,255,214,255,202,255,200,255,181,255,171,255,167,255,167,255,180,255,186,255,186,255,165,255,158,255,159,255,169,255,155,255,164,255,146,255,143,255,147,255,150,255,167,255,179,255,196,255,175,255,179,255,165,255,178,255,160,255,167,255,180,255,179,255,178,255,168,255,147,255,142,255,139,255,140,255,141,255,136,255,135,255,137,255,137,255,125,255,128,255,145,255,146,255,148,255,143,255,145,255,153,255,170,255,172,255,169,255,158,255,157,255,154,255,159,255,159,255,176,255,173,255,175,255,153,255,149,255,152,255,147,255,156,255,155,255,150,255,133,255,135,255,139,255,154,255,167,255,171,255,186,255,197,255,204,255,221,255,221,255,226,255,220,255,206,255,218,255,226,255,224,255,223,255,218,255,223,255,232,255,240,255,222,255,228,255,229,255,228,255,221,255,214,255,214,255,216,255,216,255,215,255,209,255,184,255,186,255,184,255,195,255,190,255,180,255,187,255,199,255,199,255,205,255,202,255,210,255,213,255,214,255,219,255,227,255,217,255,211,255,211,255,220,255,225,255,220,255,220,255,215,255,229,255,234,255,238,255,242,255,237,255,242,255,241,255,235,255,235,255,233,255,227,255,219,255,202,255,204,255,202,255,205,255,209,255,200,255,200,255,216,255,221,255,232,255,232,255,237,255,233,255,225,255,235,255,242,255,254,255,13,0,20,0,29,0,19,0,13,0,6,0,8,0,14,0,25,0,30,0,42,0,48,0,50,0,61,0,65,0,59,0,50,0,62,0,75,0,78,0,83,0,82,0,91,0,72,0,61,0,49,0,52,0,62,0,58,0,59,0,52,0,54,0,55,0,57,0,51,0,50,0,57,0,64,0,66,0,81,0,67,0,92,0,112,0,133,0,146,0,144,0,134,0,120,0,128,0,100,0,88,0,68,0,63,0,69,0,78,0,66,0,70,0,59,0,56,0,38,0,28,0,17,0,22,0,18,0,13,0,4,0,245,255,234,255,237,255,221,255,207,255,202,255,198,255,201,255,192,255,210,255,217,255,219,255,218,255,211,255,209,255,204,255,217,255,227,255,252,255,3,0,249,255,238,255,238,255,8,0,22,0,35,0,52,0,66,0,85,0,101,0,114,0,126,0,137,0,146,0,158,0,163,0,151,0,133,0,103,0,106,0,129,0,142,0,132,0,116,0,120,0,129,0,133,0,123,0,118,0,101,0,93,0,106,0,122,0,129,0,116,0,107,0,108,0,111,0,132,0,123,0,121,0,121,0,141,0,167,0,165,0,169,0,174,0,166,0,169,0,163,0,182,0,205,0,204,0,203,0,195,0,183,0,183,0,180,0,159,0,151,0,161,0,165,0,154,0,153,0,164,0,171,0,178,0,152,0,135,0,129,0,134,0,138,0,142,0,144,0,132,0,128,0,126,0,128,0,133,0,142,0,143,0,122,0,134,0,117,0,124,0,122,0,120,0,135,0,130,0,132,0,138,0,135,0,129,0,123,0,115,0,110,0,109,0,105,0,99,0,93,0,105,0,118,0,141,0,144,0,142,0,148,0,169,0,183,0,186,0,194,0,201,0,208,0,216,0,208,0,206,0,216,0,218,0,215,0,228,0,234,0,227,0,226,0,217,0,213,0,193,0,186,0,188,0,188,0,174,0,159,0,144,0,141,0,137,0,113,0,114,0,121,0,122,0,108,0,94,0,86,0,84,0,84,0,97,0,106,0,109,0,113,0,119,0,118,0,136,0,139,0,147,0,147,0,173,0,189,0,211,0,210,0,213,0,215,0,216,0,231,0,217,0,212,0,206,0,205,0,211,0,205,0,205,0,213,0,215,0,221,0,226,0,221,0,222,0,235,0,241,0,254,0,248,0,252,0,237,0,244,0,247,0,10,1,11,1,15,1,14,1,14,1,3,1,255,0,0,1,248,0,246,0,234,0,229,0,234,0,236,0,228,0,230,0,235,0,243,0,254,0,3,1,9,1,14,1,20,1,10,1,14,1,28,1,32,1,18,1,19,1,23,1,34,1,37,1,42,1,49,1,55,1,45,1,36,1,31,1,33,1,46,1,46,1,37,1,45,1,51,1,63,1,68,1,76,1,83,1,89,1,75,1,64,1,77,1,86,1,86,1,86,1,82,1,80,1,77,1,77,1,69,1,60,1,61,1,65,1,65,1,69,1,92,1,79,1,71,1,67,1,52,1,50,1,41,1,43,1,50,1,48,1,43,1,51,1,67,1,81,1,91,1,89,1,92,1,92,1,86,1,94,1,98,1,98,1,106,1,105,1,103,1,103,1,86,1,88,1,85,1,76,1,56,1,44,1,43,1,49,1,43,1,47,1,52,1,65,1,69,1,53,1,40,1,30,1,50,1,61,1,51,1,25,1,23,1,15,1,17,1,33,1,42,1,70,1,46,1,46,1,32,1,47,1,51,1,61,1,57,1,53,1,29,1,22,1,20,1,29,1,34,1,45,1,42,1,47,1,36,1,43,1,51,1,96,1,89,1,105,1,97,1,109,1,117,1,114,1,126,1,119,1,127,1,140,1,154,1,162,1,162,1,159,1,160,1,151,1,163,1,168,1,168,1,173,1,181,1,177,1,155,1,144,1,149,1,155,1,143,1,157,1,158,1,148,1,159,1,137,1,133,1,129,1,132,1,128,1,111,1,100,1,110,1,110,1,102,1,119,1,121,1,134,1,122,1,111,1,103,1,112,1,124,1,159,1,161,1,173,1,163,1,170,1,160,1,156,1,144,1,128,1,126,1,132,1,120,1,121,1,129,1,129,1,137,1,122,1,125,1,131,1,149,1,148,1,132,1,130,1,135,1,131,1,126,1,128,1,136,1,152,1,150,1,146,1,136,1,156,1,144,1,146,1,131,1,147,1,174,1,175,1,173,1,163,1,163,1,171,1,180,1,160,1,166,1,151,1,155,1,160,1,165,1,172,1,170,1,158,1,165,1,153,1,166,1,156,1,147,1,129,1,131,1,141,1,126,1,127,1,113,1,122,1,124,1,128,1,137,1,155,1,160,1,151,1,157,1,172,1,183,1,173,1,168,1,172,1,183,1,189,1,196,1,200,1,204,1,233,1,248,1,228,1,215,1,198,1,202,1,209,1,236,1,252,1,244,1,236,1,244,1,245,1,239,1,246,1,5,2,1,2,20,2,22,2,12,2,18,2,23,2,27,2,35,2,30,2,23,2,10,2,10,2,13,2,23,2,16,2,2,2,252,1,252,1,236,1,233,1,241,1,238,1,243,1,237,1,242,1,240,1,241,1,225,1,228,1,229,1,231,1,235,1,234,1,242,1,240,1,231,1,239,1,237,1,238,1,238,1,243,1,237,1,235,1,1,2,2,2,5,2,0,2,245,1,240,1,240,1,246,1,239,1,235,1,246,1,11,2,17,2,5,2,5,2,9,2,13,2,5,2,247,1,250,1,248,1,2,2,254,1,249,1,11,2,17,2,27,2,28,2,43,2,48,2,42,2,48,2,45,2,47,2,36,2,33,2,16,2,21,2,11,2,6,2,13,2,14,2,11,2,11,2,15,2,20,2,29,2,38,2,41,2,18,2,242,1,237,1,248,1,248,1,248,1,238,1,244,1,3,2,8,2,7,2,6,2,252,1,249,1,1,2,2,2,8,2,15,2,30,2,41,2,60,2,65,2,81,2,70,2,47,2,46,2,48,2,73,2,100,2,122,2,122,2,119,2,118,2,129,2,127,2,120,2,98,2,104,2,107,2,130,2,130,2,118,2,122,2,127,2,121,2,108,2,94,2,78,2,71,2,40,2,45,2,38,2,67,2,63,2,90,2,83,2,89,2,69,2,77,2,65,2,64,2,38,2,55,2,52,2,66,2,63,2,47,2,49,2,48,2,36,2,37,2,39,2,41,2,52,2,50,2,42,2,44,2,46,2,58,2,59,2,48,2,46,2,15,2,20,2,47,2,59,2,63,2,61,2,79,2,92,2,90,2,100,2,92,2,101,2,89,2,104,2,111,2,128,2,145,2,157,2,163,2,160,2,165,2,152,2,156,2,164,2,162,2,171,2,152,2,145,2,121,2,121,2,121,2,112,2,125,2,127,2,116,2,112,2,128,2,147,2,138,2,113,2,106,2,103,2,108,2,110,2,103,2,89,2,95,2,104,2,97,2,112,2,99,2,99,2,92,2,97,2,98,2,94,2,105,2,105,2,124,2,117,2,122,2,114,2,107,2,116,2,114,2,120,2,122,2,112,2,114,2,103,2,96,2,129,2,119,2,116,2,97,2,96,2,90,2,90,2,95,2,76,2,57,2,55,2,48,2,62,2,52,2,64,2,81,2,105,2,99,2,88,2,75,2,95,2,96,2,94,2,89,2,106,2,103,2,106,2,96,2,71,2,66,2,80,2,83,2,77,2,54,2,67,2,77,2,76,2,76,2,75,2,88,2,100,2,112,2,91,2,84,2,87,2,89,2,89,2,86,2,87,2,98,2,112,2,110,2,97,2,100,2,111,2,116,2,132,2,145,2,139,2,135,2,139,2,139,2,159,2,163,2,170,2,167,2,153,2,156,2,141,2,142,2,134,2,145,2,143,2,142,2,146,2,147,2,166,2,167,2,184,2,203,2,205,2,222,2,214,2,204,2,193,2,199,2,227,2,230,2,210,2,211,2,209,2,219,2,219,2,206,2,218,2,211,2,195,2,188,2,195,2,193,2,174,2,162,2,148,2,144,2,141,2,153,2,141,2,155,2,140,2,140,2,148,2,154,2,157,2,152,2,137,2,155,2,158,2,152,2,149,2,135,2,134,2,136,2,153,2,161,2,170,2,172,2,170,2,171,2,157,2,167,2,159,2,158,2,163,2,153,2,159,2,157,2,146,2,141,2,144,2,156,2,156,2,157,2,156,2,159,2,169,2,173,2,165,2,192,2,180,2,169,2,163,2,176,2,188,2,166,2,175,2,164,2,167,2,163,2,161,2,147,2,157,2,153,2,166,2,179,2,185,2,191,2,207,2,213,2,198,2,169,2,161,2,185,2,217,2,217,2,195,2,183,2,198,2,212,2,206,2,180,2,174,2,168,2,163,2,163,2,158,2,149,2,130,2,135,2,142,2,134,2,119,2,116,2,103,2,105,2,105,2,94,2,99,2,81,2,83,2,68,2,52,2,47,2,48,2,40,2,29,2,15,2,11,2,16,2,30,2,43,2,46,2,53,2,50,2,34,2,39,2,28,2,29,2,20,2,4,2,253,1,247,1,241,1,250,1,245,1,250,1,249,1,248,1,6,2,250,1,238,1,234,1,248,1,17,2,29,2,36,2,23,2,45,2,81,2,71,2,96,2,106,2,89,2,70,2,70,2,84,2,86,2,102,2,120,2,110,2,109,2,85,2,69,2,78,2,82,2,86,2,82,2,84,2,83,2,70,2,49,2,30,2,30,2,42,2,39,2,37,2,40,2,47,2,52,2,49,2,38,2,52,2,40,2,33,2,30,2,33,2,41,2,22,2,3,2,8,2,17,2,32,2,30,2,28,2,24,2,11,2,250,1,249,1,240,1,239,1,241,1,236,1,245,1,244,1,230,1,218,1,227,1,223,1,239,1,231,1,232,1,221,1,213,1,207,1,209,1,223,1,227,1,227,1,239,1,2,2,248,1,241,1,254,1,254,1,251,1,3,2,249,1,232,1,225,1,234,1,236,1,245,1,229,1,226,1,235,1,233,1,5,2,249,1,240,1,235,1,230,1,228,1,208,1,193,1,174,1,166,1,173,1,178,1,183,1,184,1,171,1,162,1,140,1,142,1,138,1,153,1,163,1,148,1,135,1,154,1,146,1,158,1,154,1,164,1,179,1,176,1,181,1,175,1,175,1,183,1,185,1,146,1,143,1,133,1,116,1,109,1,103,1,108,1,97,1,93,1,100,1,87,1,76,1,69,1,64,1,68,1,63,1,70,1,72,1,71,1,83,1,93,1,110,1,115,1,126,1,114,1,113,1,110,1,118,1,117,1,93,1,76,1,82,1,83,1,91,1,69,1,78,1,75,1,75,1,70,1,54,1,43,1,55,1,69,1,84,1,78,1,69,1,77,1,88,1,95,1,105,1,104,1,97,1,77,1,77,1,117,1,106,1,114,1,106,1,82,1,86,1,85,1,79,1,78,1,86,1,98,1,83,1,63,1,49,1,41,1,43,1,41,1,61,1,57,1,76,1,76,1,89,1,101,1,81,1,69,1,57,1,82,1,102,1,81,1,82,1,97,1,104,1,104,1,96,1,101,1,100,1,100,1,103,1,123,1,127,1,130,1,125,1,125,1,127,1,118,1,123,1,101,1,97,1,92,1,93,1,103,1,96,1,89,1,74,1,70,1,54,1,58,1,48,1,40,1,16,1,255,0,252,0,7,1,18,1,19,1,24,1,16,1,17,1,34,1,38,1,28,1,25,1,28,1,26,1,9,1,14,1,19,1,16,1,9,1,6,1,29,1,17,1,17,1,244,0,249,0,0,1,19,1,250,0,243,0,236,0,227,0,223,0,228,0,241,0,227,0,218,0,208,0,204,0,205,0,204,0,215,0,219,0,223,0,1,1,250,0,4,1,253,0,16,1,19,1,9,1,236,0,216,0,225,0,242,0,246,0,254,0,230,0,227,0,251,0,3,1,11,1,245,0,246,0,243,0,231,0,239,0,244,0,242,0,232,0,3,1,13,1,19,1,18,1,253,0,0,1,242,0,235,0,224,0,203,0,202,0,195,0,217,0,208,0,209,0,204,0,209,0,192,0,183,0,180,0,185,0,215,0,199,0,185,0,181,0,181,0,181,0,192,0,191,0,193,0,198,0,195,0,208,0,209,0,217,0,222,0,221,0,200,0,186,0,166,0,154,0,153,0,153,0,155,0,162,0,174,0,174,0,154,0,136,0,145,0,141,0,144,0,130,0,143,0,163,0,199,0,202,0,197,0,206,0,207,0,208,0,218,0,218,0,213,0,216,0,186,0,178,0,177,0,186,0,180,0,191,0,197,0,197,0,194,0,200,0,213,0,227,0,227,0,229,0,233,0,223,0,216,0,201,0,188,0,175,0,159,0,144,0,145,0,122,0,140,0,131,0,143,0,133,0,144,0,163,0,169,0,176,0,182,0,183,0,180,0,163,0,148,0,140,0,134,0,123,0,118,0,107,0,107,0,101,0,116,0,117,0,121,0,117,0,111,0,92,0,92,0,94,0,103,0,120,0,114,0,117,0,125,0,132,0,125,0,117,0,106,0,96,0,102,0,96,0,90,0,81,0,62,0,69,0,67,0,56,0,47,0,44,0,44,0,56,0,56,0,74,0,63,0,52,0,68,0,82,0,83,0,95,0,89,0,100,0,95,0,99,0,79,0,78,0,88,0,106,0,122,0,131,0,115,0,120,0,110,0,104,0,107,0,109,0,106,0,119,0,113,0,112,0,101,0,106,0,111,0,111,0,113,0,112,0,123,0,109,0,105,0,90,0,104,0,97,0,83,0,80,0,61,0,47,0,43,0,31,0,16,0,255,255,237,255,239,255,239,255,240,255,234,255,213,255,195,255,196,255,191,255,194,255,189,255,200,255,201,255,208,255,218,255,202,255,205,255,230,255,239,255,242,255,226,255,247,255,2,0,15,0,8,0,9,0,10,0,5,0,251,255,236,255,219,255,200,255,201,255,192,255,203,255,211,255,204,255,198,255,201,255,196,255,191,255,194,255,204,255,209,255,210,255,194,255,180,255,182,255,201,255,203,255,184,255,170,255,154,255,159,255,164,255,181,255,174,255,171,255,166,255,149,255,152,255,162,255,168,255,159,255,155,255,153,255,151,255,156,255,150,255,148,255,153,255,144,255,141,255,128,255,138,255,128,255,134,255,133,255,148,255,158,255,159,255,140,255,117,255,104,255,86,255,100,255,85,255,91,255,82,255,89,255,69,255,64,255,55,255,48,255,61,255,53,255,49,255,37,255,54,255,66,255,68,255,60,255,47,255,54,255,62,255,61,255,67,255,62,255,50,255,64,255,56,255,32,255,40,255,24,255,24,255,20,255,30,255,50,255,62,255,50,255,46,255,61,255,71,255,81,255,86,255,107,255,120,255,121,255,130,255,137,255,116,255,90,255,71,255,82,255,75,255,68,255,74,255,66,255,69,255,60,255,77,255,83,255,100,255,92,255,79,255,80,255,108,255,74,255,70,255,55,255,62,255,74,255,60,255,68,255,85,255,102,255,93,255,71,255,68,255,67,255,68,255,67,255,61,255,52,255,43,255,38,255,19,255,14,255,13,255,251,254,3,255,243,254,249,254,246,254,245,254,246,254,250,254,246,254,236,254,239,254,240,254,239,254,241,254,243,254,241,254,252,254,250,254,14,255,8,255,9,255,21,255,21,255,13,255,10,255,16,255,21,255,23,255,33,255,44,255,32,255,23,255,29,255,33,255,46,255,33,255,26,255,22,255,24,255,31,255,35,255,37,255,36,255,34,255,29,255,33,255,29,255,14,255,246,254,233,254,235,254,232,254,242,254,237,254,226,254,208,254,211,254,232,254,236,254,242,254,244,254,253,254,250,254,254,254,250,254,8,255,7,255,253,254,2,255,255,254,249,254,251,254,244,254,228,254,217,254,218,254,216,254,219,254,205,254,197,254,192,254,201,254,218,254,219,254,230,254,229,254,228,254,217,254,207,254,203,254,200,254,196,254,211,254,207,254,201,254,203,254,208,254,217,254,236,254,12,255,16,255,5,255,245,254,238,254,239,254,2,255,254,254,251,254,220,254,214,254,197,254,200,254,185,254,184,254,191,254,193,254,197,254,191,254,192,254,186,254,190,254,200,254,190,254,177,254,163,254,145,254,146,254,150,254,154,254,151,254,133,254,120,254,124,254,113,254,124,254,116,254,96,254,91,254,78,254,65,254,58,254,60,254,54,254,43,254,51,254,46,254,52,254,54,254,53,254,36,254,44,254,61,254,88,254,93,254,96,254,115,254,118,254,114,254,122,254,122,254,146,254,143,254,147,254,149,254,176,254,181,254,166,254,156,254,139,254,131,254,132,254,117,254,113,254,106,254,113,254,112,254,127,254,115,254,117,254,113,254,128,254,123,254,117,254,125,254,127,254,127,254,132,254,129,254,141,254,128,254,126,254,116,254,110,254,103,254,90,254,73,254,76,254,77,254,81,254,80,254,74,254,81,254,82,254,78,254,74,254,76,254,61,254,68,254,60,254,69,254,76,254,101,254,113,254,106,254,95,254,97,254,111,254,113,254,117,254,116,254,104,254,96,254,93,254,70,254,74,254,56,254,58,254,55,254,56,254,57,254,68,254,66,254,66,254,53,254,49,254,51,254,50,254,70,254,73,254,72,254,81,254,78,254,79,254,62,254,59,254,66,254,68,254,75,254,82,254,89,254,77,254,84,254,83,254,96,254,92,254,79,254,82,254,92,254,95,254,107,254,98,254,95,254,100,254,101,254,108,254,94,254,86,254,75,254,58,254,56,254,43,254,35,254,33,254,30,254,42,254,46,254,53,254,27,254,29,254,18,254,46,254,49,254,55,254,28,254,22,254,27,254,44,254,42,254,57,254,44,254,46,254,54,254,66,254,87,254,84,254,78,254,61,254,54,254,47,254,33,254,27,254,18,254,19,254,7,254,249,253,228,253,226,253,220,253,213,253,203,253,207,253,194,253,208,253,197,253,211,253,238,253,254,253,245,253,226,253,234,253,241,253,225,253,223,253,234,253,248,253,253,253,240,253,227,253,231,253,244,253,251,253,244,253,251,253,1,254,2,254,251,253,244,253,227,253,214,253,215,253,222,253,233,253,233,253,233,253,227,253,232,253,226,253,223,253,210,253,193,253,184,253,192,253,189,253,182,253,176,253,174,253,170,253,156,253,166,253,166,253,168,253,163,253,153,253,156,253,159,253,164,253,161,253,169,253,171,253,182,253,184,253,183,253,187,253,198,253,184,253,177,253,141,253,147,253,152,253,162,253,165,253,167,253,183,253,186,253,183,253,182,253,198,253,192,253,196,253,201,253,197,253,185,253,170,253,152,253,139,253,155,253,145,253,147,253,133,253,136,253,144,253,142,253,160,253,149,253,160,253,155,253,157,253,167,253,176,253,187,253,183,253,193,253,189,253,180,253,172,253,168,253,166,253,159,253,152,253,147,253,154,253,149,253,143,253,154,253,165,253,161,253,166,253,163,253,160,253,156,253,160,253,164,253,151,253,146,253,143,253,145,253,148,253,145,253,137,253,144,253,148,253,155,253,149,253,154,253,147,253,139,253,121,253,111,253,112,253,111,253,100,253,98,253,94,253,78,253,65,253,72,253,75,253,62,253,50,253,58,253,47,253,60,253,61,253,68,253,81,253,73,253,55,253,28,253,18,253,9,253,16,253,8,253,21,253,35,253,46,253,57,253,63,253,68,253,68,253,80,253,90,253,94,253,101,253,103,253,92,253,93,253,88,253,97,253,79,253,76,253,67,253,78,253,87,253,108,253,101,253,105,253,129,253,137,253,150,253,137,253,155,253,161,253,163,253,158,253,153,253,153,253,151,253,151,253,153,253,157,253,166,253,173,253,166,253,178,253,176,253,192,253,199,253,194,253,186,253,177,253,169,253,159,253,157,253,160,253,162,253,161,253,160,253,170,253,186,253,190,253,210,253,198,253,193,253,197,253,203,253,217,253,237,253,245,253,238,253,244,253,247,253,249,253,240,253,247,253,249,253,14,254,17,254,11,254,254,253,248,253,240,253,241,253,249,253,228,253,227,253,237,253,244,253,235,253,236,253,245,253,236,253,234,253,234,253,238,253,242,253,230,253,225,253,211,253,219,253,212,253,220,253,220,253,209,253,210,253,212,253,217,253,222,253,226,253,229,253,240,253,241,253,229,253,225,253,213,253,233,253,249,253,4,254,19,254,9,254,21,254,18,254,20,254,22,254,37,254,42,254,54,254,47,254,42,254,47,254,46,254,61,254,61,254,73,254,65,254,69,254,82,254,99,254,99,254,105,254,109,254,102,254,106,254,101,254,101,254,91,254,93,254,87,254,91,254,85,254,85,254,84,254,97,254,99,254,105,254,96,254,102,254,104,254,95,254,103,254,112,254,120,254,135,254,149,254,155,254,162,254,185,254,180,254,190,254,198,254,220,254,225,254,212,254,203,254,212,254,213,254,206,254,205,254,202,254,207,254,190,254,191,254,182,254,186,254,166,254,176,254,167,254,167,254,164,254,167,254,179,254,179,254,175,254,171,254,169,254,161,254,157,254,154,254,158,254,147,254,144,254,139,254,128,254,123,254,133,254,131,254,148,254,143,254,148,254,152,254,141,254,139,254,153,254,152,254,166,254,171,254,189,254,205,254,214,254,202,254,197,254,203,254,207,254,221,254,227,254,233,254,230,254,229,254,209,254,193,254,203,254,211,254,227,254,229,254,232,254,229,254,230,254,234,254,243,254,253,254,254,254,10,255,6,255,4,255,250,254,250,254,248,254,255,254,4,255,24,255,31,255,23,255,29,255,24,255,42,255,33,255,37,255,43,255,54,255,47,255,36,255,16,255,21,255,32,255,37,255,45,255,55,255,49,255,47,255,39,255,30,255,29,255,42,255,55,255,65,255,74,255,85,255,86,255,100,255,87,255,79,255,61,255,51,255,63,255,50,255,71,255,69,255,90,255,91,255,89,255,97,255,102,255,96,255,112,255,108,255,116,255,123,255,138,255,146,255,149,255,136,255,142,255,144,255,142,255,135,255,124,255,110,255,106,255,108,255,107,255,112,255,117,255,124,255,132,255,138,255,123,255,122,255,121,255,126,255,127,255,134,255,141,255,147,255,147,255,145,255,142,255,153,255,157,255,169,255,178,255,174,255,183,255,185,255,182,255,175,255,177,255,184,255,187,255,190,255,198,255,205,255,218,255,199,255,181,255,170,255,162,255,175,255,188,255,190,255,176,255,193,255,175,255,186,255,188,255,188,255,180,255,194,255,185,255,188,255,196,255,207,255,197,255,195,255,202,255,209,255,222,255,213,255,211,255,228,255,231,255,223,255,239,255,233,255,232,255,236,255,235,255,224,255,217,255,215,255,222,255,224,255,219,255,215,255,206,255,216,255,203,255,190,255,186,255,210,255,225,255,236,255,238,255,231,255,233,255,246,255,239,255,226,255,218,255,226,255,210,255,214,255,215,255,208,255,197,255,178,255,171,255,189,255,193,255,191,255,186,255,197,255,190,255,194,255,203,255,211,255,233,255,249,255,7,0,12,0,14,0,8,0,8,0,7,0,10,0,27,0,22,0,36,0,32,0,49,0,53,0,49,0,43,0,41,0,25,0,37,0,43,0,41,0,44,0,33,0,30,0,20,0,18,0,16,0,5,0,12,0,15,0,16,0,25,0,9,0,254,255,254,255,9,0,27,0,35,0,44,0,44,0,52,0,56,0,71,0,64,0,63,0,66,0,56,0,52,0,66,0,65,0,68,0,77,0,74,0,86,0,95,0,127,0,149,0,151,0,162,0,160,0,158,0,166,0,154,0,141,0,153,0,146,0,145,0,130,0,112,0,120,0,114,0,92,0,91,0,94,0,101,0,114,0,119,0,114,0,124,0,115,0,139,0,145,0,150,0,156,0,175,0,190,0,210,0,199,0,209,0,206,0,216,0,214,0,213,0,227,0,230,0,230,0,222,0,226,0,242,0,241,0,240,0,227,0,233,0,201,0,184,0,170,0,172,0,172,0,184,0,176,0,155,0,154,0,155,0,165,0,165,0,163,0,161,0,170,0,176,0,195,0,209,0,215,0,214,0,203,0,212,0,221,0,246,0,9,1,30,1,39,1,29,1,8,1,9,1,15,1,31,1,38,1,28,1,31,1,29,1,31,1,17,1,17,1,21,1,13,1,9,1,248,0,11,1,12,1,19,1,25,1,18,1,14,1,2,1,249,0,243,0,225,0,226,0,226,0,242,0,232,0,228,0,217,0,204,0,207,0,205,0,205,0,204,0,180,0,196,0,203,0,201,0,199,0,197,0,192,0,186,0,192,0,179,0,192,0,208,0,221,0,213,0,200,0,218,0,244,0,4,1,8,1,247,0,243,0,239,0,234,0,247,0,6,1,14,1,23,1,24,1,27,1,32,1,18,1,4,1,6,1,245,0,250,0,9,1,7,1,17,1,13,1,253,0,244,0,233,0,244,0,2,1,1,1,255,0,254,0,245,0,5,1,3,1,9,1,253,0,4,1,7,1,9,1,24,1,26,1,42,1,25,1,20,1,37,1,37,1,39,1,44,1,40,1,45,1,36,1,44,1,42,1,35,1,26,1,11,1,247,0,236,0,234,0,229,0,215,0,203,0,197,0,209,0,212,0,215,0,203,0,205,0,200,0,201,0,197,0,207,0,200,0,194,0,182,0,210,0,234,0,248,0,8,1,11,1,13,1,8,1,12,1,11,1,24,1,21,1,36,1,58,1,54,1,67,1,65,1,70,1,66,1,48,1,60,1,70,1,48,1,32,1,19,1,14,1,13,1,24,1,22,1,26,1,16,1,23,1,17,1,14,1,5,1,0,1,249,0,241,0,224,0,220,0,221,0,212,0,194,0,179,0,178,0,192,0,195,0,194,0,212,0,211,0,220,0,228,0,223,0,214,0,215,0,216,0,220,0,210,0,228,0,233,0,249,0,251,0,245,0,244,0,239,0,243,0,237,0,234,0,205,0,208,0,210,0,204,0,200,0,188,0,198,0,198,0,211,0,201,0,194,0,188,0,175,0,167,0,169,0,175,0,176,0,190,0,202,0,199,0,200,0,196,0,215,0,217,0,212,0,209,0,220,0,222,0,216,0,225,0,220,0,215,0,201,0,187,0,199,0,214,0,202,0,204,0,197,0,191,0,205,0,215,0,224,0,207,0,172,0,164,0,174,0,179,0,181,0,180,0,181,0,191,0,187,0,172,0,167,0,156,0,148,0,137,0,137,0,126,0,109,0,116,0,109,0,109,0,100,0,103,0,111,0,117,0,117,0,112,0,116,0,111,0,95,0,101,0,107,0,115,0,108,0,102,0,90,0,94,0,94,0,82,0,62,0,49,0,40,0,24,0,35,0,42,0,70,0,89,0,97,0,105,0,106,0,113,0,126,0,132,0,137,0,145,0,133,0,136,0,133,0,132,0,152,0,148,0,160,0,158,0,147,0,134,0,121,0,113,0,125,0,132,0,139,0,139,0,131,0,110,0,97,0,106,0,111,0,120,0,126,0,116,0,104,0,102,0,112,0,114,0,116,0,120,0,115,0,119,0,107,0,98,0,86,0,90,0,81,0,92,0,81,0,85,0,82,0,96,0,96,0,106,0,105,0,111,0,117,0,123,0,112,0,117,0,117,0,135,0,134,0,136,0,129,0,115,0,120,0,137,0,140,0,137,0,145,0,154,0,162,0,178,0,173,0,182,0,192,0,204,0,208,0,192,0,200,0,191,0,194,0,193,0,181,0,160,0,162,0,164,0,168,0,166,0,172,0,163,0,151,0,129,0,123,0,125,0,113,0,118,0,105,0,98,0,103,0,107,0,119,0,131,0,157,0,164,0,178,0,188,0,200,0,210,0,211,0,204,0,215,0,218,0,225,0,242,0,235,0,234,0,221,0,194,0,186,0,184,0,180,0,173,0,174,0,154,0,159,0,140,0,125,0,114,0,120,0,117,0,116,0,113,0,117,0,129,0,139,0,148,0,149,0,154,0,146,0,163,0,169,0,166,0,181,0,192,0,207,0,229,0,221,0,205,0,188,0,189,0,199,0,189,0,179,0,183,0,191,0,185,0,173,0,169,0,189,0,196,0,190,0,173,0,180,0,181,0,188,0,188,0,197,0,199,0,181,0,178,0,186,0,188,0,171,0,151,0,144,0,136,0,139,0,138,0,139,0,140,0,129,0,146,0,153,0,135,0,123,0,132,0,131,0,136,0,138,0,135,0,137,0,129,0,140,0,133,0,123,0,118,0,117,0,126,0,124,0,121,0,124,0,116,0,122,0,115,0,116,0,114,0,116,0,124,0,143,0,137,0,137,0,152,0,151,0,168,0,183,0,192,0,192,0,183,0,185,0,197,0,206,0,215,0,203,0,188,0,194,0,204,0,236,0,238,0,237,0,223,0,226,0,225,0,220,0,208,0,202,0,209,0,215,0,226,0,217,0,224,0,234,0,243,0,249,0,242,0,243,0,232,0,236,0,238,0,235,0,237,0,236,0,223,0,223,0,199,0,188,0,197,0,195,0,199,0,198,0,205,0,185,0,191,0,183,0,193,0,201,0,217,0,212,0,214,0,215,0,209,0,196,0,207,0,231,0,234,0,218,0,227,0,215,0,221,0,232,0,219,0,212,0,187,0,182,0,179,0,178,0,167,0,173,0,179,0,185,0,188,0,187,0,202,0,212,0,229,0,239,0,230,0,226,0,223,0,226,0,218,0,212,0,227,0,208,0,211,0,195,0,197,0,177,0,167,0,143,0,149,0,142,0,148,0,153,0,156,0,134,0,139,0,125,0,135,0,141,0,141,0,154,0,165,0,170,0,170,0,183,0,194,0,214,0,211,0,230,0,232,0,240,0,230,0,232,0,227,0,189,0,174,0,183,0,189,0,190,0,179,0,178,0,189,0,188,0,187,0,189,0,179,0,167,0,161,0,153,0,154,0,151,0,158,0,178,0,199,0,208,0,226,0,221,0,214,0,205,0,203,0,201,0,181,0,184,0,182,0,184,0,173,0,177,0,154,0,147,0,143,0,124,0,134,0,137,0,158,0,150,0,157,0,170,0,169,0,167,0,174,0,169,0,178,0,157,0,163,0,165,0,164,0,165,0,160,0,156,0,146,0,146,0,162,0,166,0,185,0,197,0,202,0,208,0,202,0,210,0,222,0,223,0,222,0,209,0,205,0,216,0,214,0,206,0,192,0,191,0,208,0,227,0,224,0,217,0,209,0,202,0,206,0,205,0,194,0,176,0,166,0,159,0,157,0,147,0,132,0,134,0,122,0,132,0,113,0,122,0,121,0,107,0,101,0,97,0,102,0,71,0,62,0,70,0,80,0,88,0,94,0,93,0,83,0,84,0,83,0,65,0,57,0,55,0,41,0,29,0,21,0,21,0,38,0,48,0,43,0,58,0,70,0,89,0,96,0,85,0,90,0,102,0,105,0,122,0,132,0,128,0,133,0,145,0,156,0,166,0,172,0,174,0,162,0,157,0,157,0,144,0,151,0,145,0,125,0,120,0,107,0,90,0,86,0,80,0,50,0,43,0,24,0,47,0,40,0,39,0,47,0,57,0,61,0,63,0,57,0,55,0,54,0,60,0,63,0,66,0,80,0,74,0,71,0,74,0,57,0,58,0,53,0,47,0,33,0,30,0,27,0,30,0,48,0,39,0,40,0,40,0,31,0,47,0,49,0,59,0,63,0,68,0,82,0,94,0,107,0,115,0,117,0,131,0,115,0,121,0,119,0,122,0,130,0,122,0,112,0,122,0,111,0,117,0,114,0,122,0,130,0,131,0,135,0,142,0,139,0,156,0,149,0,161,0,162,0,149,0,144,0,130,0,132,0,137,0,138,0,133,0,138,0,119,0,116,0,111,0,99,0,100,0,102,0,106,0,112,0,111,0,114,0,130,0,153,0,156,0,169,0,178,0,191,0,194,0,218,0,216,0,219,0,214,0,208,0,197,0,191,0,188,0,190,0,172,0,161,0,144,0,126,0,112,0,93,0,89,0,84,0,67,0,72,0,63,0,77,0,69,0,53,0,52,0,45,0,46,0,39,0,49,0,30,0,27,0,24,0,45,0,50,0,69,0,87,0,106,0,107,0,112,0,124,0,120,0,143,0,142,0,145,0,153,0,156,0,146,0,154,0,145,0,144,0,147,0,171,0,180,0,174,0,166,0,168,0,173,0,175,0,176,0,187,0,180,0,200,0,226,0,236,0,247,0,240,0,244,0,241,0,228,0,208,0,209,0,193,0,189,0,172,0,173,0,163,0,159,0,159,0,153,0,145,0,139,0,137,0,148,0,150,0,146,0,127,0,122,0,119,0,106,0,95,0,77,0,70,0,75,0,75,0,62,0,65,0,67,0,76,0,68,0,74,0,83,0,81,0,87,0,83,0,95,0,91,0,85,0,78,0,59,0,51,0,51,0,43,0,27,0,9,0,16,0,13,0,17,0,29,0,41,0,47,0,58,0,63,0,68,0,78,0,71,0,78,0,92,0,104,0,106,0,105,0,102,0,119,0,131,0,118,0,119,0,110,0,109,0,109,0,109,0,90,0,92,0,94,0,99,0,129,0,136,0,152,0,151,0,135,0,141,0,134,0,129,0,120,0,106,0,90,0,87,0,85,0,76,0,82,0,72,0,93,0,92,0,107,0,80,0,67,0,64,0,51,0,54,0,50,0,57,0,53,0,31,0,24,0,23,0,32,0,31,0,27,0,32,0,42,0,29,0,43,0,31,0,43,0,48,0,63,0,59,0,42,0,33,0,32,0,33,0,38,0,33,0,44,0,31,0,42,0,41,0,71,0,61,0,72,0,59,0,54,0,49,0,41,0,28,0,29,0,37,0,41,0,42,0,26,0,16,0,12,0,22,0,22,0,30,0,31,0,35,0,46,0,30,0,42,0,45,0,59,0,59,0,56,0,54,0,56,0,60,0,70,0,78,0,63,0,55,0,53,0,55,0,48,0,48,0,48,0,39,0,45,0,54,0,60,0,53,0,42,0,25,0,27,0,3,0,251,255,248,255,241,255,231,255,237,255,247,255,254,255,254,255,8,0,16,0,23,0,31,0,42,0,63,0,93,0,114,0,119,0,132,0,126,0,138,0,121,0,108,0,104,0,102,0,90,0,101,0,91,0,80,0,55,0,44,0,54,0,39,0,27,0,23,0,7,0,3,0,243,255,251,255,242,255,250,255,248,255,254,255,231,255,231,255,218,255,222,255,223,255,234,255,231,255,249,255,0,0,2,0,2,0,250,255,255,255,250,255,1,0,239,255,225,255,211,255,211,255,216,255,220,255,237,255,221,255,231,255,237,255,244,255,244,255,253,255,238,255,240,255,234,255,233,255,235,255,235,255,240,255,247,255,249,255,241,255,1,0,2,0,1,0,250,255,235,255,233,255,239,255,239,255,231,255,242,255,226,255,227,255,224,255,220,255,223,255,212,255,219,255,213,255,220,255,240,255,2,0,30,0,39,0,43,0,42,0,30,0,40,0,43,0,37,0,31,0,36,0,49,0,37,0,25,0,26,0,28,0,19,0,26,0,15,0,11,0,9,0,20,0,27,0,35,0,33,0,33,0,14,0,11,0,24,0,21,0,0,0,9,0,238,255,223,255,217,255,200,255,206,255,195,255,198,255,197,255,198,255,198,255,202,255,213,255,206,255,205,255,205,255,215,255,224,255,235,255,235,255,235,255,237,255,241,255,228,255,243,255,251,255,18,0,36,0,69,0,90,0,98,0,95,0,92,0,85,0,78,0,54,0,39,0,43,0,34,0,44,0,36,0,55,0,57,0,61,0,56,0,46,0,46,0,56,0,55,0,54,0,39,0,39,0,17,0,12,0,26,0,32,0,31,0,27,0,10,0,24,0,25,0,40,0,36,0,39,0,43,0,51,0,55,0,48,0,43,0,49,0,47,0,28,0,31,0,33,0,41,0,40,0,33,0,18,0,16,0,16,0,25,0,12,0,22,0,22,0,26,0,36,0,52,0,76,0,68,0,78,0,85,0,107,0,128,0,125,0,137,0,138,0,138,0,136,0,131,0,123,0,110,0,110,0,112,0,110,0,115,0,97,0,95,0,88,0,85,0,94,0,85,0,66,0,56,0,62,0,64,0,70,0,76,0,72,0,71,0,73,0,79,0,78,0,95,0,105,0,127,0,135,0,136,0,132,0,132,0,146,0,152,0,141,0,155,0,150,0,146,0,137,0,145,0,150,0,159,0,151,0,147,0,148,0,162,0,175,0,185,0,187,0,206,0,199,0,190,0,173,0,171,0,173,0,163,0,169,0,152,0,154,0,137,0,146,0,139,0,127,0,128,0,122,0,125,0,130,0,147,0,132,0,159,0,168,0,182,0,168,0,165,0,157,0,156,0,132,0,115,0,102,0,98,0,98,0,95,0,88,0,73,0,72,0,72,0,84,0,94,0,100,0,112,0,116,0,135,0,152,0,170,0,180,0,189,0,214,0,206,0,203,0,205,0,201,0,192,0,200,0,196,0,198,0,195,0,189,0,195,0,202,0,188,0,192,0,198,0,192,0,198,0,186,0,189,0,194,0,202,0,210,0,209,0,215,0,213,0,227,0,230,0,248,0,8,1,252,0,244,0,245,0,234,0,239,0,241,0,241,0,249,0,4,1,238,0,238,0,221,0,229,0,225,0,233,0,221,0,229,0,241,0,230,0,233,0,226,0,222,0,225,0,231,0,231,0,246,0,245,0,9,1,8,1,248,0,244,0,231,0,251,0,236,0,244,0,254,0,13,1,31,1,8,1,8,1,4,1,24,1,23,1,15,1,255,0,2,1,8,1,22,1,33,1,30,1,33,1,40,1,60,1,56,1,71,1,45,1,31,1,27,1,22,1,18,1,20,1,20,1,34,1,33,1,5,1,248,0,2,1,249,0,227,0,220,0,209,0,213,0,225,0,237,0,241,0,241,0,248,0,13,1,31,1,30,1,26,1,32,1,43,1,50,1,55,1,62,1,75,1,72,1,73,1,64,1,62,1,51,1,47,1,48,1,49,1,46,1,47,1,44,1,41,1,59,1,45,1,50,1,53,1,49,1,45,1,52,1,44,1,45,1,42,1,49,1,80,1,66,1,76,1,87,1,68,1,67,1,38,1,42,1,33,1,49,1,43,1,41,1,32,1,27,1,29,1,33,1,42,1,37,1,26,1,248,0,243,0,254,0,254,0,2,1,251,0,241,0,213,0,215,0,241,0,0,1,14,1,19,1,12,1,16,1,20,1,18,1,5,1,3,1,7,1,9,1,21,1,20,1,39,1,47,1,68,1,53,1,61,1,76,1,83,1,72,1,69,1,58,1,62,1,54,1,59,1,56,1,39,1,40,1,25,1,30,1,35,1,28,1,30,1,37,1,29,1,36,1,35,1,35,1,22,1,33,1,39,1,59,1,61,1,48,1,40,1,26,1,24,1,20,1,8,1,9,1,12,1,22,1,20,1,27,1,18,1,19,1,29,1,31,1,36,1,50,1,65,1,67,1,68,1,67,1,65,1,60,1,61,1,62,1,52,1,49,1,34,1,43,1,45,1,42,1,32,1,40,1,28,1,36,1,38,1,46,1,61,1,63,1,85,1,83,1,99,1,96,1,105,1,103,1,105,1,104,1,110,1,107,1,91,1,79,1,72,1,63,1,50,1,28,1,8,1,239,0,225,0,227,0,221,0,214,0,205,0,194,0,194,0,228,0,247,0,246,0,255,0,11,1,19,1,20,1,32,1,15,1,18,1,35,1,31,1,36,1,23,1,20,1,14,1,4,1,236,0,245,0,251,0,238,0,226,0,229,0,227,0,216,0,231,0,229,0,224,0,222,0,228,0,253,0,11,1,23,1,1,1,10,1,253,0,253,0,236,0,232,0,227,0,206,0,186,0,183,0,193,0,183,0,190,0,204,0,218,0,225,0,227,0,226,0,224,0,229,0,229,0,219,0,225,0,217,0,214,0,236,0,243,0,11,1,5,1,250,0,232,0,239,0,247,0,4,1,22,1,29,1,30,1,22,1,16,1,7,1,10,1,3,1,4,1,0,1,8,1,22,1,22,1,20,1,21,1,21,1,32,1,36,1,49,1,68,1,78,1,64,1,63,1,58,1,49,1,36,1,41,1,40,1,11,1,23,1,27,1,23,1,25,1,11,1,250,0,11,1,17,1,20,1,6,1,248,0,237,0,224,0,207,0,208,0,196,0,195,0,188,0,190,0,206,0,194,0,193,0,192,0,193,0,188,0,175,0,190,0,200,0,208,0,217,0,221,0,226,0,228,0,234,0,221,0,207,0,201,0,208,0,227,0,247,0,237,0,227,0,233,0,228,0,229,0,222,0,218,0,200,0,191,0,191,0,185,0,195,0,198,0,206,0,216,0,201,0,205,0,204,0,201,0,201,0,202,0,216,0,211,0,238,0,240,0,3,1,11,1,15,1,23,1,32,1,23,1,25,1,23,1,13,1,1,1,246,0,243,0,240,0,235,0,231,0,230,0,235,0,236,0,234,0,243,0,237,0,255,0,253,0,254,0,248,0,10,1,249,0,1,1,251,0,12,1,11,1,2,1,234,0,216,0,217,0,220,0,218,0,197,0,190,0,177,0,178,0,170,0,160,0,139,0,137,0,126,0,126,0,112,0,112,0,112,0,113,0,105,0,110,0,107,0,120,0,132,0,127,0,125,0,119,0,110,0,105,0,120,0,112,0,107,0,108,0,122,0,109,0,100,0,97,0,93,0,84,0,85,0,87,0,96,0,94,0,89,0,95,0,93,0,96,0,86,0,92,0,96,0,97,0,86,0,66,0,49,0,33,0,34,0,23,0,19,0,5,0,246,255,253,255,4,0,9,0,255,255,5,0,250,255,252,255,244,255,250,255,5,0,9,0,25,0,14,0,14,0,11,0,22,0,44,0,48,0,54,0,59,0,69,0,50,0,49,0,56,0,70,0,84,0,79,0,74,0,79,0,66,0,58,0,50,0,55,0,56,0,54,0,65,0,61,0,70,0,56,0,47,0,38,0,38,0,44,0,38,0,47,0,33,0,38,0,31,0,30,0,29,0,41,0,27,0,1,0,0,0,242,255,238,255,241,255,247,255,251,255,251,255,253,255,3,0,19,0,35,0,39,0,35,0,42,0,51,0,67,0,64,0,61,0,64,0,60,0,57,0,61,0,63,0,70,0,87,0]);fileData0.push.apply(fileData0,[82,0,89,0,94,0,76,0,74,0,61,0,63,0,69,0,71,0,69,0,71,0,65,0,63,0,59,0,52,0,69,0,62,0,57,0,42,0,37,0,34,0,50,0,47,0,57,0,73,0,69,0,74,0,71,0,87,0,88,0,97,0,107,0,121,0,124,0,123,0,113,0,98,0,96,0,76,0,75,0,79,0,77,0,81,0,65,0,33,0,21,0,28,0,22,0,19,0,11,0,16,0,24,0,45,0,28,0,29,0,23,0,33,0,52,0,54,0,65,0,73,0,71,0,91,0,89,0,96,0,93,0,75,0,86,0,73,0,75,0,68,0,46,0,48,0,34,0,43,0,53,0,46,0,48,0,42,0,59,0,46,0,50,0,48,0,56,0,58,0,59,0,62,0,77,0,42,0,26,0,12,0,20,0,15,0,254,255,241,255,229,255,227,255,216,255,196,255,175,255,175,255,182,255,194,255,191,255,194,255,194,255,187,255,182,255,177,255,179,255,187,255,171,255,167,255,141,255,142,255,142,255,137,255,130,255,129,255,143,255,151,255,172,255,174,255,183,255,177,255,181,255,192,255,195,255,208,255,203,255,224,255,228,255,233,255,230,255,237,255,243,255,242,255,238,255,243,255,247,255,241,255,230,255,227,255,221,255,216,255,190,255,188,255,170,255,175,255,153,255,151,255,152,255,140,255,133,255,131,255,117,255,115,255,103,255,82,255,80,255,69,255,79,255,88,255,105,255,113,255,115,255,128,255,112,255,110,255,98,255,88,255,89,255,95,255,110,255,104,255,108,255,115,255,136,255,138,255,133,255,130,255,129,255,145,255,164,255,164,255,147,255,142,255,146,255,151,255,146,255,148,255,138,255,124,255,114,255,92,255,81,255,91,255,90,255,86,255,82,255,107,255,99,255,94,255,102,255,90,255,106,255,96,255,114,255,114,255,127,255,142,255,154,255,162,255,145,255,146,255,136,255,135,255,140,255,134,255,122,255,118,255,117,255,131,255,126,255,139,255,134,255,148,255,158,255,141,255,140,255,139,255,145,255,152,255,159,255,146,255,143,255,149,255,132,255,140,255,137,255,139,255,141,255,135,255,130,255,136,255,152,255,158,255,163,255,162,255,171,255,170,255,179,255,163,255,164,255,168,255,157,255,157,255,155,255,150,255,139,255,122,255,107,255,109,255,116,255,102,255,77,255,58,255,55,255,39,255,21,255,21,255,17,255,17,255,12,255,10,255,0,255,9,255,5,255,6,255,5,255,2,255,254,254,13,255,22,255,30,255,34,255,33,255,41,255,56,255,60,255,56,255,52,255,33,255,27,255,27,255,35,255,44,255,42,255,40,255,36,255,28,255,35,255,18,255,11,255,15,255,8,255,1,255,9,255,9,255,19,255,22,255,24,255,21,255,20,255,24,255,23,255,26,255,21,255,251,254,3,255,10,255,6,255,245,254,233,254,236,254,235,254,251,254,13,255,11,255,0,255,249,254,248,254,237,254,228,254,236,254,227,254,238,254,227,254,233,254,224,254,222,254,212,254,213,254,219,254,246,254,243,254,237,254,230,254,224,254,218,254,227,254,230,254,225,254,235,254,235,254,228,254,216,254,222,254,227,254,233,254,218,254,218,254,216,254,213,254,217,254,212,254,212,254,213,254,198,254,186,254,187,254,187,254,189,254,187,254,196,254,189,254,176,254,161,254,147,254,180,254,169,254,165,254,163,254,155,254,153,254,150,254,152,254,158,254,167,254,175,254,181,254,202,254,208,254,217,254,208,254,204,254,198,254,194,254,201,254,204,254,196,254,191,254,178,254,185,254,176,254,153,254,161,254,160,254,160,254,157,254,154,254,150,254,155,254,152,254,142,254,144,254,161,254,151,254,158,254,149,254,156,254,171,254,181,254,189,254,182,254,172,254,166,254,160,254,162,254,165,254,178,254,188,254,178,254,172,254,170,254,168,254,159,254,153,254,153,254,163,254,147,254,144,254,152,254,161,254,161,254,166,254,161,254,174,254,177,254,165,254,168,254,160,254,175,254,166,254,163,254,166,254,147,254,143,254,123,254,117,254,114,254,105,254,110,254,124,254,132,254,146,254,148,254,161,254,168,254,172,254,180,254,190,254,186,254,196,254,186,254,200,254,204,254,203,254,196,254,182,254,181,254,162,254,182,254,183,254,189,254,176,254,169,254,142,254,141,254,144,254,160,254,146,254,163,254,170,254,190,254,186,254,180,254,164,254,181,254,186,254,194,254,202,254,227,254,226,254,230,254,245,254,4,255,7,255,3,255,253,254,242,254,237,254,229,254,220,254,207,254,194,254,193,254,184,254,157,254,165,254,161,254,168,254,174,254,196,254,211,254,234,254,239,254,242,254,242,254,244,254,245,254,245,254,250,254,247,254,230,254,234,254,242,254,246,254,249,254,234,254,223,254,209,254,212,254,197,254,195,254,207,254,212,254,218,254,221,254,218,254,225,254,215,254,233,254,228,254,234,254,230,254,211,254,206,254,211,254,204,254,191,254,162,254,155,254,147,254,141,254,146,254,146,254,158,254,170,254,182,254,188,254,189,254,177,254,171,254,173,254,172,254,184,254,186,254,210,254,218,254,206,254,209,254,207,254,205,254,216,254,231,254,244,254,2,255,250,254,255,254,7,255,18,255,14,255,16,255,8,255,29,255,12,255,249,254,240,254,235,254,240,254,244,254,235,254,232,254,229,254,218,254,216,254,217,254,226,254,224,254,217,254,220,254,211,254,206,254,186,254,170,254,177,254,189,254,197,254,193,254,196,254,208,254,202,254,207,254,216,254,225,254,231,254,234,254,228,254,229,254,240,254,16,255,23,255,19,255,29,255,33,255,46,255,29,255,36,255,47,255,65,255,69,255,58,255,56,255,45,255,39,255,24,255,2,255,10,255,233,254,233,254,229,254,229,254,233,254,226,254,222,254,228,254,224,254,227,254,233,254,244,254,242,254,249,254,242,254,232,254,220,254,216,254,209,254,217,254,225,254,224,254,215,254,208,254,191,254,202,254,210,254,213,254,218,254,223,254,243,254,6,255,9,255,6,255,253,254,13,255,12,255,28,255,37,255,38,255,23,255,18,255,0,255,16,255,6,255,6,255,0,255,243,254,237,254,232,254,255,254,251,254,251,254,253,254,242,254,232,254,239,254,232,254,221,254,217,254,225,254,238,254,245,254,240,254,234,254,217,254,207,254,200,254,197,254,206,254,199,254,210,254,209,254,220,254,218,254,217,254,215,254,215,254,232,254,233,254,244,254,248,254,254,254,255,254,254,254,0,255,255,254,248,254,241,254,247,254,254,254,253,254,251,254,249,254,243,254,240,254,236,254,234,254,237,254,224,254,208,254,197,254,190,254,186,254,197,254,193,254,206,254,201,254,214,254,228,254,228,254,237,254,225,254,213,254,204,254,192,254,173,254,166,254,163,254,160,254,166,254,181,254,179,254,178,254,181,254,199,254,194,254,206,254,205,254,207,254,215,254,223,254,215,254,204,254,206,254,216,254,220,254,231,254,234,254,231,254,227,254,226,254,227,254,218,254,227,254,221,254,218,254,206,254,203,254,200,254,199,254,203,254,206,254,202,254,211,254,194,254,220,254,220,254,213,254,191,254,176,254,182,254,164,254,151,254,162,254,175,254,199,254,186,254,174,254,170,254,155,254,167,254,159,254,157,254,145,254,149,254,150,254,138,254,143,254,145,254,145,254,139,254,125,254,137,254,148,254,175,254,184,254,177,254,179,254,192,254,204,254,213,254,214,254,210,254,208,254,232,254,242,254,236,254,242,254,253,254,4,255,253,254,233,254,211,254,205,254,194,254,198,254,194,254,197,254,201,254,188,254,199,254,199,254,206,254,226,254,231,254,238,254,233,254,229,254,234,254,231,254,243,254,244,254,245,254,250,254,250,254,1,255,247,254,239,254,239,254,227,254,230,254,237,254,237,254,229,254,225,254,213,254,219,254,220,254,222,254,225,254,220,254,228,254,238,254,236,254,226,254,231,254,228,254,234,254,247,254,242,254,226,254,208,254,209,254,199,254,199,254,206,254,210,254,211,254,208,254,200,254,216,254,233,254,232,254,223,254,243,254,245,254,2,255,236,254,222,254,221,254,216,254,226,254,219,254,222,254,224,254,228,254,236,254,213,254,202,254,211,254,229,254,236,254,228,254,245,254,246,254,251,254,17,255,2,255,23,255,14,255,22,255,21,255,18,255,12,255,13,255,1,255,2,255,253,254,2,255,252,254,255,254,241,254,239,254,239,254,232,254,224,254,211,254,212,254,200,254,202,254,207,254,201,254,192,254,181,254,186,254,198,254,205,254,203,254,208,254,200,254,205,254,209,254,209,254,209,254,224,254,233,254,217,254,212,254,183,254,173,254,159,254,157,254,158,254,148,254,159,254,155,254,170,254,162,254,186,254,187,254,195,254,201,254,198,254,193,254,196,254,185,254,172,254,174,254,152,254,167,254,157,254,176,254,164,254,175,254,157,254,159,254,166,254,189,254,204,254,215,254,203,254,193,254,201,254,192,254,196,254,186,254,193,254,168,254,146,254,130,254,125,254,124,254,115,254,128,254,113,254,103,254,100,254,89,254,93,254,109,254,96,254,99,254,113,254,122,254,123,254,133,254,129,254,144,254,125,254,131,254,127,254,134,254,138,254,146,254,153,254,137,254,131,254,123,254,124,254,130,254,142,254,140,254,140,254,132,254,110,254,106,254,125,254,138,254,134,254,130,254,122,254,116,254,142,254,135,254,116,254,98,254,98,254,100,254,121,254,134,254,140,254,135,254,140,254,138,254,152,254,157,254,163,254,150,254,137,254,135,254,130,254,137,254,131,254,143,254,148,254,141,254,138,254,152,254,143,254,133,254,131,254,155,254,156,254,155,254,149,254,149,254,146,254,151,254,150,254,160,254,174,254,187,254,195,254,216,254,224,254,247,254,253,254,11,255,5,255,246,254,226,254,207,254,198,254,179,254,191,254,175,254,173,254,143,254,133,254,138,254,152,254,142,254,138,254,147,254,137,254,133,254,123,254,117,254,112,254,124,254,139,254,130,254,124,254,123,254,133,254,138,254,143,254,131,254,147,254,147,254,157,254,166,254,172,254,181,254,209,254,217,254,213,254,201,254,210,254,212,254,195,254,193,254,189,254,182,254,186,254,197,254,198,254,185,254,166,254,141,254,141,254,153,254,137,254,138,254,143,254,153,254,159,254,145,254,132,254,132,254,145,254,151,254,157,254,147,254,127,254,133,254,124,254,106,254,95,254,93,254,106,254,120,254,114,254,105,254,115,254,117,254,133,254,126,254,127,254,126,254,131,254,142,254,149,254,167,254,171,254,169,254,176,254,183,254,174,254,176,254,175,254,181,254,186,254,193,254,189,254,209,254,198,254,181,254,167,254,176,254,180,254,172,254,182,254,192,254,214,254,209,254,213,254,231,254,232,254,10,255,17,255,11,255,254,254,238,254,240,254,229,254,233,254,232,254,226,254,222,254,213,254,201,254,197,254,202,254,205,254,214,254,206,254,229,254,242,254,229,254,225,254,218,254,240,254,244,254,225,254,225,254,221,254,238,254,247,254,232,254,243,254,0,255,237,254,239,254,242,254,10,255,20,255,30,255,36,255,23,255,16,255,13,255,9,255,252,254,237,254,221,254,204,254,209,254,208,254,223,254,239,254,215,254,195,254,200,254,214,254,232,254,241,254,242,254,240,254,235,254,225,254,212,254,223,254,215,254,243,254,11,255,2,255,5,255,255,254,255,254,253,254,235,254,240,254,248,254,235,254,244,254,254,254,15,255,16,255,13,255,7,255,8,255,2,255,242,254,6,255,2,255,10,255,245,254,237,254,236,254,248,254,252,254,253,254,243,254,253,254,234,254,227,254,224,254,229,254,209,254,207,254,201,254,206,254,195,254,211,254,200,254,176,254,180,254,185,254,199,254,191,254,175,254,170,254,190,254,196,254,210,254,207,254,211,254,197,254,207,254,205,254,197,254,185,254,193,254,193,254,184,254,176,254,168,254,178,254,199,254,203,254,219,254,218,254,202,254,189,254,174,254,196,254,207,254,208,254,233,254,233,254,251,254,15,255,254,254,8,255,5,255,4,255,253,254,240,254,217,254,198,254,194,254,214,254,224,254,248,254,231,254,243,254,246,254,251,254,247,254,13,255,33,255,49,255,50,255,54,255,36,255,26,255,11,255,22,255,33,255,39,255,34,255,28,255,27,255,31,255,29,255,3,255,5,255,255,254,240,254,222,254,205,254,211,254,223,254,244,254,252,254,6,255,4,255,14,255,19,255,1,255,244,254,237,254,226,254,223,254,200,254,211,254,203,254,206,254,208,254,203,254,215,254,234,254,244,254,248,254,235,254,249,254,4,255,19,255,34,255,41,255,40,255,29,255,26,255,47,255,52,255,50,255,23,255,29,255,21,255,40,255,42,255,42,255,46,255,50,255,52,255,39,255,22,255,31,255,46,255,57,255,39,255,17,255,7,255,21,255,35,255,29,255,23,255,17,255,24,255,21,255,23,255,27,255,34,255,43,255,43,255,30,255,49,255,43,255,41,255,16,255,24,255,12,255,13,255,20,255,9,255,1,255,254,254,2,255,15,255,7,255,16,255,10,255,17,255,21,255,30,255,45,255,46,255,42,255,39,255,51,255,65,255,83,255,86,255,104,255,109,255,122,255,122,255,133,255,142,255,124,255,114,255,112,255,85,255,86,255,88,255,105,255,94,255,91,255,77,255,79,255,76,255,62,255,50,255,35,255,39,255,36,255,23,255,29,255,31,255,40,255,41,255,48,255,39,255,32,255,36,255,38,255,40,255,49,255,72,255,61,255,42,255,51,255,68,255,104,255,98,255,88,255,79,255,78,255,80,255,86,255,104,255,103,255,76,255,65,255,60,255,66,255,90,255,113,255,118,255,120,255,109,255,92,255,107,255,122,255,127,255,121,255,115,255,106,255,97,255,112,255,113,255,105,255,88,255,92,255,100,255,103,255,101,255,109,255,129,255,125,255,106,255,126,255,133,255,129,255,126,255,122,255,138,255,135,255,110,255,92,255,100,255,106,255,104,255,97,255,83,255,76,255,90,255,109,255,94,255,95,255,99,255,109,255,113,255,116,255,105,255,83,255,99,255,96,255,109,255,111,255,97,255,100,255,77,255,81,255,90,255,90,255,106,255,90,255,86,255,81,255,87,255,79,255,74,255,68,255,56,255,58,255,65,255,57,255,50,255,28,255,26,255,23,255,25,255,24,255,22,255,25,255,15,255,16,255,29,255,51,255,68,255,69,255,80,255,92,255,99,255,92,255,86,255,87,255,69,255,54,255,65,255,63,255,58,255,61,255,55,255,48,255,41,255,15,255,20,255,3,255,0,255,1,255,249,254,249,254,248,254,248,254,252,254,5,255,28,255,36,255,37,255,53,255,52,255,48,255,56,255,52,255,62,255,76,255,82,255,81,255,70,255,92,255,75,255,87,255,109,255,109,255,103,255,102,255,83,255,77,255,73,255,86,255,96,255,103,255,97,255,102,255,103,255,111,255,122,255,136,255,104,255,94,255,73,255,78,255,71,255,95,255,92,255,86,255,94,255,98,255,97,255,85,255,80,255,109,255,111,255,105,255,101,255,102,255,106,255,108,255,99,255,94,255,114,255,107,255,102,255,104,255,84,255,82,255,81,255,81,255,61,255,52,255,49,255,46,255,31,255,21,255,4,255,16,255,42,255,54,255,54,255,45,255,36,255,26,255,37,255,56,255,82,255,91,255,87,255,90,255,82,255,79,255,65,255,73,255,68,255,77,255,70,255,66,255,55,255,66,255,53,255,70,255,54,255,62,255,56,255,52,255,40,255,47,255,26,255,22,255,17,255,0,255,247,254,236,254,236,254,239,254,242,254,7,255,254,254,3,255,12,255,5,255,17,255,8,255,20,255,19,255,36,255,48,255,54,255,54,255,43,255,57,255,53,255,62,255,77,255,83,255,106,255,101,255,94,255,90,255,93,255,101,255,105,255,90,255,88,255,67,255,78,255,87,255,86,255,71,255,69,255,52,255,74,255,64,255,64,255,59,255,54,255,59,255,68,255,54,255,55,255,44,255,56,255,66,255,45,255,46,255,43,255,56,255,54,255,54,255,49,255,52,255,41,255,49,255,56,255,49,255,27,255,39,255,46,255,53,255,62,255,50,255,38,255,18,255,25,255,28,255,24,255,39,255,49,255,49,255,44,255,44,255,53,255,59,255,57,255,64,255,71,255,74,255,58,255,49,255,37,255,32,255,54,255,72,255,74,255,81,255,76,255,81,255,65,255,66,255,68,255,66,255,56,255,74,255,68,255,65,255,55,255,41,255,44,255,33,255,41,255,43,255,50,255,58,255,72,255,86,255,93,255,87,255,89,255,86,255,75,255,77,255,59,255,46,255,39,255,41,255,31,255,28,255,48,255,45,255,37,255,32,255,20,255,18,255,8,255,4,255,3,255,251,254,252,254,252,254,3,255,244,254,244,254,250,254,255,254,6,255,254,254,19,255,37,255,58,255,45,255,45,255,47,255,51,255,50,255,66,255,48,255,61,255,37,255,48,255,53,255,51,255,47,255,50,255,54,255,58,255,61,255,51,255,42,255,30,255,39,255,62,255,71,255,69,255,66,255,67,255,69,255,80,255,99,255,107,255,100,255,114,255,109,255,116,255,97,255,106,255,94,255,92,255,89,255,93,255,90,255,81,255,77,255,76,255,68,255,59,255,72,255,63,255,70,255,68,255,67,255,56,255,55,255,42,255,45,255,41,255,51,255,41,255,72,255,68,255,64,255,57,255,57,255,67,255,68,255,69,255,59,255,62,255,60,255,63,255,70,255,68,255,62,255,64,255,55,255,55,255,81,255,98,255,112,255,122,255,121,255,114,255,104,255,111,255,90,255,94,255,67,255,73,255,61,255,71,255,90,255,105,255,101,255,103,255,106,255,97,255,98,255,107,255,109,255,91,255,94,255,82,255,96,255,101,255,104,255,112,255,118,255,136,255,135,255,128,255,119,255,98,255,113,255,123,255,131,255,115,255,116,255,123,255,121,255,116,255,121,255,100,255,123,255,116,255,121,255,120,255,123,255,138,255,136,255,139,255,152,255,141,255,138,255,145,255,168,255,171,255,175,255,171,255,169,255,153,255,137,255,156,255,156,255,167,255,167,255,163,255,178,255,163,255,158,255,135,255,124,255,131,255,144,255,146,255,133,255,134,255,125,255,121,255,124,255,119,255,111,255,116,255,128,255,133,255,146,255,146,255,148,255,149,255,151,255,150,255,142,255,136,255,147,255,147,255,156,255,175,255,186,255,183,255,169,255,179,255,183,255,181,255,179,255,179,255,176,255,182,255,175,255,162,255,153,255,138,255,144,255,140,255,141,255,126,255,128,255,133,255,149,255,169,255,183,255,190,255,185,255,183,255,167,255,151,255,142,255,154,255,150,255,145,255,133,255,140,255,145,255,129,255,132,255,138,255,148,255,180,255,195,255,189,255,183,255,180,255,173,255,186,255,187,255,189,255,189,255,197,255,204,255,227,255,246,255,249,255,245,255,230,255,229,255,225,255,222,255,229,255,219,255,224,255,230,255,218,255,207,255,203,255,217,255,225,255,253,255,5,0,252,255,229,255,202,255,209,255,207,255,204,255,189,255,189,255,170,255,159,255,171,255,168,255,170,255,157,255,167,255,161,255,163,255,162,255,161,255,154,255,159,255,175,255,179,255,182,255,169,255,169,255,162,255,173,255,178,255,175,255,202,255,201,255,201,255,182,255,175,255,155,255,142,255,121,255,135,255,149,255,146,255,148,255,159,255,163,255,146,255,141,255,148,255,136,255,135,255,118,255,109,255,111,255,122,255,106,255,103,255,91,255,92,255,104,255,96,255,98,255,104,255,123,255,135,255,152,255,148,255,170,255,165,255,192,255,205,255,221,255,221,255,229,255,234,255,237,255,236,255,246,255,239,255,240,255,238,255,251,255,13,0,3,0,251,255,255,255,246,255,237,255,237,255,246,255,251,255,255,255,243,255,246,255,230,255,231,255,222,255,212,255,215,255,215,255,211,255,202,255,201,255,201,255,187,255,184,255,187,255,177,255,168,255,164,255,158,255,160,255,165,255,188,255,191,255,182,255,163,255,141,255,134,255,146,255,170,255,171,255,187,255,169,255,183,255,199,255,200,255,190,255,183,255,196,255,199,255,193,255,200,255,206,255,201,255,198,255,184,255,184,255,178,255,177,255,187,255,200,255,192,255,165,255,170,255,177,255,188,255,195,255,190,255,185,255,199,255,195,255,221,255,213,255,221,255,205,255,193,255,189,255,176,255,195,255,186,255,189,255,178,255,166,255,151,255,142,255,143,255,155,255,142,255,146,255,146,255,165,255,160,255,168,255,176,255,177,255,177,255,165,255,171,255,172,255,205,255,213,255,219,255,228,255,224,255,210,255,200,255,183,255,189,255,180,255,168,255,162,255,164,255,134,255,140,255,121,255,115,255,105,255,93,255,94,255,73,255,75,255,77,255,68,255,59,255,65,255,69,255,65,255,59,255,72,255,85,255,99,255,91,255,80,255,62,255,63,255,73,255,96,255,101,255,95,255,79,255,64,255,73,255,92,255,103,255,116,255,118,255,127,255,137,255,131,255,135,255,134,255,160,255,159,255,172,255,173,255,176,255,174,255,193,255,198,255,191,255,191,255,198,255,199,255,178,255,160,255,153,255,148,255,163,255,152,255,158,255,159,255,170,255,187,255,184,255,182,255,191,255,194,255,191,255,186,255,189,255,213,255,229,255,209,255,196,255,178,255,165,255,143,255,141,255,141,255,138,255,134,255,114,255,113,255,114,255,124,255,133,255,161,255,168,255,172,255,156,255,158,255,150,255,146,255,117,255,113,255,108,255,105,255,105,255,108,255,102,255,123,255,121,255,122,255,104,255,96,255,93,255,93,255,93,255,96,255,98,255,89,255,89,255,74,255,72,255,80,255,86,255,89,255,95,255,116,255,138,255,137,255,143,255,139,255,122,255,141,255,146,255,159,255,147,255,147,255,149,255,153,255,149,255,151,255,122,255,119,255,121,255,137,255,144,255,146,255,158,255,159,255,166,255,168,255,168,255,173,255,197,255,211,255,205,255,194,255,187,255,197,255,185,255,185,255,196,255,192,255,200,255,203,255,210,255,204,255,207,255,188,255,203,255,208,255,205,255,200,255,186,255,170,255,169,255,182,255,190,255,177,255,165,255,163,255,180,255,184,255,176,255,175,255,167,255,175,255,178,255,180,255,181,255,178,255,199,255,193,255,184,255,196,255,200,255,191,255,172,255,188,255,200,255,230,255,238,255,243,255,234,255,235,255,252,255,0,0,6,0,8,0,8,0,252,255,254,255,6,0,250,255,1,0,0,0,2,0,245,255,247,255,235,255,247,255,250,255,248,255,239,255,237,255,224,255,216,255,205,255,191,255,183,255,189,255,195,255,185,255,172,255,175,255,171,255,165,255,159,255,163,255,164,255,165,255,185,255,193,255,213,255,210,255,197,255,196,255,203,255,199,255,193,255,185,255,195,255,189,255,195,255,197,255,206,255,200,255,193,255,190,255,189,255,204,255,206,255,223,255,228,255,221,255,215,255,225,255,235,255,248,255,238,255,233,255,237,255,240,255,241,255,240,255,251,255,235,255,239,255,235,255,246,255,4,0,19,0,16,0,5,0,8,0,254,255,248,255,235,255,219,255,214,255,212,255,205,255,206,255,194,255,185,255,177,255,170,255,163,255,157,255,180,255,175,255,185,255,187,255,202,255,212,255,231,255,228,255,234,255,240,255,10,0,6,0,0,0,254,255,252,255,248,255,239,255,241,255,225,255,231,255,242,255,2,0,14,0,6,0,240,255,237,255,237,255,251,255,10,0,20,0,25,0,14,0,4,0,15,0,8,0,18,0,19,0,7,0]);Module["FS_createDataFile"]("/media/sounds","penguin.wav",fileData0,true,true,false)}if(Module["calledRun"]){runWithFS()}else{if(!Module["preRun"])Module["preRun"]=[];Module["preRun"].push(runWithFS)}};loadPackage({"files":[]})})();var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=function(status,toThrow){throw toThrow};Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=true;var ENVIRONMENT_IS_WORKER=false;if(Module["ENVIRONMENT"]){throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)")}var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}if(!(typeof window==="object"||typeof importScripts==="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");Module["read"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module["setWindowTitle"]=function(title){document.title=title}}else{throw new Error("environment detection error")}var out=Module["print"]||(typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null);var err=Module["printErr"]||(typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;assert(typeof Module["memoryInitializerPrefixURL"]==="undefined","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["pthreadMainPrefixURL"]==="undefined","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["cdInitializerPrefixURL"]==="undefined","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["filePackagePrefixURL"]==="undefined","Module.filePackagePrefixURL option was removed, use Module.locateFile instead");stackSave=stackRestore=stackAlloc=function(){abort("cannot use the stack before compiled code is ready to run, and has provided stack access")};function dynamicAlloc(size){assert(DYNAMICTOP_PTR);var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end<=_emscripten_get_heap_size()){HEAP32[DYNAMICTOP_PTR>>2]=end}else{return 0}return ret}function getNativeTypeSize(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return 4}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0,"getNativeTypeSize invalid bits "+bits+", type "+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}var asm2wasmImports={"f64-rem":function(x,y){return x%y},"debugger":function(){debugger}};var functionPointers=new Array(0);var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};if(typeof WebAssembly!=="object"){abort("No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.")}var wasmMemory;var wasmTable;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={"string":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},"array":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType==="string")return UTF8ToString(ret);if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;assert(returnType!=="array",'Return type should not be "array".');if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function cwrap(ident,returnType,argTypes,opts){return function(){return ccall(ident,returnType,argTypes,arguments,opts)}}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}var ALLOC_NONE=3;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,stackAlloc,dynamicAlloc][allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var stop;ptr=ret;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];type=singleType||types[i];if(type===0){i++;continue}assert(type,"Must know what type to store in allocate!");if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}function getMemory(size){if(!runtimeInitialized)return dynamicAlloc(size);return _malloc(size)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{if((u0&248)!=240)warnOnce("Invalid UTF-8 leading byte 0x"+u0.toString(16)+" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!");u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;if(u>=2097152)warnOnce("Invalid Unicode code point 0x"+u.toString(16)+" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).");outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){assert(typeof maxBytesToWrite=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function writeArrayToMemory(array,buffer){assert(array.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)");HEAP8.set(array,buffer)}function demangle(func){warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return func}function demangleAll(text){var regex=/__Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}var WASM_PAGE_SIZE=65536;var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STACK_BASE=444448,STACK_MAX=5687328,DYNAMIC_BASE=5687328,DYNAMICTOP_PTR=444192;assert(STACK_BASE%16===0,"stack must start aligned");assert(DYNAMIC_BASE%16===0,"heap must start aligned");var TOTAL_STACK=5242880;if(Module["TOTAL_STACK"])assert(TOTAL_STACK===Module["TOTAL_STACK"],"the stack size can no longer be determined at runtime");var INITIAL_TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(INITIAL_TOTAL_MEMORY<TOTAL_STACK)err("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+INITIAL_TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&Int32Array.prototype.subarray!==undefined&&Int32Array.prototype.set!==undefined,"JS engine does not provide full typed array support");if(Module["buffer"]){buffer=Module["buffer"];assert(buffer.byteLength===INITIAL_TOTAL_MEMORY,"provided buffer should be "+INITIAL_TOTAL_MEMORY+" bytes, but it is "+buffer.byteLength)}else{if(typeof WebAssembly==="object"&&typeof WebAssembly.Memory==="function"){assert(INITIAL_TOTAL_MEMORY%WASM_PAGE_SIZE===0);wasmMemory=new WebAssembly.Memory({"initial":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE,"maximum":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=wasmMemory.buffer}else{buffer=new ArrayBuffer(INITIAL_TOTAL_MEMORY)}assert(buffer.byteLength===INITIAL_TOTAL_MEMORY)}updateGlobalBufferViews();HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function writeStackCookie(){assert((STACK_MAX&3)==0);HEAPU32[(STACK_MAX>>2)-1]=34821223;HEAPU32[(STACK_MAX>>2)-2]=2310721022}function checkStackCookie(){if(HEAPU32[(STACK_MAX>>2)-1]!=34821223||HEAPU32[(STACK_MAX>>2)-2]!=2310721022){abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x"+HEAPU32[(STACK_MAX>>2)-2].toString(16)+" "+HEAPU32[(STACK_MAX>>2)-1].toString(16))}if(HEAP32[0]!==1668509029)throw"Runtime error: The application has corrupted its heap memory area (address zero)!"}function abortStackOverflow(allocSize){abort("Stack overflow! Attempted to allocate "+allocSize+" bytes on the stack, but stack has only "+(STACK_MAX-stackSave()+allocSize)+" bytes available!")}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){checkStackCookie();if(runtimeInitialized)return;runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__)}function preMain(){checkStackCookie();FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__)}function postRun(){checkStackCookie();if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}assert(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;var runDependencyTracking={};function getUniqueRunDependency(id){var orig=id;while(1){if(!runDependencyTracking[id])return id;id=orig+Math.random()}return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(id){assert(!runDependencyTracking[id]);runDependencyTracking[id]=1;if(runDependencyWatcher===null&&typeof setInterval!=="undefined"){runDependencyWatcher=setInterval(function(){if(ABORT){clearInterval(runDependencyWatcher);runDependencyWatcher=null;return}var shown=false;for(var dep in runDependencyTracking){if(!shown){shown=true;err("still waiting on run dependencies:")}err("dependency: "+dep)}if(shown){err("(end of list)")}},1e4)}}else{err("warning: run dependency added without ID")}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(id){assert(runDependencyTracking[id]);delete runDependencyTracking[id]}else{err("warning: run dependency removed without ID")}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile="engine.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(Module["wasmBinary"]){return new Uint8Array(Module["wasmBinary"])}if(Module["readBinary"]){return Module["readBinary"](wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module["wasmBinary"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(env){var info={"env":env,"global":{"NaN":NaN,Infinity:Infinity},"global.Math":Math,"asm2wasm":asm2wasmImports};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}var trueModule=Module;function receiveInstantiatedSource(output){assert(Module===trueModule,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");trueModule=null;receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}if(!Module["wasmBinary"]&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:"same-origin"}),info).then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource)})}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module["asm"]=function(global,env,providedBuffer){env["memory"]=wasmMemory;env["table"]=wasmTable=new WebAssembly.Table({"initial":1339,"maximum":1339,"element":"anyfunc"});env["__memory_base"]=1024;env["__table_base"]=0;var exports=createWasm(env);assert(exports,"binaryen setup failed (no wasm support?)");return exports};var ASM_CONSTS=[function($0,$1,$2,$3){var data=HEAPF32.subarray($0/4,$0/4+$2*$3);for(var channel=0;channel<$3;channel++){var outputData=_as_output_buffer.getChannelData(channel);for(var sample=0;sample<$2;sample++){outputData[sample+$1]=data[sample*$3+channel]}}},function(){context.suspend()},function(){context.resume()},function(){_as_script_node.disconnect(context.destination)},function(){_as_script_node.connect(context.destination);_as_script_node.onaudioprocess=function(audioProcessingEvent){_as_output_buffer=audioProcessingEvent.outputBuffer;FMOD_JS_MixFunction(_as_output_buffer.getChannelData(0).length)}},function(){context=new(window.AudioContext||window.webkitAudioContext);if(!context){return 0}FMOD_JS_MixFunction=Module.cwrap("FMOD_JS_MixFunction","void",["number"]);return context.sampleRate},function($0,$1,$2){_as_script_node=context.createScriptProcessor($1,0,$0)},function(){infocontext=new(window.AudioContext||window.webkitAudioContext);if(!infocontext){return 0}inforate=infocontext.sampleRate;infocontext.close();delete infocontext;return inforate}];function _emscripten_asm_const_i(code){return ASM_CONSTS[code]()}function _emscripten_asm_const_iiii(code,a0,a1,a2){return ASM_CONSTS[code](a0,a1,a2)}function _emscripten_asm_const_iiiii(code,a0,a1,a2,a3){return ASM_CONSTS[code](a0,a1,a2,a3)}__ATINIT__.push({func:function(){globalCtors()}});var tempDoublePtr=444432;assert(tempDoublePtr%8==0);function ___atomic_fetch_add_8(ptr,vall,valh,memmodel){var l=HEAP32[ptr>>2];var h=HEAP32[ptr+4>>2];HEAP32[ptr>>2]=_i64Add(l,h,vall,valh);HEAP32[ptr+4>>2]=getTempRet0();return(setTempRet0(h),l)|0}function ___cxa_free_exception(ptr){try{return _free(ptr)}catch(e){err("exception during cxa_free_exception: "+e)}}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var key in EXCEPTIONS.infos){var ptr=+key;var adj=EXCEPTIONS.infos[ptr].adjusted;var len=adj.length;for(var i=0;i<len;i++){if(adj[i]===adjusted){return ptr}}}return adjusted},addRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++},decRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Module["dynCall_vi"](info.destructor,ptr)}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}},clearRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0}};function ___cxa_pure_virtual(){ABORT=true;throw"Pure virtual function called!"}function ___lock(){}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;else err("failed to set errno from JS");return value}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)},resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH.resolve(from).substr(1);to=PATH.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[ERRNO_CODES.ENOENT]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name]},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}delete parent.contents[name]},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){assert(position===0,"canOwn must imply no weird position inside the file");node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&(contents.buffer===buffer||contents.buffer===buffer.buffer)){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)}buffer.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var IDBFS={dbs:{},indexedDB:function(){if(typeof indexedDB!=="undefined")return indexedDB;var ret=null;if(typeof window==="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;assert(ret,"IDBFS used, but indexedDB not supported");return ret},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount){return MEMFS.mount.apply(null,arguments)},syncfs:function(mount,populate,callback){IDBFS.getLocalSet(mount,function(err,local){if(err)return callback(err);IDBFS.getRemoteSet(mount,function(err,remote){if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)})})},getDB:function(name,callback){var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}if(!req){return callback("Unable to connect to IndexedDB")}req.onupgradeneeded=function(e){var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}};req.onsuccess=function(){db=req.result;IDBFS.dbs[name]=db;callback(null,db)};req.onerror=function(e){callback(this.error);e.preventDefault()}},getLocalSet:function(mount,callback){var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return function(p){return PATH.join2(root,p)}}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})},getRemoteSet:function(mount,callback){var entries={};IDBFS.getDB(mount.mountpoint,function(err,db){if(err)return callback(err);try{var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=function(e){callback(this.error);e.preventDefault()};var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=function(event){var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()}}catch(e){return callback(e)}})},loadLocalEntry:function(path,callback){var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}},storeLocalEntry:function(path,entry,callback){try{if(FS.isDir(entry.mode)){FS.mkdir(path,entry.mode)}else if(FS.isFile(entry.mode)){FS.writeFile(path,entry.contents,{canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry.mode);FS.utime(path,entry.timestamp,entry.timestamp)}catch(e){return callback(e)}callback(null)},removeLocalEntry:function(path,callback){try{var lookup=FS.lookupPath(path);var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)},loadRemoteEntry:function(store,path,callback){var req=store.get(path);req.onsuccess=function(event){callback(null,event.target.result)};req.onerror=function(e){callback(this.error);e.preventDefault()}},storeRemoteEntry:function(store,path,entry,callback){var req=store.put(entry,path);req.onsuccess=function(){callback(null)};req.onerror=function(e){callback(this.error);e.preventDefault()}},removeRemoteEntry:function(store,path,callback){var req=store.delete(path);req.onsuccess=function(){callback(null)};req.onerror=function(e){callback(this.error);e.preventDefault()}},reconcile:function(src,dst,callback){var total=0;var create=[];Object.keys(src.entries).forEach(function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e.timestamp>e2.timestamp){create.push(key);total++}});var remove=[];Object.keys(dst.entries).forEach(function(key){var e=dst.entries[key];var e2=src.entries[key];if(!e2){remove.push(key);total++}});if(!total){return callback(null)}var errored=false;var completed=0;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=total){return callback(null)}}transaction.onerror=function(e){done(this.error);e.preventDefault()};create.sort().forEach(function(path){if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,function(err,entry){if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)})}else{IDBFS.loadLocalEntry(path,function(err,entry){if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)})}});remove.sort().reverse().forEach(function(path){if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}})}};var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function(mount){assert(ENVIRONMENT_IS_WORKER);if(!WORKERFS.reader)WORKERFS.reader=new FileReaderSync;var root=WORKERFS.createNode(null,"/",WORKERFS.DIR_MODE,0);var createdParents={};function ensureParent(path){var parts=path.split("/");var parent=root;for(var i=0;i<parts.length-1;i++){var curr=parts.slice(0,i+1).join("/");if(!createdParents[curr]){createdParents[curr]=WORKERFS.createNode(parent,parts[i],WORKERFS.DIR_MODE,0)}parent=createdParents[curr]}return parent}function base(path){var parts=path.split("/");return parts[parts.length-1]}Array.prototype.forEach.call(mount.opts["files"]||[],function(file){WORKERFS.createNode(ensureParent(file.name),base(file.name),WORKERFS.FILE_MODE,0,file,file.lastModifiedDate)});(mount.opts["blobs"]||[]).forEach(function(obj){WORKERFS.createNode(ensureParent(obj["name"]),base(obj["name"]),WORKERFS.FILE_MODE,0,obj["data"])});(mount.opts["packages"]||[]).forEach(function(pack){pack["metadata"].files.forEach(function(file){var name=file.filename.substr(1);WORKERFS.createNode(ensureParent(name),base(name),WORKERFS.FILE_MODE,0,pack["blob"].slice(file.start,file.end))})});return root},createNode:function(parent,name,mode,dev,contents,mtime){var node=FS.createNode(parent,name,mode);node.mode=mode;node.node_ops=WORKERFS.node_ops;node.stream_ops=WORKERFS.stream_ops;node.timestamp=(mtime||new Date).getTime();assert(WORKERFS.FILE_MODE!==WORKERFS.DIR_MODE);if(mode===WORKERFS.FILE_MODE){node.size=contents.size;node.contents=contents}else{node.size=4096;node.contents={}}if(parent){parent.contents[name]=node}return node},node_ops:{getattr:function(node){return{dev:1,ino:undefined,mode:node.mode,nlink:1,uid:0,gid:0,rdev:undefined,size:node.size,atime:new Date(node.timestamp),mtime:new Date(node.timestamp),ctime:new Date(node.timestamp),blksize:4096,blocks:Math.ceil(node.size/4096)}},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}},lookup:function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)},mknod:function(parent,name,mode,dev){throw new FS.ErrnoError(ERRNO_CODES.EPERM)},rename:function(oldNode,newDir,newName){throw new FS.ErrnoError(ERRNO_CODES.EPERM)},unlink:function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)},rmdir:function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newName,oldPath){throw new FS.ErrnoError(ERRNO_CODES.EPERM)},readlink:function(node){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}},stream_ops:{read:function(stream,buffer,offset,length,position){if(position>=stream.node.size)return 0;var chunk=stream.node.contents.slice(position,position+length);var ab=WORKERFS.reader.readAsArrayBuffer(chunk);buffer.set(new Uint8Array(ab),offset);return chunk.size},write:function(stream,buffer,offset,length,position){throw new FS.ErrnoError(ERRNO_CODES.EIO)},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.size}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position}}};var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(40)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(40)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 13}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 13}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 13}return 0},mayLookup:function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return 13;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 17}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return 20}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 16}}else{if(FS.isDir(node.mode)){return 21}}return 0},mayOpen:function(node,flags){if(!node){return 2}if(FS.isLink(node.mode)){return 40}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 21}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(24)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(29)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){console.log("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(err){assert(FS.syncFSRequests>0);FS.syncFSRequests--;return callback(err)}function done(err){if(err){if(!done.errored){done.errored=true;return doCallback(err)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(16)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(16)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(20)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(22)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(22)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(1)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=17)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH.resolve(oldpath)){throw new FS.ErrnoError(2)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(2)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(1)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(16)}if(!old_dir||!new_dir)throw new FS.ErrnoError(2);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(18)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(22)}relative=PATH.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(39)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(1)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(16)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(1)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(16)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(20)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(1)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(16)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(2)}if(!link.node_ops.readlink){throw new FS.ErrnoError(22)}return PATH.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(2)}if(!node.node_ops.getattr){throw new FS.ErrnoError(1)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(1)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(9)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(1)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(9)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(22)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(1)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(21)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(22)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(9)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(22)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(2)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(17)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(2)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(20)}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;console.log("FS.trackingDelegate error on read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(29)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(22)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(22)}if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(9)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(21)}if(!stream.stream_ops.read){throw new FS.ErrnoError(22)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(29)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(22)}if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(9)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(21)}if(!stream.stream_ops.write){throw new FS.ErrnoError(22)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(29)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if(offset<0||length<=0){throw new FS.ErrnoError(22)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(9)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(19)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(95)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,buffer,offset,length,position,prot,flags){if((stream.flags&2097155)===1){throw new FS.ErrnoError(13)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(19)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(25)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(2)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(20)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);random_device=function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else{}if(!random_device){random_device=function(){abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(9);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");var stdout=FS.open("/dev/stdout","w");var stderr=FS.open("/dev/stderr","w");assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}};this.setErrno(errno);this.message=ERRNO_MESSAGES[errno];if(this.stack)Object.defineProperty(this,"stack",{value:(new Error).stack,writable:true});if(this.stack)this.stack=demangleAll(this.stack)};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[2].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS,"IDBFS":IDBFS,"WORKERFS":WORKERFS}},init:function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},joinPath:function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path},absolutePath:function(relative,base){return PATH.resolve(base,relative)},standardizePath:function(path){return PATH.normalize(path)},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createFolder:function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(5)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(11)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(5)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},createLink:function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(Module["read"]){try{obj.contents=intArrayFromString(Module["read"](obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(5);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;console.log("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(5)}return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(5)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){console.log("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);dir=dirstream.path}path=PATH.join2(dir,path)}return path},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-ERRNO_CODES.ENOTDIR}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;HEAP32[buf+36>>2]=stat.size;HEAP32[buf+40>>2]=4096;HEAP32[buf+44>>2]=stat.blocks;HEAP32[buf+48>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+52>>2]=0;HEAP32[buf+56>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ino;return 0},doMsync:function(addr,stream,len,flags){var buffer=new Uint8Array(HEAPU8.subarray(addr,addr+len));FS.msync(stream,buffer,0,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-ERRNO_CODES.EINVAL}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-ERRNO_CODES.EINVAL;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-ERRNO_CODES.EINVAL}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-ERRNO_CODES.EACCES}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},getStreamFromFD:function(){var stream=FS.getStream(SYSCALLS.get());if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return stream},getSocketFromFD:function(){var socket=SOCKFS.getSocket(SYSCALLS.get());if(!socket)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return socket},getSocketAddress:function(allowNull){var addrp=SYSCALLS.get(),addrlen=SYSCALLS.get();if(allowNull&&addrp===0)return null;var info=__read_sockaddr(addrp,addrlen);if(info.errno)throw new FS.ErrnoError(info.errno);info.addr=DNS.lookup_addr(info.addr)||info.addr;return info},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low},getZero:function(){assert(SYSCALLS.get()===0)}};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doWritev(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-ERRNO_CODES.EINVAL}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return-ERRNO_CODES.EINVAL;case 9:___setErrNo(ERRNO_CODES.EINVAL);return-1;default:{return-ERRNO_CODES.EINVAL}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),op=SYSCALLS.get();switch(op){case 21509:case 21505:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0}case 21519:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return-ERRNO_CODES.EINVAL}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0}case 21524:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0}default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return"_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}};return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb()})}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return!!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}});clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function runDestructor(handle){var $$=handle.$$;if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}this.$$.count.value-=1;var toDelete=0===this.$$.count.value;if(toDelete){runDestructor(this)}if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register(function(){clonedHandle["delete"]()}));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]()}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return Object.create(prototype,{$$:{value:record}})}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(dynCall){var args=[];for(var i=1;i<signature.length;++i){args.push("a"+i)}var name="dynCall_"+signature+"_"+rawFunction;var body="return function "+name+"("+args.join(", ")+") {\n";body+="    return dynCall(rawFunction"+(args.length?", ":"")+args.join(", ")+");\n";body+="};\n";return new Function("dynCall","rawFunction",body)(dynCall,rawFunction)}var fp;if(Module["FUNCTION_TABLE_"+signature]!==undefined){fp=Module["FUNCTION_TABLE_"+signature][rawFunction]}else if(typeof FUNCTION_TABLE!=="undefined"){fp=FUNCTION_TABLE[rawFunction]}else{var dc=Module["dynCall_"+signature];if(dc===undefined){dc=Module["dynCall_"+signature.replace(/f/g,"d")];if(dc===undefined){throwBindingError("No dynCall invoker for signature: "+signature)}}fp=makeDynCaller(dc)}if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1))}var destructors=[];var args=new Array(argCount);args[0]=rawConstructor;for(var i=1;i<argCount;++i){args[i]=argTypes[i]["toWireType"](destructors,arguments[i-1])}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0]["fromWireType"](ptr)};return[]});return[]})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired"}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval}function __emval_register(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv},"toWireType":function(destructors,value){return __emval_register(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name.indexOf("unsigned")!=-1;registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name+'", which is outside the valid range ['+minRange+", "+maxRange+"]!")}return isUnsignedType?value>>>0:value|0},"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(heap["buffer"],data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var endChar=HEAPU8[value+4+length];var endCharSwap=0;if(endChar!=0){endCharSwap=endChar;HEAPU8[value+4+length]=0}var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(HEAPU8[currentBytePtr]==0){var stringSegment=UTF8ToString(decodeStartPtr);if(str===undefined)str=stringSegment;else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}if(endCharSwap!=0)HEAPU8[value+4+length]=endCharSwap}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join("")}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value==="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)}}else{getLength=function(){return value.length}}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var getHeap,shift;if(charSize===2){getHeap=function(){return HEAPU16};shift=1}else if(charSize===4){getHeap=function(){return HEAPU32};shift=2}registerType(rawType,{name:name,"fromWireType":function(value){var HEAP=getHeap();var length=HEAPU32[value>>2];var a=new Array(length);var start=value+4>>shift;for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAP[start+i])}_free(value);return a.join("")},"toWireType":function(destructors,value){var HEAP=getHeap();var length=value.length;var ptr=_malloc(4+length*charSize);HEAPU32[ptr>>2]=length;var start=ptr+4>>shift;for(var i=0;i<length;++i){HEAP[start+i]=value.charCodeAt(i)}if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}})}function _abort(){Module["abort"]()}function _emscripten_get_heap_size(){return HEAP8.length}function _emscripten_get_now(){abort()}function abortOnCannotGrowMemory(requestedSize){abort("Cannot enlarge memory arrays to size "+requestedSize+" bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+HEAP8.length+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function _emscripten_resize_heap(requestedSize){abortOnCannotGrowMemory(requestedSize)}var _llvm_cos_f64=Math_cos;function _llvm_exp2_f32(x){return Math.pow(2,x)}function _llvm_log10_f32(x){return Math.log(x)/Math.LN10}var _llvm_sin_f32=Math_sin;var _llvm_sin_f64=Math_sin;function _llvm_trap(){abort("trap!")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}function _usleep(useconds){var msec=useconds/1e3;if((ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&self["performance"]&&self["performance"]["now"]){var start=self["performance"]["now"]();while(self["performance"]["now"]()-start<msec){}}else{var start=Date.now();while(Date.now()-start<msec){}}return 0}FS.staticInit();Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");InternalError=Module["InternalError"]=extendError(Error,"InternalError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();if(typeof dateNow!=="undefined"){_emscripten_get_now=dateNow}else if(typeof performance==="object"&&performance&&typeof performance["now"]==="function"){_emscripten_get_now=function(){return performance["now"]()}}else{_emscripten_get_now=Date.now}function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function nullFunc_fi(x){err("Invalid function pointer called with signature 'fi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_fif(x){err("Invalid function pointer called with signature 'fif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_i(x){err("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_ii(x){err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iif(x){err("Invalid function pointer called with signature 'iif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiff(x){err("Invalid function pointer called with signature 'iiff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iifff(x){err("Invalid function pointer called with signature 'iifff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiffffffff(x){err("Invalid function pointer called with signature 'iiffffffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiffi(x){err("Invalid function pointer called with signature 'iiffi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iifi(x){err("Invalid function pointer called with signature 'iifi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iii(x){err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiif(x){err("Invalid function pointer called with signature 'iiif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiff(x){err("Invalid function pointer called with signature 'iiiff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiifffffii(x){err("Invalid function pointer called with signature 'iiifffffii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiffffii(x){err("Invalid function pointer called with signature 'iiiffffii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiifffi(x){err("Invalid function pointer called with signature 'iiifffi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiifffii(x){err("Invalid function pointer called with signature 'iiifffii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiffi(x){err("Invalid function pointer called with signature 'iiiffi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiii(x){err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiifffffiii(x){err("Invalid function pointer called with signature 'iiiifffffiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiii(x){err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiiii(x){err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiiiii(x){err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiiiiii(x){err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiiiiiii(x){err("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiiiiiiii(x){err("Invalid function pointer called with signature 'iiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiiiiiiiiii(x){err("Invalid function pointer called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiijiiii(x){err("Invalid function pointer called with signature 'iiijiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iij(x){err("Invalid function pointer called with signature 'iij'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iijf(x){err("Invalid function pointer called with signature 'iijf'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iiji(x){err("Invalid function pointer called with signature 'iiji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iijj(x){err("Invalid function pointer called with signature 'iijj'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_iijji(x){err("Invalid function pointer called with signature 'iijji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_ji(x){err("Invalid function pointer called with signature 'ji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_v(x){err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_vi(x){err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_vii(x){err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viii(x){err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiii(x){err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiiii(x){err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiiiif(x){err("Invalid function pointer called with signature 'viiiiif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiiiii(x){err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiiiiiffffff(x){err("Invalid function pointer called with signature 'viiiiiiffffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiiiiii(x){err("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiiiiiiifffii(x){err("Invalid function pointer called with signature 'viiiiiiiifffii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}function nullFunc_viiiiiiiiifff(x){err("Invalid function pointer called with signature 'viiiiiiiiifff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");err("Build with ASSERTIONS=2 for more info.");abort(x)}var asmGlobalArg={};var asmLibraryArg={"u":setTempRet0,"x":getTempRet0,"b":abortStackOverflow,"ea":nullFunc_fi,"V":nullFunc_fif,"P":nullFunc_i,"J":nullFunc_ii,"A":nullFunc_iif,"v":nullFunc_iiff,"Ia":nullFunc_iifff,"Ha":nullFunc_iiffffffff,"Ga":nullFunc_iiffi,"Fa":nullFunc_iifi,"Ea":nullFunc_iii,"Da":nullFunc_iiif,"Ca":nullFunc_iiiff,"Ba":nullFunc_iiifffffii,"Aa":nullFunc_iiiffffii,"za":nullFunc_iiifffi,"ya":nullFunc_iiifffii,"xa":nullFunc_iiiffi,"wa":nullFunc_iiii,"va":nullFunc_iiiifffffiii,"ua":nullFunc_iiiii,"ta":nullFunc_iiiiii,"sa":nullFunc_iiiiiii,"ra":nullFunc_iiiiiiii,"qa":nullFunc_iiiiiiiii,"pa":nullFunc_iiiiiiiiii,"oa":nullFunc_iiiiiiiiiii,"na":nullFunc_iiijiiii,"ma":nullFunc_iij,"la":nullFunc_iijf,"ka":nullFunc_iiji,"ja":nullFunc_iijj,"ia":nullFunc_iijji,"ha":nullFunc_ji,"ga":nullFunc_v,"fa":nullFunc_vi,"da":nullFunc_vii,"ca":nullFunc_viii,"ba":nullFunc_viiii,"aa":nullFunc_viiiii,"$":nullFunc_viiiiif,"_":nullFunc_viiiiii,"Z":nullFunc_viiiiiiffffff,"Y":nullFunc_viiiiiii,"X":nullFunc_viiiiiiiifffii,"W":nullFunc_viiiiiiiiifff,"w":___atomic_fetch_add_8,"U":___cxa_pure_virtual,"T":___lock,"t":___setErrNo,"S":___syscall140,"R":___syscall145,"s":___syscall146,"h":___syscall221,"Q":___syscall5,"r":___syscall54,"q":___syscall6,"k":___unlock,"O":__embind_register_bool,"N":__embind_register_class,"M":__embind_register_class_constructor,"L":__embind_register_class_function,"K":__embind_register_emval,"p":__embind_register_float,"e":__embind_register_integer,"c":__embind_register_memory_view,"o":__embind_register_std_string,"I":__embind_register_std_wstring,"H":__embind_register_void,"G":_abort,"g":_emscripten_asm_const_i,"F":_emscripten_asm_const_iiii,"E":_emscripten_asm_const_iiiii,"D":_emscripten_get_heap_size,"n":_emscripten_get_now,"C":_emscripten_memcpy_big,"B":_emscripten_resize_heap,"j":_llvm_cos_f64,"f":_llvm_exp2_f32,"d":_llvm_log10_f32,"m":_llvm_sin_f32,"i":_llvm_sin_f64,"l":_llvm_trap,"z":_usleep,"y":abortOnCannotGrowMemory,"a":DYNAMICTOP_PTR};var asm=Module["asm"](asmGlobalArg,asmLibraryArg,buffer);var real__FMOD_JS_MixFunction=asm["Ja"];asm["Ja"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__FMOD_JS_MixFunction.apply(null,arguments)};var real____cxa_can_catch=asm["Ka"];asm["Ka"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_can_catch.apply(null,arguments)};var real____cxa_is_pointer_type=asm["La"];asm["La"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_is_pointer_type.apply(null,arguments)};var real____errno_location=asm["Ma"];asm["Ma"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____errno_location.apply(null,arguments)};var real____getTypeName=asm["Na"];asm["Na"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____getTypeName.apply(null,arguments)};var real__fflush=asm["Oa"];asm["Oa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fflush.apply(null,arguments)};var real__free=asm["Pa"];asm["Pa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__free.apply(null,arguments)};var real__i64Add=asm["Qa"];asm["Qa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__i64Add.apply(null,arguments)};var real__llvm_bswap_i16=asm["Ra"];asm["Ra"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__llvm_bswap_i16.apply(null,arguments)};var real__llvm_bswap_i32=asm["Sa"];asm["Sa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__llvm_bswap_i32.apply(null,arguments)};var real__llvm_rint_f64=asm["Ta"];asm["Ta"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__llvm_rint_f64.apply(null,arguments)};var real__malloc=asm["Ua"];asm["Ua"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc.apply(null,arguments)};var real__memmove=asm["Va"];asm["Va"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memmove.apply(null,arguments)};var real__sbrk=asm["Wa"];asm["Wa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__sbrk.apply(null,arguments)};var real__strlen=asm["Xa"];asm["Xa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strlen.apply(null,arguments)};var real_establishStackSpace=asm["Qb"];asm["Qb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_establishStackSpace.apply(null,arguments)};var real_globalCtors=asm["Rb"];asm["Rb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_globalCtors.apply(null,arguments)};var real_stackAlloc=asm["Sb"];asm["Sb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackAlloc.apply(null,arguments)};var real_stackRestore=asm["Tb"];asm["Tb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackRestore.apply(null,arguments)};var real_stackSave=asm["Ub"];asm["Ub"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackSave.apply(null,arguments)};Module["asm"]=asm;var _FMOD_JS_MixFunction=Module["_FMOD_JS_MixFunction"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ja"].apply(null,arguments)};var ___cxa_can_catch=Module["___cxa_can_catch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ka"].apply(null,arguments)};var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["La"].apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ma"].apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Na"].apply(null,arguments)};var _fflush=Module["_fflush"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Oa"].apply(null,arguments)};var _free=Module["_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Pa"].apply(null,arguments)};var _i64Add=Module["_i64Add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Qa"].apply(null,arguments)};var _llvm_bswap_i16=Module["_llvm_bswap_i16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ra"].apply(null,arguments)};var _llvm_bswap_i32=Module["_llvm_bswap_i32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Sa"].apply(null,arguments)};var _llvm_rint_f64=Module["_llvm_rint_f64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ta"].apply(null,arguments)};var _malloc=Module["_malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ua"].apply(null,arguments)};var _memmove=Module["_memmove"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Va"].apply(null,arguments)};var _sbrk=Module["_sbrk"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Wa"].apply(null,arguments)};var _strlen=Module["_strlen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Xa"].apply(null,arguments)};var establishStackSpace=Module["establishStackSpace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Qb"].apply(null,arguments)};var globalCtors=Module["globalCtors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Rb"].apply(null,arguments)};var stackAlloc=Module["stackAlloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Sb"].apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Tb"].apply(null,arguments)};var stackSave=Module["stackSave"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ub"].apply(null,arguments)};var dynCall_fi=Module["dynCall_fi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ya"].apply(null,arguments)};var dynCall_fif=Module["dynCall_fif"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Za"].apply(null,arguments)};var dynCall_i=Module["dynCall_i"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_a"].apply(null,arguments)};var dynCall_ii=Module["dynCall_ii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["$a"].apply(null,arguments)};var dynCall_iif=Module["dynCall_iif"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ab"].apply(null,arguments)};var dynCall_iiff=Module["dynCall_iiff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["bb"].apply(null,arguments)};var dynCall_iifff=Module["dynCall_iifff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cb"].apply(null,arguments)};var dynCall_iiffffffff=Module["dynCall_iiffffffff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["db"].apply(null,arguments)};var dynCall_iiffi=Module["dynCall_iiffi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["eb"].apply(null,arguments)};var dynCall_iifi=Module["dynCall_iifi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fb"].apply(null,arguments)};var dynCall_iii=Module["dynCall_iii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["gb"].apply(null,arguments)};var dynCall_iiif=Module["dynCall_iiif"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["hb"].apply(null,arguments)};var dynCall_iiiff=Module["dynCall_iiiff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ib"].apply(null,arguments)};var dynCall_iiifffffii=Module["dynCall_iiifffffii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["jb"].apply(null,arguments)};var dynCall_iiiffffii=Module["dynCall_iiiffffii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["kb"].apply(null,arguments)};var dynCall_iiifffi=Module["dynCall_iiifffi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["lb"].apply(null,arguments)};var dynCall_iiifffii=Module["dynCall_iiifffii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["mb"].apply(null,arguments)};var dynCall_iiiffi=Module["dynCall_iiiffi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["nb"].apply(null,arguments)};var dynCall_iiii=Module["dynCall_iiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ob"].apply(null,arguments)};var dynCall_iiiifffffiii=Module["dynCall_iiiifffffiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pb"].apply(null,arguments)};var dynCall_iiiii=Module["dynCall_iiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["qb"].apply(null,arguments)};var dynCall_iiiiii=Module["dynCall_iiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["rb"].apply(null,arguments)};var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["sb"].apply(null,arguments)};var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tb"].apply(null,arguments)};var dynCall_iiiiiiiii=Module["dynCall_iiiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ub"].apply(null,arguments)};var dynCall_iiiiiiiiii=Module["dynCall_iiiiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["vb"].apply(null,arguments)};var dynCall_iiiiiiiiiii=Module["dynCall_iiiiiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wb"].apply(null,arguments)};var dynCall_iiijiiii=Module["dynCall_iiijiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["xb"].apply(null,arguments)};var dynCall_iij=Module["dynCall_iij"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["yb"].apply(null,arguments)};var dynCall_iijf=Module["dynCall_iijf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["zb"].apply(null,arguments)};var dynCall_iiji=Module["dynCall_iiji"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ab"].apply(null,arguments)};var dynCall_iijj=Module["dynCall_iijj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Bb"].apply(null,arguments)};var dynCall_iijji=Module["dynCall_iijji"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Cb"].apply(null,arguments)};var dynCall_ji=Module["dynCall_ji"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Db"].apply(null,arguments)};var dynCall_v=Module["dynCall_v"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Eb"].apply(null,arguments)};var dynCall_vi=Module["dynCall_vi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Fb"].apply(null,arguments)};var dynCall_vii=Module["dynCall_vii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Gb"].apply(null,arguments)};var dynCall_viii=Module["dynCall_viii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hb"].apply(null,arguments)};var dynCall_viiii=Module["dynCall_viiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ib"].apply(null,arguments)};var dynCall_viiiii=Module["dynCall_viiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Jb"].apply(null,arguments)};var dynCall_viiiiif=Module["dynCall_viiiiif"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Kb"].apply(null,arguments)};var dynCall_viiiiii=Module["dynCall_viiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Lb"].apply(null,arguments)};var dynCall_viiiiiiffffff=Module["dynCall_viiiiiiffffff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Mb"].apply(null,arguments)};var dynCall_viiiiiii=Module["dynCall_viiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Nb"].apply(null,arguments)};var dynCall_viiiiiiiifffii=Module["dynCall_viiiiiiiifffii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Ob"].apply(null,arguments)};var dynCall_viiiiiiiiifff=Module["dynCall_viiiiiiiiifff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Pb"].apply(null,arguments)};Module["asm"]=asm;if(!Module["intArrayFromString"])Module["intArrayFromString"]=function(){abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["intArrayToString"])Module["intArrayToString"]=function(){abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["ccall"])Module["ccall"]=function(){abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["cwrap"]=cwrap;if(!Module["setValue"])Module["setValue"]=function(){abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["getValue"])Module["getValue"]=function(){abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["allocate"])Module["allocate"]=function(){abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["getMemory"]=getMemory;if(!Module["AsciiToString"])Module["AsciiToString"]=function(){abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stringToAscii"])Module["stringToAscii"]=function(){abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["UTF8ArrayToString"])Module["UTF8ArrayToString"]=function(){abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["UTF8ToString"])Module["UTF8ToString"]=function(){abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stringToUTF8Array"])Module["stringToUTF8Array"]=function(){abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stringToUTF8"])Module["stringToUTF8"]=function(){abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["lengthBytesUTF8"])Module["lengthBytesUTF8"]=function(){abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["UTF16ToString"])Module["UTF16ToString"]=function(){abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stringToUTF16"])Module["stringToUTF16"]=function(){abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["lengthBytesUTF16"])Module["lengthBytesUTF16"]=function(){abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["UTF32ToString"])Module["UTF32ToString"]=function(){abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stringToUTF32"])Module["stringToUTF32"]=function(){abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["lengthBytesUTF32"])Module["lengthBytesUTF32"]=function(){abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["allocateUTF8"])Module["allocateUTF8"]=function(){abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stackTrace"])Module["stackTrace"]=function(){abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["addOnPreRun"])Module["addOnPreRun"]=function(){abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["addOnInit"])Module["addOnInit"]=function(){abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["addOnPreMain"])Module["addOnPreMain"]=function(){abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["addOnExit"])Module["addOnExit"]=function(){abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["addOnPostRun"])Module["addOnPostRun"]=function(){abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["writeStringToMemory"])Module["writeStringToMemory"]=function(){abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["writeArrayToMemory"])Module["writeArrayToMemory"]=function(){abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["writeAsciiToMemory"])Module["writeAsciiToMemory"]=function(){abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["addRunDependency"]=addRunDependency;Module["removeRunDependency"]=removeRunDependency;if(!Module["ENV"])Module["ENV"]=function(){abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["FS"])Module["FS"]=function(){abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;if(!Module["GL"])Module["GL"]=function(){abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["dynamicAlloc"])Module["dynamicAlloc"]=function(){abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["warnOnce"])Module["warnOnce"]=function(){abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["loadDynamicLibrary"])Module["loadDynamicLibrary"]=function(){abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["loadWebAssemblyModule"])Module["loadWebAssemblyModule"]=function(){abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["getLEB"])Module["getLEB"]=function(){abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["getFunctionTables"])Module["getFunctionTables"]=function(){abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["alignFunctionTables"])Module["alignFunctionTables"]=function(){abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["registerFunctions"])Module["registerFunctions"]=function(){abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["addFunction"])Module["addFunction"]=function(){abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["removeFunction"])Module["removeFunction"]=function(){abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["getFuncWrapper"])Module["getFuncWrapper"]=function(){abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["prettyPrint"])Module["prettyPrint"]=function(){abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["makeBigInt"])Module["makeBigInt"]=function(){abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["dynCall"])Module["dynCall"]=function(){abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["getCompilerSetting"])Module["getCompilerSetting"]=function(){abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stackSave"])Module["stackSave"]=function(){abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stackRestore"])Module["stackRestore"]=function(){abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["stackAlloc"])Module["stackAlloc"]=function(){abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["establishStackSpace"])Module["establishStackSpace"]=function(){abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["print"])Module["print"]=function(){abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["printErr"])Module["printErr"]=function(){abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["getTempRet0"])Module["getTempRet0"]=function(){abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["setTempRet0"])Module["setTempRet0"]=function(){abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["Pointer_stringify"])Module["Pointer_stringify"]=function(){abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Module["ALLOC_NORMAL"])Object.defineProperty(Module,"ALLOC_NORMAL",{get:function(){abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Module["ALLOC_STACK"])Object.defineProperty(Module,"ALLOC_STACK",{get:function(){abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Module["ALLOC_DYNAMIC"])Object.defineProperty(Module,"ALLOC_DYNAMIC",{get:function(){abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Module["ALLOC_NONE"])Object.defineProperty(Module,"ALLOC_NONE",{get:function(){abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}writeStackCookie();preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();assert(!Module["_main"],'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}checkStackCookie()}Module["run"]=run;var abortDecorators=[];function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach(function(decorator){output=decorator(output,what)})}throw output}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}Module["noExitRuntime"]=true;run();
